<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Silent Reverie]]></title>
  <link href="http://myunlessor.me/atom.xml" rel="self"/>
  <link href="http://myunlessor.me/"/>
  <updated>2013-08-15T23:23:04+08:00</updated>
  <id>http://myunlessor.me/</id>
  <author>
    <name><![CDATA[刘郁]]></name>
    <email><![CDATA[myunlessor@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[淘宝前端之智勇大闯关第三季攻略]]></title>
    <link href="http://myunlessor.me/blog/2013/08/15/alibaba-ued-quiz3-strategy/"/>
    <updated>2013-08-15T22:42:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/08/15/alibaba-ued-quiz3-strategy</id>
    <content type="html"><![CDATA[<p>今天在群里看到好多人都在玩这游戏，都玩得挺high，自己也点进链接玩了下，第一次玩这类游戏，觉得挺有意思的，遂记录下自己的玩法。</p>

<p>首先，游戏链接如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://ued.campus.alibaba.com/quiz3/index.php</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>该游戏一共有6关。</p>

<h2>第一关 —— 突破，带锁的门</h2>

<p>F12键打开控制台，输入以下代码，密码显现，按不同顺序尝试密码即可通关。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[].</span><span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">Array</span><span class="p">(</span><span class="mi">11</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">),</span> <span class="nx">powder</span><span class="p">.</span><span class="nx">blow</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">powder</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第二关 —— 激光，前进的方向</h2>

<p>该关主要调整id为ma和mb两挡板元素的位置和角度形成反射即可通关，在控制台输入以下代码即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">mas</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ma&#39;</span><span class="p">).</span><span class="nx">style</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">mbs</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;mb&#39;</span><span class="p">).</span><span class="nx">style</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">mas</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="s1">&#39;550px&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">mas</span><span class="p">.</span><span class="nx">webkitTransform</span> <span class="o">=</span> <span class="s1">&#39;rotate(-82deg)&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">mbs</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="s1">&#39;430px&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">mbs</span><span class="p">.</span><span class="nx">webkitTransform</span> <span class="o">=</span> <span class="s1">&#39;rotate(172deg)&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第三关 —— 坐标，隐藏的线索</h2>

<p>初看这个场景，看到三个定位角块，嗯这是二维码，但是是空白的，审查元素得知它是个canvas元素，需要画图将该二维码补充完整，在控制台输入以下代码完成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;qr-canvas&#39;</span><span class="p">).</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">rects</span> <span class="o">=</span> <span class="s1">&#39;0,0,12,12 12,0,12,12 24,0,12,12 36,0,12,12 48,0,12,12 60,0,12,12 72,0,12,12 120,0,12,12 132,0,12,12 144,0,12,12 168,0,12,12 180,0,12,12 192,0,12,12 204,0,12,12 216,0,12,12 228,0,12,12 240,0,12,12 0,12,12,12 72,12,12,12 96,12,12,12 108,12,12,12 120,12,12,12 144,12,12,12 168,12,12,12 240,12,12,12 0,24,12,12 24,24,12,12 36,24,12,12 48,24,12,12 72,24,12,12 120,24,12,12 132,24,12,12 144,24,12,12 168,24,12,12 192,24,12,12 204,24,12,12 216,24,12,12 240,24,12,12 0,36,12,12 24,36,12,12 36,36,12,12 48,36,12,12 72,36,12,12 96,36,12,12 108,36,12,12 144,36,12,12 168,36,12,12 192,36,12,12 204,36,12,12 216,36,12,12 240,36,12,12 0,48,12,12 24,48,12,12 36,48,12,12 48,48,12,12 72,48,12,12 108,48,12,12 144,48,12,12 168,48,12,12 192,48,12,12 204,48,12,12 216,48,12,12 240,48,12,12 0,60,12,12 72,60,12,12 96,60,12,12 132,60,12,12 168,60,12,12 240,60,12,12 0,72,12,12 12,72,12,12 24,72,12,12 36,72,12,12 48,72,12,12 60,72,12,12 72,72,12,12 96,72,12,12 120,72,12,12 144,72,12,12 168,72,12,12 180,72,12,12 192,72,12,12 204,72,12,12 216,72,12,12 228,72,12,12 240,72,12,12 108,84,12,12 0,96,12,12 12,96,12,12 24,96,12,12 36,96,12,12 48,96,12,12 72,96,12,12 84,96,12,12 96,96,12,12 132,96,12,12 156,96,12,12 180,96,12,12 204,96,12,12 228,96,12,12 0,108,12,12 24,108,12,12 36,108,12,12 60,108,12,12 120,108,12,12 132,108,12,12 144,108,12,12 156,108,12,12 168,108,12,12 216,108,12,12 240,108,12,12 12,120,12,12 36,120,12,12 48,120,12,12 60,120,12,12 72,120,12,12 84,120,12,12 108,120,12,12 120,120,12,12 144,120,12,12 168,120,12,12 180,120,12,12 228,120,12,12 24,132,12,12 36,132,12,12 60,132,12,12 84,132,12,12 96,132,12,12 108,132,12,12 120,132,12,12 132,132,12,12 144,132,12,12 156,132,12,12 168,132,12,12 204,132,12,12 216,132,12,12 0,144,12,12 12,144,12,12 24,144,12,12 48,144,12,12 72,144,12,12 84,144,12,12 96,144,12,12 108,144,12,12 144,144,12,12 180,144,12,12 204,144,12,12 228,144,12,12 96,156,12,12 108,156,12,12 120,156,12,12 144,156,12,12 180,156,12,12 204,156,12,12 216,156,12,12 228,156,12,12 240,156,12,12 0,168,12,12 12,168,12,12 24,168,12,12 36,168,12,12 48,168,12,12 60,168,12,12 72,168,12,12 96,168,12,12 108,168,12,12 120,168,12,12 132,168,12,12 156,168,12,12 192,168,12,12 204,168,12,12 216,168,12,12 228,168,12,12 0,180,12,12 72,180,12,12 108,180,12,12 180,180,12,12 192,180,12,12 204,180,12,12 216,180,12,12 228,180,12,12 0,192,12,12 24,192,12,12 36,192,12,12 48,192,12,12 72,192,12,12 96,192,12,12 108,192,12,12 120,192,12,12 132,192,12,12 156,192,12,12 192,192,12,12 228,192,12,12 0,204,12,12 24,204,12,12 36,204,12,12 48,204,12,12 72,204,12,12 96,204,12,12 120,204,12,12 132,204,12,12 144,204,12,12 156,204,12,12 168,204,12,12 180,204,12,12 204,204,12,12 216,204,12,12 0,216,12,12 24,216,12,12 36,216,12,12 48,216,12,12 72,216,12,12 96,216,12,12 144,216,12,12 168,216,12,12 180,216,12,12 204,216,12,12 216,216,12,12 0,228,12,12 72,228,12,12 96,228,12,12 132,228,12,12 144,228,12,12 156,228,12,12 168,228,12,12 180,228,12,12 204,228,12,12 216,228,12,12 0,240,12,12 12,240,12,12 24,240,12,12 36,240,12,12 48,240,12,12 60,240,12,12 72,240,12,12 96,240,12,12 108,240,12,12 120,240,12,12 144,240,12,12 228,240,12,12&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rects</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第四关 —— 图案，疯狂的猜测</h2>

<p>本关类似于看图识字的游戏，在文本框输入图片对应的关键字即可，主要有以下这些：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">github</span>
</span><span class='line'><span class="nx">v</span>
</span><span class='line'><span class="nx">css</span> <span class="nx">sprite</span>
</span><span class='line'><span class="nx">stackoverflow</span>
</span><span class='line'><span class="nx">jade</span>
</span><span class='line'><span class="nx">php</span>
</span><span class='line'><span class="nx">less</span>
</span><span class='line'><span class="nx">wordpress</span>
</span><span class='line'><span class="nx">sublime</span> <span class="nx">text</span>
</span><span class='line'><span class="nx">w3</span>
</span><span class='line'><span class="nx">grunt</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第五关 —— 寻找，无尽的房间</h2>

<p>这关看得云里来雾里去，最开始一直更改url中查询字符串room的值，提示你不要人肉。控制台叫你用jquery通关，尝试许久，总结如下方法，在控制台运行后直接通关：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">loc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ready</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">query</span><span class="p">(</span><span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;[?&amp;]&#39;</span> <span class="o">+</span> <span class="nx">param</span> <span class="o">+</span> <span class="s1">&#39;=([^&amp;]*)&#39;</span><span class="p">).</span><span class="nx">exec</span><span class="p">(</span><span class="nx">loc</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">match</span> <span class="o">&amp;&amp;</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\+/g</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span> <span class="nx">yoda</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">next_room</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">loc</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;?&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">t</span><span class="o">:</span> <span class="nx">t</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">room</span><span class="o">:</span> <span class="nx">next_room</span>
</span><span class='line'>    <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span>
</span><span class='line'>          <span class="nx">nextRoom</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#next-room&#39;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span> <span class="o">+=</span> <span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">ready</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">url</span> <span class="o">+=</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span> <span class="o">===</span> <span class="s1">&#39;/quiz3/i&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ready</span> <span class="o">=</span> <span class="o">!</span><span class="nx">ready</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">url</span> <span class="o">+=</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">nextRoom</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">yoda</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">nextRoom</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">nextUrl</span> <span class="o">=</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;//&#39;</span> <span class="o">+</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="nx">url</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s1">&#39;点击进入下一关^_^: &#39;</span> <span class="o">+</span> <span class="nx">nextUrl</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">nextUrl</span><span class="p">;</span> <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">})(</span><span class="nx">query</span><span class="p">(</span><span class="s1">&#39;t&#39;</span><span class="p">),</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#next-room&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nx">location</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第六关 —— 消除! 最后的任务</h2>

<p>这关没想到什么好办法，浏览js文件<code>http://ued.campus.alibaba.com/quiz3/assets/js/step5.js</code>看到里面有<code>window.location</code>，于是直接在控制台输入如下代码，顺利通关：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">).</span><span class="nx">getAttributeNode</span><span class="p">(</span><span class="s1">&#39;data-p&#39;</span><span class="p">).</span><span class="nx">nodeValue</span><span class="p">;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">Base64</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photoshop趣味用法：玩转QQ找茬游戏]]></title>
    <link href="http://myunlessor.me/blog/2013/08/08/playing-zhao-cha-with-photoshop/"/>
    <updated>2013-08-08T22:52:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/08/08/playing-zhao-cha-with-photoshop</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>相信不少童鞋都玩过QQ找茬游戏，游戏规则很简单：在2～4人的房间里，随机几组图片，每组图片分2张，找出每组图片中5处不同的地方，在规定的时间内谁找的茬多算谁赢。玩这个游戏的第一感觉就是各种眼花缭乱，我接受自己没有火眼金睛这一事实，在每组图规定的时间能平均能找出3个茬算是幸运之至了（我运气一向很差，无论做什么）。这样下来战绩总是令人沮丧，胜率老是上不去。尽管这些都是虚的，但心里多有不甘，于是就想到了一种投机取巧的办法——让Photoshop来充当自己的眼睛，自己则当指挥^_^。</p>

<!-- more -->


<p>其实最初用这方法玩找茬游戏还是三年前的事情了，只是近两天不知怎的突然心血来潮，有心将它记录下来留作纪念已矣。</p>

<h2>正文</h2>

<p>原理呢其实挺简单，找茬嘛就是找两张图的差异，这可是Photoshop最擅长做的事情啦（这也是我想到用它的原因）。在游戏过程中用Photoshop找茬需要解决的关键问题是如何做到迅速地让茬茬尽收眼底，显然Photoshop的Action最能胜任此类事情了。</p>

<p>如果Problem是输入的话，那么输出则是Solution。</p>

<p>现在的Problem是:</p>

<p><img src="http://myunlessor.me/images/muo_img/zhaocha/problem.jpg"></p>

<p>而所谓的Solution的就是这样的(瞧，5茬尽收眼底！):</p>

<p><img src="http://myunlessor.me/images/muo_img/zhaocha/solution.jpg"></p>

<p>从Problem出发，可以看出原图大小即为游戏窗口大小(<code>800 x 600</code>)，Solution中的结果图大小为原图中单张茬茬图的大小(<code>381 x 286</code>)，我们要做的就是从原图到结果图中的转换。</p>

<p>首先需要建一张<code>381 x 286</code>大小的纯黑色图片（比如将其保存为x.png，如下图）作为结果图的容器然后在Photoshop中打开。</p>

<p><img src="http://myunlessor.me/images/muo_img/zhaocha/x.png"></p>

<p>Photoshop要想获取游戏窗口的截图，需要剪贴板作为中介，在<code>Windows</code>下按快捷键<code>Alt + Print Screen</code>将当前激活窗口（这里即为游戏窗口）拷贝至剪贴板，这时在Photoshop就可以按<code>Ctrl + V</code>或<code>F4</code>键将截图拷贝至图层。</p>

<p>第二步就是录制<code>Action</code>啦，一共分为8步，如下图:</p>

<p><img class="left" src="http://myunlessor.me/images/muo_img/zhaocha/zhaocha_action.png"></p>

<ul>
<li>粘贴：将通过<code>Alt + Print Screen</code>快捷键截取的游戏窗口粘贴到打开的<code>x.png</code>图片中作为图层</li>
<li>图层对位：移动图层的位置使左张茬图完全显示在画布中</li>
<li>复制图层：<code>Ctrl + J</code>复制图层到新的图层</li>
<li>全选：<code>Ctrl + A</code>选区选中整个画布</li>
<li>右对齐新复制的图层</li>
<li>取消选择：<code>Ctrl + D</code>取消选区</li>
<li>设置新复制图层的叠加模式为<code>Difference</code></li>
<li>移位新复制图层使右张茬图与左张茬图重叠得到Solution所示效果</li>
</ul>


<p style="clear:both"></p>


<p>动作准备好后，玩游戏就是机械运动了：</p>

<ul>
<li><code>Alt + Print Screen</code> 截取游戏窗口</li>
<li>切换到Photoshop执行脚本</li>
<li>点点点点点、然后换图继续执行第一步</li>
</ul>


<p>当然为了方便可以为动作设置快捷键。</p>

<p>我的做法，响应文件<code>Revert</code>事件：通过菜单命令<code>File | Scripts | Script Event Manager…</code>打开<code>脚本事件管理</code>弹出框，如下图，按以下方式进行设置：</p>

<p><img src="http://myunlessor.me/images/muo_img/zhaocha/script_events_manager_panel.png"></p>

<ul>
<li>勾选<code>Enable Events to Run Scripts/Actions</code></li>
<li><code>Photoshop Event</code>下拉框选择<code>Add an Event…</code>添加自定义事件</li>
<li>在打开的<code>Add an Event</code>弹出框中

<ul>
<li><code>Event Name</code>文本框填入<code>Revert</code></li>
<li><code>Descriptive Label</code>文本框填入<code>Rvrt</code></li>
<li>点击<code>OK</code>按钮完成添加</li>
</ul>
</li>
<li><code>Photoshop Event</code>下拉框选择刚刚添加的<code>Event</code>事件</li>
<li>选中单选框<code>Action</code>，然后选择之前刚录制的动作</li>
</ul>


<p>这时候<code>Alt + Print Screen</code> + <code>F12</code>的<code>“REPL”</code>完成，一切妥妥的、一切都变得机械！</p>

<h2>尾声</h2>

<p>当我利用这投机取巧的办法再次投入战斗时，真是屡试不爽、所向披靡。一相比较，游戏里的辅助道具实在弱爆了。我并不认为我这种玩法叫开挂，作弊一说也算勉强的了，晓之以理的讲法叫扬长避短、不亦乐乎。尽管缺失了些游戏的趣味性，但心理上得到的满足感却更强，这就够了。游戏说白了就是图个开心，每个人从中汲取开心的因子不一罢了。同时这也算是我用Photoshop比较有趣味的一种玩法吧！</p>

<p>P.S.：行文着实仓促!</p>

<h2>参考</h2>

<ol>
<li><a href="http://tinyurl.com/kwmfjj9">Photoshop Programming Guide</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[import this 与恺撒密码]]></title>
    <link href="http://myunlessor.me/blog/2013/06/04/import-this-and-caesar-cipher/"/>
    <updated>2013-06-04T20:56:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/06/04/import-this-and-caesar-cipher</id>
    <content type="html"><![CDATA[<p>学过<code>python</code>脚本语言的人都知道<code>python</code>中有一个叫<code>this</code>的模块（<code>module</code>）。该模块只做了件很简单的事，打印一段字符串，内容是有关python语言的一些禅语（也可以称它为<code>python</code>哲学）。</p>

<!-- more -->


<p>要显示它很简单，在<code>python</code>的<code>REPL</code>（<code>Read-Eval-Print Loop</code>）中键入<code>import this</code>，可以看到如下字符串:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The Zen of Python, by Tim Peters
</span><span class='line'>
</span><span class='line'>Beautiful is better than ugly.
</span><span class='line'>Explicit is better than implicit.
</span><span class='line'>Simple is better than complex.
</span><span class='line'>Complex is better than complicated.
</span><span class='line'>Flat is better than nested.
</span><span class='line'>Sparse is better than dense.
</span><span class='line'>Readability counts.
</span><span class='line'>Special cases aren't special enough to break the rules.
</span><span class='line'>Although practicality beats purity.
</span><span class='line'>Errors should never pass silently.
</span><span class='line'>Unless explicitly silenced.
</span><span class='line'>In the face of ambiguity, refuse the temptation to guess.
</span><span class='line'>There should be one-- and preferably only one --obvious way to do it.
</span><span class='line'>Although that way may not be obvious at first unless you're Dutch.
</span><span class='line'>Now is better than never.
</span><span class='line'>Although never is often better than *right* now.
</span><span class='line'>If the implementation is hard to explain, it's a bad idea.
</span><span class='line'>If the implementation is easy to explain, it may be a good idea.
</span><span class='line'>Namespaces are one honking great idea -- let's do more of those!</span></code></pre></td></tr></table></div></figure>


<p>我想，这个模块应该是<code>python</code>里最简单、也最特殊的模块罢！出于好奇，查看了下这个模块的源码，如下所示：</p>

<figure class='code'><figcaption><span>python哲学 (this.py)</span> <a href='http://myunlessor.me/downloads/code/this.py'>下载</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;Gur Mra bs Clguba, ol Gvz Crgref</span>
</span><span class='line'>
</span><span class='line'><span class="s">Ornhgvshy vf orggre guna htyl.</span>
</span><span class='line'><span class="s">Rkcyvpvg vf orggre guna vzcyvpvg.</span>
</span><span class='line'><span class="s">Fvzcyr vf orggre guna pbzcyrk.</span>
</span><span class='line'><span class="s">Pbzcyrk vf orggre guna pbzcyvpngrq.</span>
</span><span class='line'><span class="s">Syng vf orggre guna arfgrq.</span>
</span><span class='line'><span class="s">Fcnefr vf orggre guna qrafr.</span>
</span><span class='line'><span class="s">Ernqnovyvgl pbhagf.</span>
</span><span class='line'><span class="s">Fcrpvny pnfrf nera&#39;g fcrpvny rabhtu gb oernx gur ehyrf.</span>
</span><span class='line'><span class="s">Nygubhtu cenpgvpnyvgl orngf chevgl.</span>
</span><span class='line'><span class="s">Reebef fubhyq arire cnff fvyragyl.</span>
</span><span class='line'><span class="s">Hayrff rkcyvpvgyl fvyraprq.</span>
</span><span class='line'><span class="s">Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.</span>
</span><span class='line'><span class="s">Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.</span>
</span><span class='line'><span class="s">Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh&#39;er Qhgpu.</span>
</span><span class='line'><span class="s">Abj vf orggre guna arire.</span>
</span><span class='line'><span class="s">Nygubhtu arire vf bsgra orggre guna *evtug* abj.</span>
</span><span class='line'><span class="s">Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg&#39;f n onq vqrn.</span>
</span><span class='line'><span class="s">Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.</span>
</span><span class='line'><span class="s">Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg&#39;f qb zber bs gubfr!&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">65</span><span class="p">,</span> <span class="mi">97</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">26</span><span class="p">):</span>
</span><span class='line'>        <span class="n">d</span><span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">((</span><span class="n">i</span><span class="o">+</span><span class="mi">13</span><span class="p">)</span> <span class="o">%</span> <span class="mi">26</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>呈现在眼前的不是一段平淡无奇的print语句，而采用了恺撒密码算法（<code>Caesar cipher</code>）。以下内容摘自维基百科，详见<a href="http://goo.gl/n9Ldz">凯撒密码</a>:</p>

<blockquote><p>在密码学中,恺撒密码(或称恺撒加密、恺撒变换、变换加密)是一种最简单且最广为人知的加密技术。它是一种替换加密的技 术,明文中的所有字母都在字母表上向后(或向前)按照一个固定数目进行偏移后被替换成密文。例如,当偏移量是3的时候,所有的字母A将被替换成 D,B变成E,以此类推。这个加密方法是以恺撒的名字命名的,当年恺撒曾用此方法与其将军们进行联系。<br>
恺撒密码通常被作为其他更复杂的加密方法中的一个步骤,例如维吉尼尔密码。恺撒密码还在现代的 ROT13系统中被应用。但是 和所有的利用字母表进行替换的加密技术一样,恺撒密码非常容易被破解,而且在实际应用中也无法保证通信安全。</p></blockquote>

<p>可以看到，恺撒密码的原理很简单，对每个字母按照同一偏移量映射为别的字母，这样就完成了简单的加密。</p>

<p>看到<code>this</code>模块，我最大的感悟就是<code>python</code>语言优雅简洁的表达能力，我试过用<code>JavaScript</code>语言表达恺撒密码，实在为它感到汗颜。大概是因为<code>JavaScript</code>表达的废话太多，才催生了<code>CoffeeScript</code>这种比<code>JavaScript</code>更具表达力的语言吧。当然这得力于<code>CoffeeScript</code>大量借鉴<code>python、ruby</code>这种表达能力强的语言的语法才使然哩！</p>

<p><code>this.py</code>中用到的取余运算符<code>%</code>有一个很值得学习的技巧，比如我们想让一个变量在某个上限和下限范围内递增或递减，我们一般会写这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">lower</span>   <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">upper</span>   <span class="o">=</span> <span class="mi">17</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">current</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 单位递增</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">&lt;</span> <span class="nx">upper</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">current</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">current</span> <span class="o">=</span> <span class="nx">lower</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">current</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 单位递减</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">prev</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">&gt;</span> <span class="nx">lower</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">current</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">current</span> <span class="o">=</span> <span class="nx">upper</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">current</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// current = 15</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// current = 16</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// current = 17</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// current = 10</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用取余运算符<code>%</code>，我们可以将如上代码简化为如下（注意此时没有了<code>if</code>条件语句）:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">lower</span>   <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">upper</span>   <span class="o">=</span> <span class="mi">17</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dist</span>    <span class="o">=</span> <span class="nx">upper</span> <span class="o">-</span> <span class="nx">lower</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">current</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">lower</span> <span class="o">+</span> <span class="p">(</span><span class="nx">current</span> <span class="o">-</span> <span class="nx">lower</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">dist</span><span class="p">)</span> <span class="o">%</span> <span class="nx">dist</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">prev</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">lower</span> <span class="o">+</span> <span class="p">(</span><span class="nx">current</span> <span class="o">-</span> <span class="nx">lower</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">dist</span><span class="p">)</span> <span class="o">%</span> <span class="nx">dist</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 13</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 12</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 11</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 10</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 17</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript异步代码排程策略]]></title>
    <link href="http://myunlessor.me/blog/2013/06/04/strategy-for-scheduling-javascript-asynchronous-code/"/>
    <updated>2013-06-04T19:06:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/06/04/strategy-for-scheduling-javascript-asynchronous-code</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>写JavaScript脚本代码经常需要用到计时器(<code>window.setTimeout</code>)功能，先看如下代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 先解析，但延时1000ms</span>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 后解析，但延时100ms</span>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>将该代码片段拷贝进Chrome浏览器的控制台(<code>Console</code>)中执行，可以发现在控制台中是先打印<code>bar</code>字符串，后打印<code>foo</code>字符串，也即是先执行了<code>bar</code>函数，后执行了<code>foo</code>函数。假如我们要让代码执行完<code>foo</code>函数后再执行<code>bar</code>函数，不难想到如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在控制台中测试发现这确实达到了我们的预期结果，但这种嵌套结构实在不优雅。当嵌套层级多时，代码可读性会变得相当差，试看如下代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">muo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">bar</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yell</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;boo&#39;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bear</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">muo</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">muo</span><span class="p">.</span><span class="nx">bar</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yell</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">bear</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">17</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>相信没多少人喜欢读这种缺乏结构的代码。那么，有什么办法可以让上述代码变得优雅起来呢？这就涉及到异步代码排程的问题。</p>

<h2>策略</h2>

<p>在上述第一段代码中，<code>setTimeout</code>方法设定的延时在一定程度上可以看成是代码执行顺序的优先级，它打乱了先来后到的规则，延时短的比延时长的优先级高，在同一作用域内计时器代码执行的顺序与解析的顺序无关，这就产生了异步问题，可以类比为现实中的插队行为。我们这里要解决的就是这种异步排程问题，我们要确保先来后到的规则，先执行先被解析的代码，后执行后被解析的代码。</p>

<p>我们知道，在银行窗口办理业务时，我们得先取票排队，先取票的先为之服务，后取票的后服务。当然，这里只考虑只有一个窗口的情况。</p>

<p>类似的，要解决异步代码排程问题，我们可以把要执行的代码当成任务约束在队列中，先入队的先执行，后入队的后执行（即<code>FIFO</code>），且保证同一时间最多允许一个任务执行。基于以上分析，我们可以设计如下策略：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">schedule</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">paused</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// 标记状态</span>
</span><span class='line'>      <span class="nx">queue</span>  <span class="o">=</span> <span class="p">[];</span>     <span class="c1">// 队列</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 入队</span>
</span><span class='line'>  <span class="nx">self</span><span class="p">.</span><span class="nx">join</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">params</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">context</span> <span class="o">||</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">_</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="nx">params</span><span class="p">.</span><span class="nx">delay</span> <span class="o">||</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">exec</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">self</span><span class="p">.</span><span class="nx">pause</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">paused</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>  <span class="c1">// 忙碌</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ready and call next</span>
</span><span class='line'>  <span class="nx">self</span><span class="p">.</span><span class="nx">resume</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">paused</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// 空闲</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">exec</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">exec</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">paused</span> <span class="o">&amp;&amp;</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()(</span><span class="nx">self</span><span class="p">);</span>  <span class="c1">// 出队</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">paused</span><span class="p">)</span> <span class="nx">self</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}(</span><span class="nx">schedule</span> <span class="o">||</span> <span class="p">{}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了以上设计的排程规则，我们可以将如上多嵌套代码优雅地表达为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">muo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">bar</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yell</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;boo&#39;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bear</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">schedule</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">delay</span><span class="o">:</span> <span class="mi">1000</span> <span class="c1">// 延时</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">muo</span><span class="p">.</span><span class="nx">bar</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">delay</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">context</span><span class="o">:</span> <span class="nx">muo</span> <span class="c1">// this解析上下文</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">muo</span><span class="p">.</span><span class="nx">bar</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">delay</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">context</span><span class="o">:</span> <span class="nx">yell</span> <span class="c1">// this解析上下文</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">bear</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">delay</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">args</span><span class="o">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">17</span><span class="p">]</span> <span class="c1">// 为bear函数提供参数</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://goo.gl/1A8ew">Secrets of the JavaScript Ninja</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Photoshop: 将整图一分为九]]></title>
    <link href="http://myunlessor.me/blog/2013/05/20/divide-slice-by-using-photoshop-scripts/"/>
    <updated>2013-05-20T20:31:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/05/20/divide-slice-by-using-photoshop-scripts</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>前些天一同事在做拼图游戏。设计师提供了很多素材图片给他，这些图片都是整张整张的，他需要将这些图片切图成九宫格(3 x 3)、十六宫格(4 x 4)、二十五宫格(5 x 5)等。如果单张单张地进行计算然后裁切肯定不现实，那样实在效率低下，然后他问我有没快捷方法可以帮助他。</p>

<!-- more -->


<h2>思路一(动作)</h2>

<p>我们切图一般都在<code>photoshop</code>中完成。以往我遇到这种大量的重复性工作时，我绝对不会坐以待毙，我会想方设法，不达目的绝不罢休。通常面对这种问题时，我首先想到的就是生成一个<code>action</code>(动作)，然后利用它批量完成。</p>

<p>该<code>action</code>(动作)的大致思路是将各宫格图片分散到不同的图层中，然后便可以通过菜单命令<code>File | Scripts | Export Layers to Files…</code>将图层一一导出为文件，具体如下：</p>

<ul>
<li>计算一张图片的三等分宽高，生成并保存选区</li>
<li>将选区定位在图片左上角，然后通过菜单命令<code>Layer | New | Layer via Cut(Copy)</code>将该区域隔离到新的图层</li>
<li>重新载入选区，移位选区至新的位置，执行第二步同样命令</li>
<li>重复执行第三步，直到图片九等分分散在不同图层</li>
</ul>


<p>但是，生成这样的动作不仅麻烦，而且也不甚高效，原因如下：</p>

<ul>
<li>需要为九宫格(3 x 3)、十六宫格(4 x 4)、二十五宫格(5 x 5)不同规格生成不同的动作</li>
<li>其他原因忘了~^~…</li>
</ul>


<p>于是这种思路只成为了一种念想，一闪即过。</p>

<h2>思路二(切片工具)</h2>

<p>然后有考虑利用<code>Divide Slice…</code>(划分切图)及<code>Slices from Guides</code>(辅助线自动生成切片)功能——一种传统古老的切图方式。然后通过菜单命令<code>File | Save for Web…</code>将各切片导出为图片。这种方式可行是可行，但事实是提供的图片不是很理想，宫格中有1个像素的透明<code>gutter</code>(间隙)。如果不考虑<code>gutter</code>(间隙)的话，九宫格切图只需四条均分辅助线，否则需要八条，这样就会导出很多垃圾图片——1像素宽或(和)1像素高的图。这样效果不是很理想(自许准理想主义者)，于是这种方法也不了了之了。</p>

<blockquote><p>事实是，这种方法确实可行，考虑四条均分辅助线生成切片，最后可以生成个<code>action</code>(动作)对这些图片做最后的<code>sanitization</code>(“消毒处理”)，傻眼了当时…</p></blockquote>

<h2>思路三(脚本)</h2>

<p>最后，不得不实施<code>Last Resort</code>(破釜沉舟之计)。我想到了脚本语言(事实是，原来我调侃同事用写段<code>Java</code>代码生成图片…^&ndash;^)，<code>photoshop</code>自带的脚本功能(支持<code>JavaScript</code>、<code>VBScript</code>、<code>AppleScript</code>三种脚本语言)做这类事可谓游刃有余，一段简短的代码就可以干净利落地解决它，代码如下：</p>

<figure class='code'><figcaption><span>划分切图脚本 (divide_slice.js)</span> <a href='http://myunlessor.me/downloads/code/divide_slice.js'>下载</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">#</span><span class="nx">target</span> <span class="nx">photoshop</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">preferences</span><span class="p">.</span><span class="nx">rulerUnits</span> <span class="o">!==</span> <span class="nx">Units</span><span class="p">.</span><span class="nx">PIXELS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 采用像素单位进行计算</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">preferences</span><span class="p">.</span><span class="nx">rulerUnits</span> <span class="o">=</span> <span class="nx">Units</span><span class="p">.</span><span class="nx">PIXELS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 当前文档引用</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docRef</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">activeDocument</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 文档宽度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docWidth</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 文档高度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docHeight</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 细分次数(默认 3 x 3，即九宫格切分)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">divides</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 宫格间隙(默认无间隙)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">gutter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 每宫格宽度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">slotWidth</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">docWidth</span> <span class="o">/</span> <span class="nx">divides</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 每宫格高度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">slotHeight</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">docHeight</span> <span class="o">/</span> <span class="nx">divides</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 保存当前图层(即整图)引用</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">layerRef</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">activeLayer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 遍历行</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">docWidth</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">-=</span> <span class="nx">slotHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 遍历列</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">docHeight</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">-=</span> <span class="nx">slotWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 重置当前图片为原图层(即整图)</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">activeLayer</span> <span class="o">=</span> <span class="nx">layerRef</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 从右往左、从下往上设置选区</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">select</span><span class="p">([</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">slotWidth</span><span class="p">,</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">slotHeight</span><span class="p">],</span> <span class="c1">// 左</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">slotHeight</span><span class="p">],</span>  <span class="c1">// 上</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">],</span> <span class="c1">// 右</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">slotWidth</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="c1">// 下</span>
</span><span class='line'>    <span class="p">],</span> <span class="nx">SelectionType</span><span class="p">.</span><span class="nx">REPLACE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// layer via copy ^-^</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">copy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">artLayers</span><span class="p">.</span><span class="nx">add</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">paste</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 水平轴向间隙偏移</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">-=</span> <span class="nx">gutter</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 垂直轴向间隙偏移</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">-=</span> <span class="nx">gutter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 删除原图层(即整图)</span>
</span><span class='line'><span class="nx">layerRef</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>用法很简单，只需下载这段脚本到本地，打开需要切分的图片，然后执行菜单命令<code>File | Scripts | Browse…</code>，在打开的弹出框中找到该脚本，双击执行即可。
r
如果要处理的图片很多的话，配合动作使用即可实现批处理。</p>

<h2>参考书目</h2>

<ol>
<li><a href="http://goo.gl/IFQav">Photoshop CS6 Scripting Guide</a></li>
<li><a href="http://goo.gl/ukIhf">Photoshop CS6 JavaScript Ref</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文件批处理那些事儿]]></title>
    <link href="http://myunlessor.me/blog/2013/05/19/file-batch-stuff/"/>
    <updated>2013-05-19T11:14:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/05/19/file-batch-stuff</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>在日常工作中我们无疑会碰到形形色色的针对文件操作的重复性工作，比如说批量复制、批量替换、批量重命名、批量删除文件或文件夹等的机械活。机械意味着我们不应该执拗于手工地去完成它们，我们需要<strong>尽力</strong>地从中摆脱出来。</p>

<p>之前做过批量重命名的活，在那之前经常用<code>Adobe Bridge</code>用于文件管理，知道其中就有个叫<code>Batch Rename</code>的工具。我很推荐使用它，但它有个缺点，只能针对文件进行重命名，对文件夹无效。但瑕不掩瑜，它真的很棒，能出色地完成我指定规则的重命名工作。</p>

<p>之后为了应对文件批操作，我写了个<code>文件批处理小工具</code>。我对这玩意的评价是，它只能处理很窄范围的特点需求，稍微来点需求变更，它便束手无策、黯然失色。顺便再吐嘈一句，我用了把牛刀干了件杀鸡的事。</p>

<!--more-->


<p>直到最近做了些很坑爹的事，我们一直给设计部的设计变更擦屁股这话就不提了。橙视圈十二生肖和十二星座两个应用被改版得几尽与原先版本脱节，数据已不由后台接口提供，得自己手活制造一大批json序列文件用于界面查询，算下来有接近3k个文件。开始重复地做复制、重命名文件、填充数据，依此反复，一下午时间弄完不到400个文件。</p>

<p>这样下去可不是办法，久闻shell命令名不虚传，稍试了下水，便惊叹shell的无底深渊，一些简单的命令便帮我完成了一些不简单的事。</p>

<h2>正题</h2>

<p>假如我有一个名叫<code>template.json</code>的json模板数据文件，文件内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;result&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dataArea&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我要生成一堆类似<code>a_0.json、a_1.json...d_4.json</code>这样的序列文件，同时文件都包含<code>template.json</code>的内容，手活的话我会先复制一堆<code>template.json</code>文件，然后一个个重命名得到期望的序列文件，这真的很累。可是若借助shell命令的魔力，简直不费吹灰之力。</p>

<p>我们都知道<code>cp</code>是拷贝文件命令，例如在终端下执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; cp template.json a_0.json
</span></code></pre></td></tr></table></div></figure>


<p>那么在<code>template.json</code>文件的所在目录下将得到一个名为<code>a_0.json</code>的文件，内容与<code>template.json</code>一模一样。</p>

<p>那么如何批量生成一堆这样的序列文件呢？这意味着我们要重复执行<code>cp</code>命令，但每次执行时上述例子中指定的目标文件（<code>a_0.json</code>）要相应改变，这跟每次传入不同参数调用相同函数很有些类似。<code>xargs</code>命令就是帮助你做这件事的，以下是对xargs命令的简短介绍：</p>

<blockquote><p><code>xargs</code>命令被用来构造参数列表并调用其他命令(工具)，它从标准输入流（<code>standard input</code>）或管道(<code>pipes</code>)中读取以空格或换行分隔的东西，这些读取的东西可以被当作其所调用的命令的参数传入，执行该命令一次或多次。</p></blockquote>

<p>可以看出，<code>xargs</code>命令其实不<strong>干实事</strong>，它旨在督导和帮助其他一些<strong>干实事</strong>的命令（比如<code>cp、mdkir、mv、rm</code>等）重复做事，从而让那些<strong>干实事</strong>的命令尽显其能，这正是<code>xargs</code>本身的价值所在。那么如何使用它呢？请看以下这个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; <span class="nb">echo </span>a_1.json a_2.json | xargs -n 1 -I <span class="o">{}</span> cp template.json <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行以上命令后，可以看到<code>template.json</code>文件的所在目录下多了两个名字分别为<code>a_1.json、a_2.json</code>的文件，并且内容也和<code>template.json</code>一模一样。</p>

<p>对以上命令的一些解释：</p>

<ul>
<li><code>echo a_1.json a_2.json</code>表示<code>echo</code>两个以空格分隔的字符串到输出流</li>
<li><code>|</code>表示管道，可以理解为将前一命令的输出流重定向到下一命令的输入流中，这有些类似于将函数调用得到的值作为参数传入到别一函数中</li>
<li><code>xargs</code>中重复调用<code>cp</code>命令，选项<code>-n 1</code>表过每次调用时只使用一个参数，并且<code>-I {}</code>像声明参数名一样，<code>cp template.json {}</code>中的<code>{}</code>正是使用该参数的位置</li>
</ul>


<p>其结果是<code>cp</code>命令被执行了两次，第一次将<code>a_1.json</code>替换<code>{}</code>被执行，第二次将<code>a_2.json</code>替换<code>{}</code>被执行，于是实现了两次复制操作。我说了这和函数调用没什么两样。</p>

<p>还是回到之前的问题，怎么批量生成序列文件呢？我们现在找到了批量执行<code>cp</code>命令的方法，现在的问题简化到如何生成序列字符串的问题。很简单，看如下例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; <span class="nb">echo</span> <span class="o">{</span>1..10<span class="o">}</span>
</span><span class='line'>1 2 3 4 5 6 7 8 9 10
</span><span class='line'>
</span><span class='line'>&gt; <span class="nb">echo</span> <span class="o">{</span>a..g<span class="o">}</span>
</span><span class='line'>a b c d e f g
</span><span class='line'>
</span><span class='line'>&gt; <span class="nb">echo</span> <span class="o">{</span>a..d<span class="o">}</span>_<span class="o">{</span>1..4<span class="o">}</span>.json
</span><span class='line'>a_1.json a_2.json a_3.json a_4.json
</span><span class='line'>b_1.json b_2.json b_3.json b_4.json
</span><span class='line'>c_1.json c_2.json c_3.json c_4.json
</span><span class='line'>d_1.json d_2.json d_3.json d_4.json
</span></code></pre></td></tr></table></div></figure>


<p>看到规律了吧？以下是在<code>template.json</code>文件所在目录的子目录<code>seqs</code>下生成序列文件的命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; mkdir -p seqs
</span><span class='line'>&gt; <span class="nb">echo</span> <span class="o">{</span>a..d<span class="o">}</span>_<span class="o">{</span>1..4<span class="o">}</span>.json | xargs -n 1 -I <span class="o">{}</span> cp template.json seqs/<span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>一些小实践</h2>

<p>下面是我实践过的一些例子，大家可自行实践，方法跟上面所讲的大同小异。</p>

<h3>1.应用打包批处理</h3>

<p>假如终端当前工作子目录为<code>works</code>，在该目录下有如下结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>works
</span><span class='line'>  |__ source_files      <span class="o">[</span>应用源文件放置目录<span class="o">]</span>
</span><span class='line'>  |   |__ riddle           <span class="o">[</span>我爱猜谜语<span class="o">]</span>
</span><span class='line'>  |   |__ brain_twists     <span class="o">[</span>脑筋急转弯<span class="o">]</span>
</span><span class='line'>  |   |__ train_tickets    <span class="o">[</span>火车票查询<span class="o">]</span>
</span><span class='line'>  |
</span><span class='line'>  |__ package_files     <span class="o">[</span>应用打包放置目录<span class="o">]</span>
</span><span class='line'>  |
</span><span class='line'>  |__ package_template  <span class="o">[</span>打包模板结构文件目录<span class="o">]</span>
</span><span class='line'>      |__ draw
</span><span class='line'>      |   |__ icon
</span><span class='line'>      |   |__ poster
</span><span class='line'>      |__ assets
</span><span class='line'>          |__brolife    <span class="o">[</span>应用放置根目录<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们要将<code>source_files</code>目录下的所有应用打包放置在<code>package_files</code>目录下，可执行如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 在应用打包目录下建立相应的应用文件夹</span>
</span><span class='line'>&gt; ls source_files | xargs -n 1 -I <span class="o">{}</span> mkdir -p package_files/<span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 拷贝文件夹需要带上`-a`或`-pPR`选项表示递归拷贝</span>
</span><span class='line'>&gt; ls source_files | xargs -n 1 -I <span class="o">{}</span> cp -a package_temptate/* package_files/<span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 将应用拷贝至相应的`brolife`文件夹中</span>
</span><span class='line'>&gt; ls source_files | xargs -n 1 -I <span class="o">{}</span> cp -a source_files/<span class="o">{}</span> package_files/<span class="o">{}</span>/assets/brolife
</span></code></pre></td></tr></table></div></figure>


<h3>2.应用解包</h3>

<p>应用解包即是将应用从各用的<code>brolife</code>文件夹中拷贝出至统一的路径，原理跟打包都差不多，时间关系不允罗列相应命令。</p>

<h3>3.过滤应用中的<code>.htm</code>文件</h3>

<p>只拷贝出应用中的<code>.htm</code>文件，其他文件全部忽略，这项操作需要用到find命令，时间关系不允过多解释。下面是一个使用的小例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 查找当前目录及其子目录下所有以`.htm`后缀结尾的所有文件</span>
</span><span class='line'>&gt; find . -name <span class="s2">&quot;*.htm&quot;</span> -type f
</span><span class='line'>
</span><span class='line'><span class="c"># 查找`~myunlessor/Desktop/riddle`目录及其子目录下所有以`.jpg`或`.png`后缀结尾的文件</span>
</span><span class='line'>&gt; find ~myunlessor/Desktop/riddle <span class="se">\(</span> -name <span class="s2">&quot;*.jpg&quot;</span> -or -name <span class="s2">&quot;*.png&quot;</span> <span class="se">\)</span> -type f
</span></code></pre></td></tr></table></div></figure>


<h2>小结</h2>

<p>从以上例子可以看到有了<code>xargs</code>命令及管道后，这些朴素的<strong>干实事</strong>的命令像脱胎换骨了一样，相当强大。千里之行，始于足下！</p>

<h2>附录</h2>

<p>以上所讲的文件批处理解决方案都依赖于*NIX环境的shell，但我们工作在windows平台上<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，说这些有什么意义呢？没关系，我们有<a href="http://www.cygwin.com/">Cygwin</a>，它在windows平台下极力模拟Linux环境，让我们可以在windows下使用Linux的一些实用工具。它的标语是：</p>

<blockquote><p>Get that Linux feeling &ndash; on Windows!</p></blockquote>

<p>猛击<a href="http://cygwin.com/setup.exe">这里</a>下载安装使用起来吧！</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Windows平台下有PowerShell，没使用过，但我想它也应该很擅长做这类事吧！<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
