<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Silent Reverie]]></title>
  <link href="http://myunlessor.me/atom.xml" rel="self"/>
  <link href="http://myunlessor.me/"/>
  <updated>2015-11-20T00:44:26+08:00</updated>
  <id>http://myunlessor.me/</id>
  <author>
    <name><![CDATA[俞乐]]></name>
    <email><![CDATA[myunlessor@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA["eval" is not evil]]></title>
    <link href="http://myunlessor.me/blog/2015/11/19/eval-is-not-evil/"/>
    <updated>2015-11-19T21:56:00+08:00</updated>
    <id>http://myunlessor.me/blog/2015/11/19/eval-is-not-evil</id>
    <content type="html"><![CDATA[<p>一般我们代码几乎不会使用到<code>eval</code>, 但凡需要使用到<code>eval</code>的地方，都会代而<code>使用构造器Function生成函数实例</code>的方式，因为<code>eval is evil</code>。<code>eval</code>可以在全局作域下执行代码，也可以在局部作用域（间接调用<code>eval</code>）下执行代码。而<code>使用构造器Function生成函数实例</code>的方式，可以确保我们的代码是在全局作用域下执行。</p>

<!-- more -->

<p>依赖<code>Function</code>构造函数，我们可以实现自己的<code>“eval”</code>。这里我将实现的<code>“eval”</code>命名为<code>$eval</code>，以示区分。当然，<code>$eval</code>实现的功能和原生<code>eval</code>功能不尽相同。同时，这里还额外将<code>$eval</code>方法定义到<code>Object.prototype</code>中以适用不同场合。</p>

<p>下面是<code>$eval</code>和<code>Object.prototype.$eval</code>的代码实现。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Execute javascript code within specific scope</span>
</span><span class="line"><span class="cm">   * @param  {Function|String} fn Scoped function or expression</span>
</span><span class="line"><span class="cm">   * @param  {Object} imports     An object which defines required local variables</span>
</span><span class="line"><span class="cm">   * @return {Function}           Function that can be invoked to run code in specific scope</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">scopedRunner</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">imports</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">rfunc</span> <span class="o">=</span> <span class="sr">/^function\s+(?:[^(]*)\(([^)]*)\)\s*{([^]*)}$/</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">found</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">fn</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="nx">rfunc</span><span class="p">)</span> <span class="o">||</span> <span class="p">[,,</span><span class="s1">&#39;return (&#39;</span> <span class="o">+</span> <span class="nx">fn</span> <span class="o">+</span> <span class="s1">&#39;);&#39;</span><span class="p">];</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">stmt</span> <span class="o">=</span> <span class="nx">found</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">imports</span> <span class="o">||</span> <span class="p">{}).</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ret</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">ret</span> <span class="o">+</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">?</span> <span class="s1">&#39;, &#39;</span> <span class="o">:</span> <span class="s1">&#39;var &#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39; = $scope[&quot;&#39;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39;&quot;]&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;; return function (&#39;</span> <span class="o">+</span> <span class="nx">args</span> <span class="o">+</span> <span class="s1">&#39;) {&#39;</span> <span class="o">+</span> <span class="nx">stmt</span> <span class="o">+</span> <span class="s1">&#39;};&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="nx">body</span><span class="p">).</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">imports</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// define `global.$eval`</span>
</span><span class="line">  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">global</span><span class="p">,</span> <span class="s1">&#39;$eval&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">scopedRunner</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// define `Object.prototype.$eval`</span>
</span><span class="line">  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;$eval&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expr</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">global</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="nx">expr</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">}(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以下是一些关于<code>$eval</code>和<code>Object.prototype.$eval</code>的使用例子。</p>

<ul>
  <li>e.g 1</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// define some global variables</span>
</span><span class="line"><span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line"><span class="nx">y</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// define some local variables</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">$eval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ReferenceError: a is not defined</span>
</span><span class="line">    <span class="c1">// console.log(a + b);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// ReferenceError: a is not defined</span>
</span><span class="line">  <span class="c1">// $eval(&#39;a + b&#39;);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;y / x&#39;</span><span class="p">);</span> <span class="c1">//=&gt; 3</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>e.g 2</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">7</span> <span class="p">};</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">result</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">result</span> <span class="o">=</span> <span class="nx">$eval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">  <span class="p">},</span> <span class="nx">obj</span><span class="p">);</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">//=&gt; 42</span>
</span><span class="line">
</span><span class="line">  <span class="nx">result</span> <span class="o">=</span> <span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;a * b&#39;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">//=&gt; 42</span>
</span><span class="line">
</span><span class="line">  <span class="nx">result</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;a * b&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">//=&gt; 42</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>e.g 3</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">raws</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;42&#39;</span><span class="p">,</span> <span class="s1">&#39;&quot;42&quot;&#39;</span><span class="p">,</span> <span class="s1">&#39;a * b&#39;</span><span class="p">,</span> <span class="s1">&#39;[a, b]&#39;</span><span class="p">,</span> <span class="s1">&#39;{ x: a, y: b }&#39;</span><span class="p">];</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="nx">raws</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nb">eval</span><span class="p">.</span><span class="nx">$eval</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">7</span> <span class="p">}));</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//=&gt; [42, &#39;42&#39;, 42, [6, 7], { x: 6, y: 7 }]</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">out</span><span class="p">);</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>e.g 4</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line"><span class="nx">y</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class="line">    <span class="nx">y</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class="line">    <span class="nx">times</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">sum</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span><span class="line">    <span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">obj</span><span class="p">,</span>                        <span class="c1">//=&gt; true</span>
</span><span class="line">    <span class="nx">$eval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">$scope</span><span class="p">;</span> <span class="p">},</span> <span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="nx">obj</span><span class="p">,</span>  <span class="c1">//=&gt; true</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;$scope&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="nx">obj</span><span class="p">,</span>                         <span class="c1">//=&gt; true</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">$scope</span><span class="p">;</span> <span class="p">})</span> <span class="o">===</span> <span class="nx">obj</span>    <span class="c1">//=&gt; true</span>
</span><span class="line">  <span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;times()&#39;</span><span class="p">),</span>             <span class="c1">//=&gt; 300</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;$scope.times()&#39;</span><span class="p">),</span>      <span class="c1">//=&gt; 42</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;times.call($scope)&#39;</span><span class="p">)</span>   <span class="c1">//=&gt; 42</span>
</span><span class="line">  <span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">times</span><span class="p">());</span>             <span class="c1">//=&gt; 300</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">times</span><span class="p">());</span>      <span class="c1">//=&gt; 42</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">times</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">$scope</span><span class="p">));</span>  <span class="c1">//=&gt; 42</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;sum(x,y)&#39;</span><span class="p">),</span>                          <span class="c1">//=&gt; 13</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span> <span class="p">}),</span>   <span class="c1">//=&gt; 13</span>
</span><span class="line">    <span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;sum(x,y)&#39;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">),</span>                         <span class="c1">//=&gt; 13</span>
</span><span class="line">    <span class="nx">$eval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span> <span class="p">},</span> <span class="nx">obj</span><span class="p">)</span>   <span class="c1">//=&gt; 13</span>
</span><span class="line">  <span class="p">);</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，<code>$eval is not eval, $eval is not evil</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scoped Reality]]></title>
    <link href="http://myunlessor.me/blog/2015/11/18/scoped-reality/"/>
    <updated>2015-11-18T21:32:00+08:00</updated>
    <id>http://myunlessor.me/blog/2015/11/18/scoped-reality</id>
    <content type="html"><![CDATA[<blockquote>
  <p>有人叫她“熟食铺子”，因为只有熟食店会把那许多颜色暖热的肉公开陈列；
又有人叫她“真理”，因为据说“真理是赤裸裸的”；
而鲍小姐并未一丝不挂，所以他们修正为“局部的真理”。
　　　　　　　　　　　　　　　　　　　　　　　　　《围城》 — 钱钟书</p>
</blockquote>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Execute javascript code within specific scope</span>
</span><span class="line"><span class="cm"> * @param  {Function|String} fn scoped function or expression</span>
</span><span class="line"><span class="cm"> * @param  {Object} imports     An object defines required local variables</span>
</span><span class="line"><span class="cm"> * @return {Function}           A function that can be invoked to run code in specific scope</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">scopedRunner</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">imports</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">rfunc</span> <span class="o">=</span> <span class="sr">/^function\s+(?:[^(]*)\(([^)]*)\)\s*{([^]*)}$/</span><span class="p">;</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">found</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">fn</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="nx">rfunc</span><span class="p">)</span> <span class="o">||</span> <span class="p">[,,</span><span class="s1">&#39;return &#39;</span> <span class="o">+</span> <span class="nx">fn</span><span class="p">];</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">stmt</span> <span class="o">=</span> <span class="nx">found</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">imports</span> <span class="o">||</span> <span class="p">{}).</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ret</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">ret</span> <span class="o">+</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">?</span> <span class="s1">&#39;, &#39;</span> <span class="o">:</span> <span class="s1">&#39;var &#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39; = __locals__[&quot;&#39;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39;&quot;]&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="p">},</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;; return function (&#39;</span> <span class="o">+</span> <span class="nx">args</span> <span class="o">+</span> <span class="s1">&#39;) {&#39;</span> <span class="o">+</span> <span class="nx">stmt</span> <span class="o">+</span> <span class="s1">&#39;};&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;__locals__&#39;</span><span class="p">,</span> <span class="nx">body</span><span class="p">).</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">imports</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The following are some examples.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// e.g 1</span>
</span><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">   <span class="nx">scopedRunner</span><span class="p">(</span>
</span><span class="line">     <span class="kd">function</span> <span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">       <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">m</span> <span class="o">+</span> <span class="nx">n</span><span class="p">);</span>
</span><span class="line">       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The meaning of life is:&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>  <span class="c1">//=&gt; 42</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line">   <span class="p">).</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// e.g 2</span>
</span><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">scopedRunner</span><span class="p">(</span>
</span><span class="line">    <span class="s1">&#39;times(a, b)&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">times</span><span class="o">:</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">y</span> <span class="p">}</span>
</span><span class="line">  <span class="p">)();</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The meaning of life is:&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>      <span class="c1">//=&gt; 42</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// e.g 3</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__eval</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">expr</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">scopedRunner</span><span class="p">(</span><span class="nx">expr</span><span class="p">,</span> <span class="k">this</span><span class="p">)();</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">times</span><span class="o">:</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">y</span> <span class="p">};</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__eval</span><span class="p">(</span><span class="s1">&#39;times(a, b)&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The meaning of life is:&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>      <span class="c1">//=&gt; 42</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// e.g 4</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">take</span> <span class="o">=</span> <span class="p">(</span><span class="nx">scope</span> <span class="o">=&gt;</span> <span class="nx">scopedRunner</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nb">eval</span><span class="p">,</span> <span class="nx">scope</span><span class="p">.</span><span class="kd">with</span><span class="p">)());</span>
</span><span class="line">
</span><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">times</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// take result out from evaluated value within specific scope</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">take</span><span class="p">({</span>
</span><span class="line">    <span class="kd">with</span><span class="o">:</span> <span class="p">{</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">times</span> <span class="p">},</span>
</span><span class="line">    <span class="nb">eval</span><span class="o">:</span> <span class="s1">&#39;times(a, b)&#39;</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The meaning of life is:&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>      <span class="c1">//=&gt; 42</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// e.g 5</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">invoke</span> <span class="o">=</span> <span class="nx">scopedRunner</span><span class="p">((</span><span class="nx">fn</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">args</span><span class="p">))();</span>
</span><span class="line">
</span><span class="line"><span class="k">void</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">invoke</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The meaning of life is:&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>      <span class="c1">//=&gt; 13</span>
</span><span class="line"><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jQuery实现简单的自定义事件功能]]></title>
    <link href="http://myunlessor.me/blog/2014/08/19/simple-custom-events-using-jquery/"/>
    <updated>2014-08-19T22:06:00+08:00</updated>
    <id>http://myunlessor.me/blog/2014/08/19/simple-custom-events-using-jquery</id>
    <content type="html"><![CDATA[<p>众所周知，页面元素的交互离不开javascript的事件模型，DOM元素对事件有原生的支持。而事件并不是javascript语言本身的固有功能，它是一种模式，通常被叫做<code>发布/订阅(publish/subscribe)</code>模式。这种模式可以很好地令代码解耦，寥寥数十行的javascript原生代码就可以实现简单的事件模型，但要实现复杂又易用的事件模型并不是件简单的事。而如果项目使用jQuery类库的话，我们可以在它实现的事件模型基础上做一定的封装，实现简单的自定义事件功能。</p>

<!-- more -->

<p>既然jQuery实现有事件模型，为什么我们还要另外再整一套呢？jQuery实现的事件方法(像<code>on、off、trigger</code>等)都是绑定在jQuery包装集对象上的，如果我们想为普通的字面对象或通过构造函数实例化的对象添加事件，显然jQuery提供的那套事件模型不能直接拿来用。如果我们细微地思考下就知道，对jQuery的事件模型稍加包装可以直接应用到普通对象上——jQuery包装集可以包装任意对象，包括字面对象及实例化对象等。</p>

<p>以下是使用jQuery实现的<code>发布/订阅(publish/subscribe)</code>模式。</p>

<h2 id="section">全局静态事件实现</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="o">!</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">$</span><span class="p">({});</span>
</span><span class="line">
</span><span class="line">  <span class="nx">$</span><span class="p">.</span><span class="nx">subscribe</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">o</span><span class="p">.</span><span class="nx">on</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="nx">$</span><span class="p">.</span><span class="nx">unsubscribe</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">o</span><span class="p">.</span><span class="nx">off</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="nx">$</span><span class="p">.</span><span class="nx">publish</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">o</span><span class="p">.</span><span class="nx">trigger</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 使用</span>
</span><span class="line"><span class="nx">$</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;howdy&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">//=&gt; [&quot;one&quot;, &quot;two&quot;]</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;howdy&#39;</span><span class="p">,</span> <span class="p">[[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">]]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">适配一般对象的自定义事件实现</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">pubsub</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">_$</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">__$</span> <span class="o">||</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">__$</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">on</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">().</span><span class="nx">on</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">(),</span> <span class="nx">arguments</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">one</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">().</span><span class="nx">one</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">(),</span> <span class="nx">arguments</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">off</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">().</span><span class="nx">off</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">(),</span> <span class="nx">arguments</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">emit</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">events</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">().</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">events</span><span class="p">,</span> <span class="p">[</span><span class="nx">data</span><span class="p">])[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 使用</span>
</span><span class="line">
</span><span class="line"><span class="c1">// =====================</span>
</span><span class="line"><span class="c1">// 字面对象添加自定义事件</span>
</span><span class="line"><span class="c1">// =====================</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">pubsub</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">obj</span>
</span><span class="line">  <span class="p">.</span><span class="nx">on</span><span class="p">({</span>
</span><span class="line">    <span class="s1">&#39;hello&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="c1">//=&gt; &#39;how are you today?&#39;</span>
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="s1">&#39;bye&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="c1">//=&gt; &#39;good night!&#39;</span>
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">  <span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;how are you today?&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;bye&#39;</span><span class="p">,</span> <span class="s1">&#39;good night!&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// =====================</span>
</span><span class="line"><span class="c1">// 实例化对象添加自定义事件</span>
</span><span class="line"><span class="c1">// =====================</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 构造函数</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 将事件方法添加到构造函数的原型上</span>
</span><span class="line"><span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">pubsub</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 实例化对象</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nx">foo</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;howdy.with.namespace&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">//=&gt; { spam: &quot;one&quot;, eggs: &quot;two&quot; }</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">foo</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;howdy&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;spam&#39;</span><span class="o">:</span> <span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;eggs&#39;</span><span class="o">:</span> <span class="s1">&#39;two&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过以上代码我们可以看到，编写区区几行代码，我们就实现了适配一般对象的复杂易用的事件模型，它具有jQuery事件模型一切强大的功能。另外，我们注意到改造后的事件模型和Backbone实现的事件模型特别相似。另外，如果采用ES6环境，上述代码还可继续简化。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">pubsub</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">_$</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">__$</span> <span class="o">||</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">__$</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">on</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">().</span><span class="nx">on</span><span class="p">(...</span><span class="nx">arguments</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">one</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">().</span><span class="nx">one</span><span class="p">(...</span><span class="nx">arguments</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">off</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">().</span><span class="nx">off</span><span class="p">(...</span><span class="nx">arguments</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">emit</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">events</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_$</span><span class="p">().</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">events</span><span class="p">,</span> <span class="p">[</span><span class="nx">data</span><span class="p">])[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>END</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的分页折叠逻辑实现]]></title>
    <link href="http://myunlessor.me/blog/2014/06/19/one-way-to-implement-pagination-folding-logic/"/>
    <updated>2014-06-19T10:28:00+08:00</updated>
    <id>http://myunlessor.me/blog/2014/06/19/one-way-to-implement-pagination-folding-logic</id>
    <content type="html"><![CDATA[<p>列表数据量过多时，常见有以下两种呈现方式：</p>

<ul>
  <li>将数据列表分页呈现</li>
  <li>采用瀑布流形式加载数据</li>
</ul>

<p>本文单讲前者，即以分页方式呈现时分页折叠逻辑实现。</p>

<p>以往遇到需要分页的需求时，我一般采用项目中已经写好的公用组件直接用，或者利用第三方插件。观察这类代码的实现，有一个共同点：分页折叠逻辑和分页标签渲染是揉合在一块执行的。最近自己尝试着写了一个分页折叠逻辑实现，我把这部分逻辑从分页标签渲染中抽取出来了——我先处理分页折叠逻辑、再进而渲染分页标签。这么做有个好处：分页折叠逻辑和分页渲染处理实现解耦、职责区分，分页折叠逻辑代码的更换不会影响随后的渲染。</p>

<!-- more -->

<h2 id="section">思考过程</h2>

<p>假设我们的数据有15页，如果不考虑分页折叠逻辑的话，我们分页显示大概像这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">15</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们可以对以上这个数组遍历渲染为标签。然而我们的页面横向空间有限，分页过多时，我们不希望将每一页都显示为标签。我们需要将跟当前页不太相干的页号折叠起来，不管数据有多少页，只显示固定可视页就好。比如，当前页为第7页，且最多显示9个槽位，我们希望显示成这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们显示第一页、最末页以及与第7页相邻的页，其他页做折叠处理，即上述数组中的<code>…</code>，并且当前页显示为数字字符串以区分非当前页。</p>

<p>如果当前页是第2页呢？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果当前页是第12页呢？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="s1">&#39;12&#39;</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们将分页折叠呈现用javascript的数组直接表示出来了，一切都很直观。既然这样，何不写个方法进行数组变换呢？我把这样的一个方法叫做<code>foldpages</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * [foldpages description]</span>
</span><span class="line"><span class="cm"> * @param  {[Array]}  pages    [未作变换的分页数组]</span>
</span><span class="line"><span class="cm"> * @param  {[Number]} current  [当前显示页]</span>
</span><span class="line"><span class="cm"> * @param  {[Number]} viewsize [分页显示槽位个数]</span>
</span><span class="line"><span class="cm"> * @return {[Array]}           [分页折叠后的数组]</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">foldpages</span><span class="p">(</span><span class="nx">pages</span><span class="p">,</span> <span class="nx">current</span><span class="p">,</span> <span class="nx">viewsize</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">pages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">];</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">viewsize</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; expected result: [1, &#39;…&#39;, 5, 6, 7, 8, 9, &#39;…&#39;, 15]</span>
</span><span class="line"><span class="nx">foldpages</span><span class="p">(</span><span class="nx">pages</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">viewsize</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; expected result: [1, 2, 3, 4, 5, 6, 7, &#39;…&#39;, 15]</span>
</span><span class="line"><span class="nx">foldpages</span><span class="p">(</span><span class="nx">pages</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">viewsize</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; expected result: [1, &#39;…&#39;, 9, 10, 11, 12, 13, 14, 15]</span>
</span><span class="line"><span class="nx">foldpages</span><span class="p">(</span><span class="nx">pages</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="nx">viewsize</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>剩下的就是实现了！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">foldpages</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">pages</span><span class="p">,</span> <span class="nx">current</span><span class="p">,</span> <span class="nx">viewsize</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">ret</span>  <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">pages</span><span class="p">),</span>
</span><span class="line">      <span class="nx">min</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">      <span class="nx">max</span>  <span class="o">=</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class="line">      <span class="nx">dots</span> <span class="o">=</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">remain</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">current</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">min</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="nx">max</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nx">max</span> <span class="o">&lt;=</span> <span class="nx">viewsize</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">[</span><span class="nx">current</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">ret</span><span class="p">[</span><span class="nx">current</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">viewsize</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">viewsize</span> <span class="o">||</span> <span class="mi">7</span><span class="p">);</span>
</span><span class="line">  <span class="nx">ret</span>      <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">current</span><span class="p">];</span>
</span><span class="line">  <span class="nx">remain</span>   <span class="o">=</span> <span class="nx">viewsize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="o">+</span><span class="nx">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">last</span> <span class="o">=</span> <span class="o">+</span><span class="nx">ret</span><span class="p">[</span><span class="nx">ret</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">first</span> <span class="o">&gt;</span> <span class="nx">min</span><span class="p">)</span>  <span class="p">{</span>
</span><span class="line">      <span class="nx">ret</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">first</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="o">!--</span><span class="nx">remain</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">last</span> <span class="o">&lt;</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">last</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="o">!--</span><span class="nx">remain</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">switch</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">case</span> <span class="o">+</span><span class="nx">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="nx">min</span><span class="o">:</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">dots</span><span class="p">,</span> <span class="nx">max</span><span class="p">);</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="k">case</span> <span class="o">+</span><span class="nx">ret</span><span class="p">[</span><span class="nx">ret</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="nx">max</span><span class="o">:</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">min</span><span class="p">,</span> <span class="nx">dots</span><span class="p">);</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="k">default</span><span class="o">:</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">min</span><span class="p">,</span> <span class="nx">dots</span><span class="p">);</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">dots</span><span class="p">,</span> <span class="nx">max</span><span class="p">);</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后再验证下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">TOTAL_PAGE</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">pages</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">TOTAL_PAGE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">foldnum</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;当显示槽位个数为&#39;</span> <span class="o">+</span> <span class="nx">foldnum</span> <span class="o">+</span> <span class="s1">&#39;时，每一页的折叠显示如下:&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">_</span><span class="p">.</span><span class="nx">times</span><span class="p">(</span><span class="nx">TOTAL_PAGE</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">++</span><span class="nx">index</span><span class="p">,</span> <span class="nx">foldpages</span><span class="p">(</span><span class="nx">pages</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">foldnum</span><span class="p">));</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// =============================================</span>
</span><span class="line"><span class="c1">// OUTPUT</span>
</span><span class="line"><span class="c1">// =============================================</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">当显示槽位个数为6时，每一页的折叠显示如下:</span>
</span><span class="line"><span class="cm"> 1 [&quot;1&quot;, 2, 3, 4, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 2 [1, &quot;2&quot;, 3, 4, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 3 [1, 2, &quot;3&quot;, 4, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 4 [1, 2, 3, &quot;4&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 5 [1, &quot;…&quot;, 4, &quot;5&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 6 [1, &quot;…&quot;, 5, &quot;6&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 7 [1, &quot;…&quot;, 6, &quot;7&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 8 [1, &quot;…&quot;, 7, &quot;8&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 9 [1, &quot;…&quot;, 8, &quot;9&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">10 [1, &quot;…&quot;, 9, &quot;10&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">11 [1, &quot;…&quot;, 10, &quot;11&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">12 [1, &quot;…&quot;, 11, &quot;12&quot;, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">13 [1, &quot;…&quot;, 12, &quot;13&quot;, 14, 15]</span>
</span><span class="line"><span class="cm">14 [1, &quot;…&quot;, 12, 13, &quot;14&quot;, 15]</span>
</span><span class="line"><span class="cm">15 [1, &quot;…&quot;, 12, 13, 14, &quot;15&quot;]</span>
</span><span class="line">
</span><span class="line"><span class="cm">当显示槽位个数为7时，每一页的折叠显示如下:</span>
</span><span class="line"><span class="cm"> 1 [&quot;1&quot;, 2, 3, 4, 5, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 2 [1, &quot;2&quot;, 3, 4, 5, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 3 [1, 2, &quot;3&quot;, 4, 5, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 4 [1, 2, 3, &quot;4&quot;, 5, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 5 [1, &quot;…&quot;, 4, &quot;5&quot;, 6, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 6 [1, &quot;…&quot;, 5, &quot;6&quot;, 7, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 7 [1, &quot;…&quot;, 6, &quot;7&quot;, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 8 [1, &quot;…&quot;, 7, &quot;8&quot;, 9, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 9 [1, &quot;…&quot;, 8, &quot;9&quot;, 10, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">10 [1, &quot;…&quot;, 9, &quot;10&quot;, 11, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">11 [1, &quot;…&quot;, 10, &quot;11&quot;, 12, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">12 [1, &quot;…&quot;, 11, &quot;12&quot;, 13, 14, 15]</span>
</span><span class="line"><span class="cm">13 [1, &quot;…&quot;, 11, 12, &quot;13&quot;, 14, 15]</span>
</span><span class="line"><span class="cm">14 [1, &quot;…&quot;, 11, 12, 13, &quot;14&quot;, 15]</span>
</span><span class="line"><span class="cm">15 [1, &quot;…&quot;, 11, 12, 13, 14, &quot;15&quot;]</span>
</span><span class="line">
</span><span class="line"><span class="cm">当显示槽位个数为8时，每一页的折叠显示如下:</span>
</span><span class="line"><span class="cm"> 1 [&quot;1&quot;, 2, 3, 4, 5, 6, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 2 [1, &quot;2&quot;, 3, 4, 5, 6, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 3 [1, 2, &quot;3&quot;, 4, 5, 6, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 4 [1, 2, 3, &quot;4&quot;, 5, 6, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 5 [1, 2, 3, 4, &quot;5&quot;, 6, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 6 [1, &quot;…&quot;, 4, 5, &quot;6&quot;, 7, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 7 [1, &quot;…&quot;, 5, 6, &quot;7&quot;, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 8 [1, &quot;…&quot;, 6, 7, &quot;8&quot;, 9, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 9 [1, &quot;…&quot;, 7, 8, &quot;9&quot;, 10, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">10 [1, &quot;…&quot;, 8, 9, &quot;10&quot;, 11, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">11 [1, &quot;…&quot;, 9, 10, &quot;11&quot;, 12, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">12 [1, &quot;…&quot;, 10, 11, &quot;12&quot;, 13, 14, 15]</span>
</span><span class="line"><span class="cm">13 [1, &quot;…&quot;, 10, 11, 12, &quot;13&quot;, 14, 15]</span>
</span><span class="line"><span class="cm">14 [1, &quot;…&quot;, 10, 11, 12, 13, &quot;14&quot;, 15]</span>
</span><span class="line"><span class="cm">15 [1, &quot;…&quot;, 10, 11, 12, 13, 14, &quot;15&quot;]</span>
</span><span class="line">
</span><span class="line"><span class="cm">当显示槽位个数为9时，每一页的折叠显示如下:</span>
</span><span class="line"><span class="cm"> 1 [&quot;1&quot;, 2, 3, 4, 5, 6, 7, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 2 [1, &quot;2&quot;, 3, 4, 5, 6, 7, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 3 [1, 2, &quot;3&quot;, 4, 5, 6, 7, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 4 [1, 2, 3, &quot;4&quot;, 5, 6, 7, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 5 [1, 2, 3, 4, &quot;5&quot;, 6, 7, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 6 [1, &quot;…&quot;, 4, 5, &quot;6&quot;, 7, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 7 [1, &quot;…&quot;, 5, 6, &quot;7&quot;, 8, 9, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 8 [1, &quot;…&quot;, 6, 7, &quot;8&quot;, 9, 10, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 9 [1, &quot;…&quot;, 7, 8, &quot;9&quot;, 10, 11, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">10 [1, &quot;…&quot;, 8, 9, &quot;10&quot;, 11, 12, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">11 [1, &quot;…&quot;, 9, 10, &quot;11&quot;, 12, 13, 14, 15]</span>
</span><span class="line"><span class="cm">12 [1, &quot;…&quot;, 9, 10, 11, &quot;12&quot;, 13, 14, 15]</span>
</span><span class="line"><span class="cm">13 [1, &quot;…&quot;, 9, 10, 11, 12, &quot;13&quot;, 14, 15]</span>
</span><span class="line"><span class="cm">14 [1, &quot;…&quot;, 9, 10, 11, 12, 13, &quot;14&quot;, 15]</span>
</span><span class="line"><span class="cm">15 [1, &quot;…&quot;, 9, 10, 11, 12, 13, 14, &quot;15&quot;]</span>
</span><span class="line">
</span><span class="line"><span class="cm">当显示槽位个数为10时，每一页的折叠显示如下:</span>
</span><span class="line"><span class="cm"> 1 [&quot;1&quot;, 2, 3, 4, 5, 6, 7, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 2 [1, &quot;2&quot;, 3, 4, 5, 6, 7, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 3 [1, 2, &quot;3&quot;, 4, 5, 6, 7, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 4 [1, 2, 3, &quot;4&quot;, 5, 6, 7, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 5 [1, 2, 3, 4, &quot;5&quot;, 6, 7, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 6 [1, 2, 3, 4, 5, &quot;6&quot;, 7, 8, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 7 [1, &quot;…&quot;, 4, 5, 6, &quot;7&quot;, 8, 9, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 8 [1, &quot;…&quot;, 5, 6, 7, &quot;8&quot;, 9, 10, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm"> 9 [1, &quot;…&quot;, 6, 7, 8, &quot;9&quot;, 10, 11, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">10 [1, &quot;…&quot;, 7, 8, 9, &quot;10&quot;, 11, 12, &quot;…&quot;, 15]</span>
</span><span class="line"><span class="cm">11 [1, &quot;…&quot;, 8, 9, 10, &quot;11&quot;, 12, 13, 14, 15]</span>
</span><span class="line"><span class="cm">12 [1, &quot;…&quot;, 8, 9, 10, 11, &quot;12&quot;, 13, 14, 15]</span>
</span><span class="line"><span class="cm">13 [1, &quot;…&quot;, 8, 9, 10, 11, 12, &quot;13&quot;, 14, 15]</span>
</span><span class="line"><span class="cm">14 [1, &quot;…&quot;, 8, 9, 10, 11, 12, 13, &quot;14&quot;, 15]</span>
</span><span class="line"><span class="cm">15 [1, &quot;…&quot;, 8, 9, 10, 11, 12, 13, 14, &quot;15&quot;]</span>
</span><span class="line"><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>分页折叠逻辑实现好了，接下的的分页渲染就信手拈来，不费吹灰之力了！</p>

<h2 id="section-1">渲染分页</h2>

<p>直接上代码吧！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">renderpages</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">pages</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">pages</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">switch</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="nx">page</span> <span class="o">===</span> <span class="o">+</span><span class="nx">page</span><span class="o">:</span> <span class="k">return</span> <span class="s1">&#39;&lt;a href=&quot;javascript:;&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">page</span> <span class="o">+</span> <span class="s1">&#39;&lt;/a&gt;&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nx">page</span> <span class="o">==</span>  <span class="o">+</span><span class="nx">page</span><span class="o">:</span> <span class="k">return</span> <span class="s1">&#39;&lt;span class=&quot;current&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">page</span> <span class="o">+</span> <span class="s1">&#39;&lt;/span&gt;&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span>             <span class="k">return</span> <span class="s1">&#39;&lt;span&gt;&#39;</span> <span class="o">+</span> <span class="nx">page</span> <span class="o">+</span> <span class="s1">&#39;&lt;/span&gt;&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">renderpages</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=============== OUTPUT ============&gt;</span>
</span><span class="line">      <span class="s1">&#39;&lt;a href=&quot;javascript:;&quot;&gt;1&lt;/a&gt;&#39;</span> <span class="o">+</span>
</span><span class="line">      <span class="s1">&#39;&lt;span&gt;…&lt;/span&gt;&#39;</span> <span class="o">+</span>
</span><span class="line">      <span class="s1">&#39;&lt;a href=&quot;javascript:;&quot;&gt;5&lt;/a&gt;&#39;</span> <span class="o">+</span>
</span><span class="line">      <span class="s1">&#39;&lt;a href=&quot;javascript:;&quot;&gt;6&lt;/a&gt;&#39;</span> <span class="o">+</span>
</span><span class="line">      <span class="s1">&#39;&lt;span class=&quot;current&quot;&gt;7&lt;/span&gt;&#39;</span> <span class="o">+</span>
</span><span class="line">      <span class="s1">&#39;&lt;a href=&quot;javascript:;&quot;&gt;8&lt;/a&gt;&#39;</span> <span class="o">+</span>
</span><span class="line">      <span class="s1">&#39;&lt;a href=&quot;javascript:;&quot;&gt;9&lt;/a&gt;&#39;</span> <span class="o">+</span>
</span><span class="line">      <span class="s1">&#39;&lt;span&gt;…&lt;/span&gt;&#39;</span> <span class="o">+</span>
</span><span class="line">      <span class="s1">&#39;&lt;a href=&quot;javascript:;&quot;&gt;15&lt;/a&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到分页渲染时没有了分页折叠逻辑的干扰，代码清晰而简明了。我们一般都习惯把复杂的东西简单化。当然，要想要简单的事情变复杂化也是可行的。不信，我们以分页渲染为例，看能够将它复杂化到什么程度。</p>

<h2 id="section-2">简单的事情复杂化</h2>

<p>仍是直接上代码的方式。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">truthy</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">cat</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">head</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">first</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">head</span><span class="p">)</span> <span class="o">?</span>
</span><span class="line">         <span class="nx">head</span><span class="p">.</span><span class="nx">concat</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">head</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">arguments</span><span class="p">))</span> <span class="o">:</span> <span class="p">[];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">construct</span><span class="p">(</span><span class="nx">head</span><span class="p">,</span> <span class="nx">tail</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">cat</span><span class="p">([</span><span class="nx">head</span><span class="p">],</span> <span class="nx">_</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">tail</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [4, 8, 15, 16, 23, 42]</span>
</span><span class="line"><span class="nx">cat</span><span class="p">([</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">42</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [4, 8, 15, 16, 23, 42]</span>
</span><span class="line"><span class="nx">construct</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">42</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">dispatch</span><span class="p">(</span><span class="cm">/* funs */</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">funs</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span> <span class="nx">size</span> <span class="o">=</span> <span class="nx">funs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span> <span class="cm">/*, args */</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">,</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nx">_</span><span class="p">.</span><span class="nx">detect</span><span class="p">(</span><span class="nx">funs</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fun</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">ret</span> <span class="o">=</span> <span class="nx">fun</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">fun</span><span class="p">,</span> <span class="nx">construct</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">args</span><span class="p">));</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">whilst</span><span class="p">(</span><span class="nx">cond</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">truthy</span><span class="p">(</span><span class="nx">cond</span><span class="p">(</span><span class="nx">obj</span><span class="p">))</span> <span class="o">?</span> <span class="nx">action</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">:</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">renderer</span> <span class="o">=</span> <span class="nx">dispatch</span><span class="p">(</span>
</span><span class="line">  <span class="nx">whilst</span><span class="p">(</span>
</span><span class="line">    <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">===</span> <span class="o">+</span><span class="nx">x</span><span class="p">;</span> <span class="p">},</span>
</span><span class="line">    <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;&lt;a href=&quot;javascript:;&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;&lt;/a&gt;&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">  <span class="p">),</span>
</span><span class="line">  <span class="nx">whilst</span><span class="p">(</span>
</span><span class="line">    <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">==</span> <span class="o">+</span><span class="nx">x</span><span class="p">;</span> <span class="p">},</span>
</span><span class="line">    <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;&lt;span class=&quot;current&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;&lt;/span&gt;&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">  <span class="p">),</span>
</span><span class="line">  <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;&lt;span&gt;&#39;</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;&lt;/span&gt;&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="nx">renderer</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上展示了如何用函数式编程方式把简单的事情复杂化。不过，它已背离了本文的宗旨，还是就此打住吧！</p>

<p>后记：想了好几种方式实现<code>foldpages</code>方法，天马行空的。然而，没有一种方式觉得很理想，包括贴在此处的这个！我想我是有代码洁癖症的，希望以后能想到更好的实现办法！这需要灵感：或是触类旁通的，或是恍然大悟的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">inspiration</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="nx">aspiration</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由Underscore与Lodash的差异引发的思考]]></title>
    <link href="http://myunlessor.me/blog/2014/06/18/ponder-with-underscore-and-lodash/"/>
    <updated>2014-06-18T22:24:00+08:00</updated>
    <id>http://myunlessor.me/blog/2014/06/18/ponder-with-underscore-and-lodash</id>
    <content type="html"><![CDATA[<p>自打接触<a href="http://underscorejs.org/">Underscore</a>以来就对其爱不释手，尔后又了解到<a href="http://lodash.com/">Lodash</a>。这两个类库为我们提供了一系列相当不错的跟函数式编程相关的方法。Underscore以API实现简洁著称。Lodash作为Underscore的后继者，除了对Underscore现有API功能使用上进行扩充外，更是添加了不少令人难忘的API，在性能上也更为出彩，而且还能根据需要构建自己的子集方法。相较而言，我更亲睐于Lodash，而且成了日常项目开发的标配。</p>

<p>目前Lodash的最新版本是v2.4.1，功能上可以说完全是Underscore的超集。只要Underscore添加了啥新功能时，Lodash都会及时覆盖更新，以维护它一如既往超集的地位。然而，当Underscore更新到v1.6.0时，这个版本添加了一个很棒的功能，其为方法<code>_.partial</code>添加了占位符参数的支持（如果没猜错的话，这个特性应该是从<a href="http://osteele.com/sources/javascript/functional/">functional.js</a>中移植过来了）。自然地，希望Lodash也能很快地对<code>_.partial</code>做增强处理。可是，四个月过去了，Lodash似乎处于冬眠状态，一点都不见有动静。于是乎，到目前为止，Lodash的功能不足以完全覆盖Underscore了，于是也就有了这篇文章。</p>

<!-- more -->

<h2 id="section">循序渐进</h2>

<p>还是以例子引入话题，假如我要将数组<code>['4', '8', '15', '16', '23', '42']</code>(<a href="http://www.douban.com/group/topic/6251101/">神奇数字</a>)中所有字符串元素变换为数字型。不假思索后，我们会这样写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [4, 8, 15, 16, 23, 42]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">,</span> <span class="s1">&#39;15&#39;</span><span class="p">,</span> <span class="s1">&#39;16&#39;</span><span class="p">,</span> <span class="s1">&#39;23&#39;</span><span class="p">,</span> <span class="s1">&#39;42&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>没错，这没什么问题。稍微观察一下，我们会发现，传递给<code>_.map</code>方法的匿名回调方法仅仅做了件简单的事，将其第一个参数传进<code>Number</code>函数中调用后直接返回。这种做法其实就相当于：你实际要执行的是<code>f</code>函数，而你却通过调用<code>g</code>函数间接执行<code>f</code>函数，而事实上你完全可以直接执行<code>f</code>函数的，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">val</span><span class="p">;</span> <span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">g</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">f</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; true</span>
</span><span class="line"><span class="nx">f</span><span class="p">(</span><span class="s1">&#39;stupid&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="nx">g</span><span class="p">(</span><span class="s1">&#39;stupid&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因此，上述数组变换实际可以简化为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [4, 8, 15, 16, 23, 42]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">,</span> <span class="s1">&#39;15&#39;</span><span class="p">,</span> <span class="s1">&#39;16&#39;</span><span class="p">,</span> <span class="s1">&#39;23&#39;</span><span class="p">,</span> <span class="s1">&#39;42&#39;</span><span class="p">],</span> <span class="nb">Number</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>嗯，确实是这么回事^-^。</p>

<p>再比如，我想将数组<code>['1NO', '2FOOL', '3ME']</code>中所有字符串元素解析为数字型。我们知道将字符串解析为数字型可以通过<code>parseInt</code>直接得到，像这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;1NO&#39;</span><span class="p">);</span>     <span class="c1">//=&gt; 1</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">middle</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;2FOOL&#39;</span><span class="p">);</span>  <span class="c1">//=&gt; 2</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">last</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;3ME&#39;</span><span class="p">);</span>      <span class="c1">//=&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It works! 于是以迅雷不及掩耳的速度得出结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [1, 2, 3]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;1NO&#39;</span><span class="p">,</span> <span class="s1">&#39;2FOOL&#39;</span><span class="p">,</span> <span class="s1">&#39;3ME&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Perfect！细看一下，咿，这不是和之前那个例子一样的嘛，这次学聪明了，窃喜之下后马上将结果改为如下，也没忘夸奖下自己随机应变的能力：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [1, NaN, NaN]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;1NO&#39;</span><span class="p">,</span> <span class="s1">&#39;2FOOL&#39;</span><span class="p">,</span> <span class="s1">&#39;3ME&#39;</span><span class="p">],</span> <span class="nb">parseInt</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>等等，我勒个去，结果不符合预期了，这是怎么回事？！</p>

<p>脑袋稍微转下，原来是这么回事，当你把<code>parseInt</code>直接作为<code>_.map</code>方法的回调时，<code>parseInt</code>执行的时候实际是传入了三个参数(元素值，元素索引，数组本身)。
所以上述代码实际等价于：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">ary</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;1NO&#39;</span><span class="p">,</span> <span class="s1">&#39;2FOOL&#39;</span><span class="p">,</span> <span class="s1">&#39;3ME&#39;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [1, NaN, NaN]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">ary</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">ary</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">ary</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;1NO&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ary</span><span class="p">);</span>     <span class="c1">//=&gt; 1</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">middle</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;2FOOL&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">ary</span><span class="p">);</span>  <span class="c1">//=&gt; NaN</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">last</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;3ME&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">ary</span><span class="p">);</span>      <span class="c1">//=&gt; NaN</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>parseInt</code>调用时可接收可选的第二个参数，元素索引值作为第二个参数无形中传入到<code>parseInt</code>，呜呼哀哉！第一个例子为什么没问题？因为Number只接收一个参数，而把其后的所有参数都忽略，所以安然无恙。这么看来<code>Explicit is better than implicit(显优于隐)</code>的确是真理啊！</p>

<p>在此，我不想弹劾<code>parseInt</code>直接作为<code>_.map</code>回调使用的情况，我只想吐嘈下<code>parseInt</code>不显式指定第二个参数调用的隐患。MDN上关于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt">parseInt API</a>的定义是强调指明要传入<code>radix(基数)</code>值作为解析数字的依据的。</p>

<p>除此以外，我想强调的是<code>Number</code>和<code>parseInt</code>是否有<code>共同特征(pattern recognition)</code>值得我们去挖掘的呢？答案是有的。<code>_.map</code>遍历数组元素时，其都是将数组元素传入到<code>Number</code>或<code>parseInt</code>作为其第一个参数进行执行的。而这是函数式编程很重要的一个特点，对函数进行<code>柯里化(curry)</code>或<code>偏应用(partial)</code>处理时，传给函数的第一个参数往往是数据流，<code>数据流(data flow)</code>也是函数式编程不同于<code>控制流(control flow)</code>的非函数式编程的一个显著区别。</p>

<p>回到之前的问题，既然<code>parseInt</code>不能直接作为<code>_.map</code>回调处理，而我又不想使用匿名函数间接调用<code>parseInt</code>的刻板方法，那么还有其他办法吗？答案是有的。</p>

<p>试想，我们遇到的问题是<code>parseInt</code>作为<code>_.map</code>回调执行时，无形中其第二个参数被污染了。反过来想，我们要找到一个办法使得其第二个参数免受污染。所幸的是，Underscore v1.6.0版本中提供的<code>_.partial</code>正好能满足这一需求。</p>

<p>我的想法是，利用<code>_.partial</code>对<code>parseInt</code>进行偏应用处理，返回得到的新函数再作为回调传入<code>_.map</code>中，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [1, 2, 3]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;1NO&#39;</span><span class="p">,</span> <span class="s1">&#39;2FOOL&#39;</span><span class="p">,</span> <span class="s1">&#39;3ME&#39;</span><span class="p">],</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这个例子中，我们为<code>parseInt</code>预填充了两个参数：第一个参数传入<code>_</code>代表参数占位符，它是动态值；第二个传入基数值10，它是不变的，这样我们就将其第第二个参数“锁定”了。当<code>_.map</code>回调函数被执行时，它还是依次接收三个参数回来，只不过这次接收的第一个参数（数组元素作为数据填补）代替了参数占位符的位置，第二、三个参数被依次追加到<code>parseInt</code>末尾而被忽略，于是我们的代码正常工作了。</p>

<p>然而，这行代码Underscore v1.6.0+版本中才有效，对于Lodash或更低版本的Underscore，我们该怎么办呢？这时函数柯里化的威力就体现出来了。因为<code>parseInt</code>接收两个参数，于是我构建如下的二级柯里化函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">curry2</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">first</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">fun</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>函数<code>curry2</code>调用时接收一个希望被柯里化的函数作为参数传入，方法体中返回一个匿名函数，接收单一参数，而在匿名函数中又再次返回一个匿名函数，同样接收单一参数，直到柯里化函数执行两次时，被柯里化的函数得以执行，两级柯里化参数逆序传入而返回。</p>

<p>应用到这个例子，即：我们对<code>parseInt</code>进行柯里化处理，执行一次传入参数10，也是预填充第二个参数，结果返回新的函数等待<code>_.map</code>被执行时将第一个参数传递进行而返回结果值，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [1, 2, 3]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;1NO&#39;</span><span class="p">,</span> <span class="s1">&#39;2FOOL&#39;</span><span class="p">,</span> <span class="s1">&#39;3ME&#39;</span><span class="p">],</span> <span class="nx">curry2</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">)(</span><span class="mi">10</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这个妥协的解决方法里，我们借助了自己构建的柯里化函数作为辅助。这不禁让我这么想：难道在这泱泱几十号工具方法中，在这个问题上一无是处，无一能为我所用，反倒要依赖外援？思考片刻后，依照<code>curry2</code>的思路，想到Lodash不是提供有<code>_.partialRight</code>方法嘛！从左往右填充参数不行，那就从右往左介入。就像<code>curry2</code>那样给<code>parseInt</code>预填充第二个参数，然后等待<code>_.map</code>填充第一个参数后执行，于是写了如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [1, NaN, NaN]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;1NO&#39;</span><span class="p">,</span> <span class="s1">&#39;2FOOL&#39;</span><span class="p">,</span> <span class="s1">&#39;3ME&#39;</span><span class="p">],</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partialRight</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果不尽如人意，和<code>parseInt</code>直接作为<code>_.map</code>回调函数传入时结果没什么两样，执行时<code>parseInt</code>仍是被<code>_.map</code>传回来的多余参数污染了，基数10成为了<code>parseInt</code>的末尾参数而直接忽略了。多余？这给我提了个醒，如果我能将<code>_.map</code>传回来的多余的后两参数过滤掉，那么<code>parseInt</code>被执行时作为基数10的末尾参数是不是就是作为其第二个参数传入而正常了。Great！现在的问题变成了如何将<code>_.map</code>传回来的多余的后两参数过滤掉？思考良久后我辗转想到了<code>_.identity</code>。<code>_.identity</code>应该算Lodash中倒数第二简单的方法了吧，最简单的是<code>_.noop</code>，它们各自定义如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">noop</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">identity</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">val</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>简单的东西并非一无是处。麻雀虽小，五脏俱全。有时候往往是简单的东西才是我们需要的东西。咋一看，<code>_.identity</code>不就是你给它什么输入，它就给你返回什么嘛。可是当你换个角度想，你却发现了别样的东西，直接上代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">identity</span><span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="p">);</span>                  <span class="c1">//=&gt; &#39;I&#39;</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">identity</span><span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="p">,</span> <span class="s1">&#39;FOOL&#39;</span><span class="p">);</span>          <span class="c1">//=&gt; &#39;I&#39;</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">identity</span><span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="p">,</span> <span class="s1">&#39;FOOL&#39;</span><span class="p">,</span> <span class="s1">&#39;YOU&#39;</span><span class="p">);</span>   <span class="c1">//=&gt; &#39;I&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>发现了什么？所以，更准确地说，无论你给<code>_.identity</code>传入多少个参数，结果都是返回给你传入的第一个参数。这样一想，我传三个参数给它，结果它只把第一个参数返回了，剩余那两个参数呢？消失在茫茫人海之中，不见了。Good Job！</p>

<p>好了，现在解决了参数过滤的问题，我该怎么把过滤后存活下来的第一个参数传给<code>partial right</code>后的<code>parseInt</code>函数使用呢。我们需要管道进行衔接，一个函数的输出作为接下来另一个函数的输入，<code>_.compose</code>不正是专门做这事的嘛，Yeah！</p>

<p>假设<code>f</code>和<code>g</code>是两函数，<code>f</code>函数调用后的输出作为<code>g</code>函数的输入，其中<code>x</code>是<code>f</code>的输入值，则以下等式是成立的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; true</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">isEqual</span><span class="p">(</span> <span class="nx">g</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">)),</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span> <span class="nx">f</span><span class="p">)(</span><span class="nx">x</span><span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有了以上的分析后，我们通过<code>_.compose</code>作为纽带将<code>partial right</code>后的<code>parseInt</code>和<code>_.identity</code>衔接起来，最终得到答案：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [1, 2, 3]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="p">[</span><span class="s1">&#39;1NO&#39;</span><span class="p">,</span> <span class="s1">&#39;2FOOL&#39;</span><span class="p">,</span> <span class="s1">&#39;3ME&#39;</span><span class="p">],</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partialRight</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="nx">_</span><span class="p">.</span><span class="nx">identity</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看到以上这行代码，你在脑海中涌动的应该就是数据在各个函数间依次流动着而最终得到结果，即函数式编程的<code>数据流(data flow)</code>思想。我并不是倡导在实际工作中要写这种代码，更多的是体会函数式编程的思维，那种自成一体的曼妙。函数式编程的思想表现的不是<code>MARVEL</code>旗下的那些个个人英雄主义气概，而是各个功能单一的函数组合在一起才能体现的威力。</p>

<h2 id="section-1">思维发散</h2>

<p>另一个例子：将数组<code>['left  ', ' center ', '  right']</code>中各个字符串元素两边的空白符去除，长驱直入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [&#39;left&#39;, &#39;center&#39;, &#39;right&#39;]</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;left  &#39;</span><span class="p">,</span> <span class="s1">&#39; center &#39;</span><span class="p">,</span> <span class="s1">&#39;  right&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">trim</span><span class="p">();</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>仔细看这段代码，你会看到另一种模式，匿名函数里返回的是第一个参数调用某个方法的结果。函数式编程的核心是函数，而不是方法。我们要将方法调用转化为函数调用，才更能体现函数式风格。Underscore和Lodash都提供了<code>_.result</code>方法。通过这个方法我们可以将方法调用转化为函数调用，也即：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39; center &#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; true</span>
</span><span class="line"><span class="nx">str</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span> <span class="o">===</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="s1">&#39;trim&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>_.result</code>调用像不像此前的<code>parseInt</code>？这样，我们之前的方法再次奏效：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">ary</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;left  &#39;</span><span class="p">,</span> <span class="s1">&#39; center &#39;</span><span class="p">,</span> <span class="s1">&#39;  right&#39;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Underscore v1.6.0</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">ary</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="s1">&#39;trim&#39;</span> <span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Lodash v2.4.1</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">ary</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partialRight</span><span class="p">(</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">,</span> <span class="s1">&#39;trim&#39;</span> <span class="p">),</span> <span class="nx">_</span><span class="p">.</span><span class="nx">identity</span> <span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Underscore &amp; Lodash</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">ary</span><span class="p">,</span> <span class="nx">curry2</span><span class="p">(</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span> <span class="p">)(</span> <span class="s1">&#39;trim&#39;</span> <span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">延伸拓展</h2>

<p>前面提到了<code>_.identity</code>方法，如果换种角度来看，可以把它当作参数过滤器使用。可是它是有局限性的，它只能过滤第一个参数。假如某种情况下我要过滤出输入参数的前两个参数，这回该怎么办？我们知道函数只能返回一个值，要返回多个值的话，则可以将多个值以数组形式返回。以下是过滤前两个参数的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">take2</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [&#39;first&#39;, &#39;second&#39;]</span>
</span><span class="line"><span class="nx">take2</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="s1">&#39;second&#39;</span><span class="p">,</span> <span class="s1">&#39;third&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [&#39;first&#39;, &#39;second&#39;]</span>
</span><span class="line"><span class="nx">take2</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="s1">&#39;second&#39;</span><span class="p">,</span> <span class="s1">&#39;third&#39;</span><span class="p">,</span> <span class="s1">&#39;forth&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解决了过滤两个参数的问题，可是它有个瑕疵，它的输出是以数组形式返回的。如果这种输出直接作为另一个函数的输入，这将无法衔接起来，因为我们的接收方函数要求参数是单个单个传入，而不是给它灌入单个数组。于是，我们接下来需要某种能够将数组变换为单个单个参数传入接收方函数的方法。</p>

<p>先看以下举例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="cm">/* args */</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; 42</span>
</span><span class="line"><span class="nx">max</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>max</code>方法很简单，它返回任意输入Number型参数的最大值。给它输入的单个单个参数依次是<code>8, 4, 15, 42, 23, 16</code>。现在假设我只想知道输入参数的前两个哪个最大。我们脑海里首先闪过的可能是如下答案：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">max_initial</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">max</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; 8</span>
</span><span class="line"><span class="nx">max_initial</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看起来还不错！但我们前面定义了专门充当“参数过滤器”的函数<code>take2</code>，让我们试图将它介入其中，像如下那样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">max_initial2</span><span class="p">(</span><span class="cm">/* args */</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">take2</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; 8</span>
</span><span class="line"><span class="nx">max_initial2</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>感谢<code>Function.prototype.apply</code>方法，我们成功地将参数过滤了，并传给了<code>max</code>，It Works！可是盯着它看下，怎么看怎么不舒服。还是再改进下吧～前面我们提到<code>_.compose</code>方法可以将参数输入输出串联起来，那再试图让<code>_.compose</code>介入进来吧！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">max_initial3</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">max</span><span class="p">,</span> <span class="nx">take2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; NaN</span>
</span><span class="line"><span class="nx">max_initial3</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Does it work？Nope！Why？<code>max_initial3</code>函数执行实际等价于如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//=&gt; [8, 4]</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">take2</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; NaN</span>
</span><span class="line"><span class="nx">max</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们将<code>take2</code>执行后返回的数组值直接传递给了<code>max</code>，而<code>max</code>需接收的是单个单个的参数。由于接口的不一致，我们的尝试失败了。既然接口不一致，我们何不制造个<code>适配器(Adapter)</code>以适配接口呢！我们需要什么样的适配器？我们需要将数组参数转化为单个单个参数的适配器——我们需要<code>splat</code>适配器：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">splat</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">fun</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">array</span><span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">maxAdapted</span> <span class="o">=</span> <span class="nx">splat</span><span class="p">(</span><span class="nx">max</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; 8</span>
</span><span class="line"><span class="nx">maxAdapted</span><span class="p">([</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Looks pretty neat, doesn’t it?有了适配器后，我们再用<code>_.compose</code>将它们衔接起来：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">max_initial4</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">splat</span><span class="p">(</span><span class="nx">max</span><span class="p">),</span> <span class="nx">take2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; 8</span>
</span><span class="line"><span class="nx">max_initial4</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>瞧，它又正常工作了，多亏了<code>splat</code>适配器。适配器用于适配不同的接口，以此将不同的接口衔接起来，它的职责是单一的，因此也可以复用。</p>

<p>现在我们有了将数组参数转化为单个单个参数的<code>splat</code>适配器。反过来，我们何不再制造个将单个单个参数转化为数组参数的适配器呢？我们估且叫它<code>unsplat</code>吧！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">unsplat</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">));</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 既然我们使用Underscore或Lodash，我们何不写成这样呢！</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">unsplat</span><span class="p">(</span><span class="nx">fun</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">arguments</span><span class="p">));</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>unsplat</code>能用在什么地方呢？Let’s have a try!</p>

<p>前面我们定义有<code>take2</code>，我们何不定义个更一般的<code>take</code>函数呢？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">take</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">n</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [8, 4]</span>
</span><span class="line"><span class="nx">take</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有了更一般的<code>take</code>函数，我们就可以基于它生成过滤任意多个前置参数的“参数过滤器”函数了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">take2</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span><span class="nx">take</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">take3</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span><span class="nx">take</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [8, 4]</span>
</span><span class="line"><span class="nx">take2</span><span class="p">([</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [8, 4, 15]</span>
</span><span class="line"><span class="nx">take3</span><span class="p">([</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这不对！之前我们调用<code>take2</code>的时候传递给它的是单个单个的参数，可是这回调用时传递的却是数组参数。不行，我们需要适配器，我们需要将单个单个参数转化为数组参数的适配器——我们需要<code>unsplat</code>适配器！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">take2</span> <span class="o">=</span> <span class="nx">unsplat</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span><span class="nx">take</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">take3</span> <span class="o">=</span> <span class="nx">unsplat</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span><span class="nx">take</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [8, 4]</span>
</span><span class="line"><span class="nx">take2</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; [8, 4, 15]</span>
</span><span class="line"><span class="nx">take3</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这回正常了！回到最初的问题，针对<code>max</code>函数，给它输入的单个单个参数依次是<code>8, 4, 15, 42, 23, 16</code>。现在假设我只想知道输入参数的前三个哪个最大，我们有了一般性的答案：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">max_revamped</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span> <span class="nx">splat</span><span class="p">(</span><span class="nx">max</span><span class="p">),</span> <span class="nx">unsplat</span><span class="p">(</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span><span class="nx">take</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; 15</span>
</span><span class="line"><span class="nx">max_revamped</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now everything is under control! 如果我们了解<code>_.wrap</code>方法，我们可以做的更疯狂：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">max_fancy</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span>
</span><span class="line">  <span class="nx">_</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span> <span class="nx">max</span><span class="p">,</span> <span class="nx">splat</span> <span class="p">)(),</span>
</span><span class="line">  <span class="nx">_</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span> <span class="nx">_</span><span class="p">.</span><span class="nx">partial</span><span class="p">(</span><span class="nx">take</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="nx">unsplat</span> <span class="p">)()</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//=&gt; 15</span>
</span><span class="line"><span class="nx">max_fancy</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>太过天马行空了，似乎偏离主旨了。。。还是就此收笔吧！</p>

<h2 id="section-3">总结</h2>

<p>函数式编程就像搭积木一样，像<code>_.identity</code>、<code>_.partial</code>、<code>_.compose</code>、<code>splat</code>、<code>unsplat</code>等都是职责单一的函数。别看它们简单，把它们当作积木看待，它们释放的是无尽的活力。
越是简单的东西，蕴藏的越是更为无限的可能性。</p>

<p>最后，我的感悟是：函数式编程以数据流动为导向，是函数装配的艺术。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅尝ECMAScript 6]]></title>
    <link href="http://myunlessor.me/blog/2014/03/01/venture-into-es6/"/>
    <updated>2014-03-01T10:43:00+08:00</updated>
    <id>http://myunlessor.me/blog/2014/03/01/venture-into-es6</id>
    <content type="html"><![CDATA[<p>现在ECMAScript 6草案制定在不断地推进，浏览器们也在跟进实现，了解ES6的提供的诸多特性是势在必行的事了。</p>

<p>有关浏览器们对ECMAScript 6草案的实现情况可参阅<a href="http://kangax.github.io/es5-compat-table/es6/">这里</a>。</p>

<p>有关ES6的语言特性可参阅<a href="https://github.com/google/traceur-compiler/wiki/LanguageFeatures">这里</a>。</p>

<p>目前对ES6实现较为充分的环境有<a href="https://github.com/google/traceur-compiler">Google Traceur Compiler</a>及<a href="http://nightly.mozilla.org/">Firefox Nightly</a>。</p>

<p>有关<code>traceur compiler</code>的环境配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://traceur-compiler.googlecode.com/git/bin/traceur.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://traceur-compiler.googlecode.com/git/src/bootstrap.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script&gt;</span>
</span><span class="line"><span class="nx">traceur</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">experimental</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script&gt;</span>
</span><span class="line">  <span class="c1">// blablabla...</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<h2 id="i">I、新的语法</h2>

<h3 id="block-scope">1. 块作用域(Block Scope)</h3>

<p><code>var</code>关键字声明的变量具有函数作用域或全局作用域，而通过<code>let</code>关键字将变量声明为块作用域，对比如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 在块(curly)作用域中声明并初始化变量</span>
</span><span class="line"><span class="p">{</span> <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">{</span> <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// -&gt; &#39;foo&#39;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// ReferenceError: bar is not defined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="constants">2. 常量(Constants)</h3>

<p>许多语言都有常量的概念(值不能改变的变量)。ES6草案将常量引入到了JavaScript中。</p>

<p>使用<code>const</code>关键字将变量声明为常量，规范要求<code>const</code>声明的常量具块作用域，某些浏览器目前将其实现为函数作用域或全局作用域。声明变量为常量时如果不赋值，某些浏览器会将该变量赋<code>undefined</code>值，而某些浏览器则直接报错。为常量重新赋值，某些浏览器会忽略新赋值，某些浏览器会报错。将引用类型（如数组或对象）声明为常量，并不影响引用类型的扩充行为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">const</span> <span class="nx">noexist</span><span class="p">;</span>             <span class="c1">// Const must be initialized (IE)</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;hoo&#39;</span><span class="p">;</span>               <span class="c1">// Assignment to const (IE)</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>          <span class="c1">// -&gt; &#39;foo&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 常量引用类型并不影响对其自身的扩充(`augument`)</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line"><span class="nx">bar</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;spam&#39;</span><span class="p">,</span> <span class="s1">&#39;eggs&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>   <span class="c1">// -&gt; 2</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 同上</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">baz</span><span class="p">.</span><span class="nx">spam</span> <span class="o">=</span> <span class="s1">&#39;eggs&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">baz</span><span class="p">.</span><span class="nx">spam</span><span class="p">);</span>     <span class="c1">// -&gt; &#39;eggs&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="default-parameters">3. 默认参数(Default Parameters)</h3>

<p>函数声明时可以为参数赋予默认值，这样函数调用时如果参数缺省(<code>undefined</code>)，则该参数会被赋予默认值，使用默认参数在一定程序上使函数声明更为直观，并且简化我们的代码。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 传统写法</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">fill</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">liquid</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">liquid</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">liquid</span> <span class="o">=</span> <span class="s1">&#39;coffee&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// blablabla...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 新式写法</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">fill</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">liquid</span> <span class="o">=</span> <span class="s1">&#39;coffee&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// blablabla...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="restspread">4. Rest和Spread操作符</h3>

<p>很多时候我们处理函数的时候需要用到数组参数，ES6提供的<code>Rest</code>和<code>Spread</code>操作符可以让我们更方便地处理数组参数。</p>

<p><code>rest</code>是将多值折叠为单值集合的过程，和<code>rest</code>相反，<code>spread</code>是将单值集合展开为多值的过程。很多语言都有对它的支持，语法略有差异，Python、Ruby和CoffeeScript将这种语法统称为<code>splats</code>，Python和Ruby用形如<code>*var</code>的语法来表达。CoffeeScript用形如<code>var...</code>的语法来表达，而ES6则用形如<code>...var</code>的语法来表达。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 1. rest</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">unary</span><span class="p">(...</span><span class="nx">first</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">binary</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([</span><span class="nx">first</span><span class="p">,</span> <span class="nx">rest</span><span class="p">]);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">unary</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>                 <span class="c1">// -&gt; [&#39;foo&#39;]</span>
</span><span class="line"><span class="nx">unary</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>          <span class="c1">// -&gt; [&#39;foo&#39;, &#39;bar&#39;]</span>
</span><span class="line">
</span><span class="line"><span class="nx">binary</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>                <span class="c1">// -&gt; [&#39;foo&#39;, []]</span>
</span><span class="line"><span class="nx">binary</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>  <span class="c1">// -&gt; [&#39;foo&#39;, [&#39;bar&#39;, &#39;baz&#39;]]</span>
</span><span class="line">
</span><span class="line"><span class="c1">// rest实现</span>
</span><span class="line"><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">_slice</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">variadic</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">numParams</span>    <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="c1">// 形参个数</span>
</span><span class="line">        <span class="nx">numNamedArgs</span> <span class="o">=</span> <span class="nx">numParams</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nx">numParams</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">fn</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="kd">var</span>
</span><span class="line">        <span class="nx">numArgs</span>             <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="c1">// 实参个数</span>
</span><span class="line">        <span class="nx">namedArgs</span>           <span class="o">=</span> <span class="nx">_slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">numNamedArgs</span><span class="p">),</span>
</span><span class="line">        <span class="nx">numMissingNamedArgs</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">numNamedArgs</span> <span class="o">-</span> <span class="nx">numArgs</span><span class="p">),</span>
</span><span class="line">        <span class="nx">argPadding</span>          <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">numMissingNamedArgs</span><span class="p">),</span>
</span><span class="line">        <span class="nx">variadicArgs</span>        <span class="o">=</span> <span class="nx">_slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="nx">numNamedArgs</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">namedArgs</span>
</span><span class="line">                              <span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">argPadding</span><span class="p">)</span>
</span><span class="line">                              <span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="nx">variadicArgs</span><span class="p">]));</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nb">window</span><span class="p">.</span><span class="nx">variadic</span> <span class="o">=</span> <span class="nx">variadic</span><span class="p">;</span>
</span><span class="line"><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; [&#39;why&#39;, &#39;hello&#39;, &#39;there&#39;]</span>
</span><span class="line"><span class="nx">variadic</span><span class="p">(</span><span class="nx">unary</span><span class="p">)(</span><span class="s1">&#39;why&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;there&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; [&#39;why&#39;, [&#39;hello&#39;, &#39;there&#39;]]</span>
</span><span class="line"><span class="nx">variadic</span><span class="p">(</span><span class="nx">binary</span><span class="p">)(</span><span class="s1">&#39;why&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;there&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// ----------------------------------------------------</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 2. spread</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 传统写法</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span> <span class="nx">number</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">filled</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">[].</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">filled</span><span class="p">,</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 新式写法</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">number</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">filled</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">numbers</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="destructuring-assignment">5. 解构赋值(Destructuring Assignment)</h3>

<p>如果你想从数组中拿取多个元素并赋予其他变量，或是从函数中返回多值，那么ES6提供的<code>解构赋值(Destructuring Assignment)</code>特性正是我们所需要的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 1. 数组解构赋值</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line"><span class="p">[</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">];</span>   <span class="c1">// swap two variabls</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// -&gt; 2 1</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">dest</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="p">[</span><span class="s1">&#39;why&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;there&#39;</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span> <span class="p">[</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">baz</span><span class="p">]</span> <span class="o">=</span> <span class="nx">dest</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; &#39;why&#39; &#39;hello&#39; &#39;there&#39;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">baz</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 忽略不需要的值</span>
</span><span class="line"><span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="nx">dest</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; &#39;why&#39; &#39;there&#39;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">c</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 2. 对象解构赋值</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">janeDoe</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">first</span><span class="o">:</span> <span class="s1">&#39;jane&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">last</span><span class="o">:</span> <span class="s1">&#39;doe&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;female&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">hobbies</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;music&#39;</span><span class="p">,</span> <span class="s1">&#39;sports&#39;</span><span class="p">]</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span> <span class="p">{</span> <span class="nx">first</span><span class="o">:</span> <span class="nx">firstName</span><span class="p">,</span> <span class="nx">last</span><span class="o">:</span> <span class="nx">lastName</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">janeDoe</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; &#39;jane&#39; &#39;doe&#39;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span> <span class="p">{</span> <span class="nx">first</span><span class="p">,</span> <span class="nx">last</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">janeDoe</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; &#39;jane&#39; &#39;doe&#39;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">last</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">whatever</span><span class="p">({</span> <span class="nx">first</span><span class="o">:</span> <span class="nx">f</span><span class="p">,</span> <span class="nx">last</span><span class="o">:</span> <span class="nx">l</span> <span class="p">})</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">l</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; &#39;jane&#39; &#39;doe&#39;</span>
</span><span class="line"><span class="nx">whatever</span><span class="p">(</span><span class="nx">janeDoe</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">another</span><span class="p">({</span> <span class="nx">gender</span><span class="p">,</span> <span class="nx">hobbies</span><span class="o">:</span> <span class="p">[</span><span class="nx">hob1</span><span class="p">,</span> <span class="nx">hob2</span><span class="p">]</span> <span class="p">})</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gender</span><span class="p">,</span> <span class="nx">hob1</span><span class="p">,</span> <span class="nx">hob2</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; &#39;female&#39; &#39;music&#39; &#39;sports&#39;</span>
</span><span class="line"><span class="nx">another</span><span class="p">(</span><span class="nx">janeDoe</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="forof-">6. for…of 循环语句</h3>

<p>ES6新引入了<code>for…of</code>循环语句，以往我们使用的<code>for..in</code>循环语句用于迭代对象的<code>属性(properties)</code>，而新式的for…of循环语句则用于迭代对象的<code>值(values)</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 传统写法</span>
</span><span class="line"><span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 新式写法</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">number</span> <span class="nx">of</span> <span class="nx">numbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="iterators">7. 迭代器(Iterators)</h3>

<p><code>for..of</code>循环只对迭代对象有效，这意味着要使一个对象可迭代，对象自身需要迭代器。具体可移步参阅<a href="https://github.com/google/traceur-compiler/wiki/LanguageFeatures#wiki-iterators-and-for-of-loops">这里</a></p>

<h3 id="generators">8. 生成器(Generators)</h3>

<p>生成器可以创建迭代器，并且可以用它来创建自定义迭代对象。生成器异常强大，网上你可以找到它联合<code>Promises</code>一起使用的情形，它为ajax异步调用开启一个新的世界，一个没有<code>callbacks</code>，没有<code>then</code>的世界，它的强大会超乎你的想象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 基本用法</span>
</span><span class="line"><span class="kd">function</span><span class="o">*</span> <span class="nx">numberGen</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">let</span> <span class="nx">limit</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">do</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">yield</span> <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">limit</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span> <span class="nx">iter</span> <span class="o">=</span> <span class="nx">numberGen</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; { value: 0, done: false }</span>
</span><span class="line"><span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; { value: 1, done: false }</span>
</span><span class="line"><span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; { value: 2, done: false }</span>
</span><span class="line"><span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; { value: undefined, done: true }</span>
</span><span class="line"><span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 过滤偶数</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span><span class="o">*</span> <span class="nx">even</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">n</span> <span class="nx">of</span> <span class="nx">numbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">yield</span> <span class="nx">n</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">n</span> <span class="nx">of</span> <span class="nx">even</span><span class="p">(</span><span class="nx">numbers</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 延伸用法1</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">janeDoe</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">first</span><span class="o">:</span> <span class="s1">&#39;jane&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">last</span><span class="o">:</span> <span class="s1">&#39;doe&#39;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span><span class="o">*</span> <span class="nx">iterObj</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">prop</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">yield</span> <span class="p">[</span><span class="nx">prop</span><span class="p">,</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">prop</span><span class="p">]];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; &quot;first: jane&quot;</span>
</span><span class="line"><span class="c1">// -&gt; &quot;last: doe&quot;</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="nx">of</span> <span class="nx">iterObj</span><span class="p">(</span><span class="nx">janeDoe</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 延伸用法2</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="s1">&#39;Hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Person.prototype[Symbol.iterator]</span>
</span><span class="line"><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="s1">&#39;@@iterator&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">prop</span> <span class="k">in</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">prop</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">yield</span> <span class="p">[</span><span class="nx">prop</span><span class="p">,</span> <span class="k">this</span><span class="p">[</span><span class="nx">prop</span><span class="p">]];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span> <span class="nx">johndoe</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;john&#39;</span><span class="p">,</span> <span class="s1">&#39;doe&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// -&gt; &quot;first: john&quot;</span>
</span><span class="line"><span class="c1">// -&gt; &quot;last: doe&quot;</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="nx">of</span> <span class="nx">johndoe</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="comprehensions">9. Comprehensions</h3>

<p>Python最早引入了<code>List Comprehensions(列表推导)</code>的概念，这一特性深受程序员的喜爱，这一特性继而引申出<code>Dict Comprehensions</code>及<code>Generator Comprehensions</code>。CoffeeScript设计时也参考了Python，它也有<code>Comprehensions</code>的概念。而作为日渐流行的JavaScript，这么好的东西怎么能错过呢？自然而然地它也成为了JavaScript的标配。
我们在操作数组的时候经常会使用<code>Array.prototype.map</code>和<code>Array.prototype.filter</code>方法，ES6为我们提供的<code>Comprehensions</code>简直可以称为这两个方法提供<code>语法糖(syntax sugar)</code>，其语法表达直白、简明、形象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">let</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;orange&#39;</span><span class="p">,</span> <span class="s1">&#39;banana&#39;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 传统应用</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">ripeFruits</span> <span class="o">=</span> <span class="nx">fruits</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="s1">&#39;ripe &#39;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span> <span class="nx">fruitsWithN</span> <span class="o">=</span> <span class="nx">fruits</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ripeFruits</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fruitsWithN</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 新式玩法</span>
</span><span class="line"><span class="c1">// 1. 数组推导(Array Comprehension)</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">ripeFruits2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ripe &#39;</span> <span class="o">+</span> <span class="nx">item</span> <span class="k">for</span> <span class="p">(</span><span class="nx">item</span> <span class="nx">of</span> <span class="nx">fruits</span><span class="p">)];</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">fruitsWithN2</span> <span class="o">=</span> <span class="p">[</span><span class="nx">item</span> <span class="k">for</span> <span class="p">(</span><span class="nx">item</span> <span class="nx">of</span> <span class="nx">fruits</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">ripeFruitsWithN</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ripe &#39;</span> <span class="o">+</span> <span class="nx">item</span> <span class="k">for</span> <span class="p">(</span><span class="nx">item</span> <span class="nx">of</span> <span class="nx">fruits</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ripeFruits2</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fruitsWithN2</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ripeFruitsWithN</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 2. 生成器推导(Generator Comprehension)</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">iter</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;ripe &#39;</span> <span class="o">+</span> <span class="nx">item</span> <span class="k">for</span> <span class="p">(</span><span class="nx">item</span> <span class="nx">of</span> <span class="nx">fruits</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// -&gt; &quot;ripe orange&quot;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">iter</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// -&gt; &quot;ripe banana&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="arrow-functions">10. 箭头函数(Arrow Functions)</h3>

<p>有关ES6箭头函数的介绍移步<a href="http://www.nczonline.net/blog/2013/09/10/understanding-ecmascript-6-arrow-functions/">这里</a>参阅。</p>

<h2 id="ii">II、新的代码组织方式</h2>

<h3 id="classes">1. 类(Classes)</h3>

<p>移步<a href="https://github.com/google/traceur-compiler/wiki/LanguageFeatures#wiki-classes">这里</a>以及<a href="http://www.nczonline.net/blog/2012/10/16/does-javascript-need-classes/">这里</a>进行参阅。</p>

<h3 id="modules">2. 模块(Modules)</h3>

<p>移步<a href="https://github.com/google/traceur-compiler/wiki/LanguageFeatures#wiki-modules">这里</a>进行参阅。</p>

<h2 id="iii">III、新的标准类库</h2>

<h3 id="set">1. 集合(Set)</h3>

<p>Python的作者是个数学家，所以这门语言早期就有了对<code>Set</code>的支持。现在，ES6也将<code>Set</code>纳为标配了。有了集合，数组去除已然不费吹灰之力了。
更详细的介绍请移步<a href="http://www.nczonline.net/blog/2012/09/25/ecmascript-6-collections-part-1-sets/">这里</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 创建集合实例</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">items</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 判断指定元素是否在集合中</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">items</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 遍历集合元素</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="nx">of</span> <span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 添加元素到集合中</span>
</span><span class="line"><span class="nx">items</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 从集合中移除元素</span>
</span><span class="line"><span class="nx">items</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 获取集合里元素个数</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">items</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 遍历集合元素</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="nx">of</span> <span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 移除集合里所有元素</span>
</span><span class="line"><span class="nx">items</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="map">2. 映射(Map)</h3>

<p>以往我们都是使用字面对象构建键值对映射，ES6提供的<code>Map</code>结构提供了友好直白的API让我们可以更好地操纵键值对，就像<code>localStorge</code>一样，它使我们更好地在客户端保存数据。
更详细的介绍请移步<a href="http://www.nczonline.net/blog/2012/10/09/ecmascript-6-collections-part-2-maps/">这里</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 创建映射实例</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">stuff</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 设置键值对</span>
</span><span class="line"><span class="nx">stuff</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c1">// 你没看错，对象也可以作为Map的key</span>
</span><span class="line"><span class="nx">stuff</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 判断是否设置了指定键</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stuff</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 获取键值对个数</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stuff</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 获取指定键的值</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stuff</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 删除指定的键</span>
</span><span class="line"><span class="nx">stuff</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 清除所有键</span>
</span><span class="line"><span class="nx">stuff</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 遍历键值对</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="nx">of</span> <span class="nx">stuff</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// key = item[0];</span>
</span><span class="line">  <span class="c1">// value = item[1];</span>
</span><span class="line">  <span class="c1">// do something</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 同上</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="nx">of</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">items</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// do something</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 同上(解构赋值)</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="nx">of</span> <span class="nx">stuff</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// do something</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 遍历所有键</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="nx">of</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">keys</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// do something</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 遍历所有值</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">values</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// do something</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="weakmap">2. 弱映射(WeakMap)</h3>

<p><code>WeakMap</code>和<code>Map</code>类似，但<code>WeakMap</code>的键只能为对象，而不能为原始类型。
有关<code>WeakMap</code>的详细的介绍请移步<a href="http://www.nczonline.net/blog/2012/11/06/ecmascript-6-collections-part-3-weakmaps/">这里</a>以及<a href="http://www.nczonline.net/blog/2014/01/21/private-instance-members-with-weakmaps-in-javascript/">这里</a>。</p>

<h3 id="promises">3. Promises</h3>

<p>由于JavaScript的异步编程的普遍应用，Promises尤显得重要。众望所归，ES6也把<code>Promises</code>写入草案中了。目前<code>Firefox 30+及Chrome33+</code>实现了<code>Promises</code>，加了这个<a href="https://github.com/jakearchibald/es6-promise">polyfill</a>，我们可以在所有现代浏览器中使用它。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="p">((</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">300</span><span class="p">)</span> <span class="o">||</span> <span class="nx">status</span> <span class="o">===</span> <span class="mi">304</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">resolve</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">reject</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">reject</span><span class="p">(</span><span class="s1">&#39;Network error&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">getJSON</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// file1.txt: { &quot;message&quot;: &quot;This is the first file.&quot; }</span>
</span><span class="line"><span class="c1">// file2.txt: { &quot;message&quot;: &quot;This is the second file.&quot; }</span>
</span><span class="line"><span class="c1">// file3.txt: 404</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;file1.txt&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">promise</span>
</span><span class="line">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;file2.txt&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;file3.txt&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="proxies">3. 虚拟对象(Proxies)</h3>

<p><code>Proxies</code>实为虚拟对象，它为对象操纵添加了一道包装，使用它有点Ruby元编程的味道。更多关于<code>Proxies</code>的解释请参阅<a href="http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies">这里</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 原型</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">proxy</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Getter for &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">
</span><span class="line">  <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">proxy</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Setter for &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; and value of &#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">
</span><span class="line">  <span class="nx">has</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is in the has trap.&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="nx">Proxy</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 实例</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">createElement</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">let</span> <span class="nx">specialProps</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;className&#39;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tagName</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">let</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">tagName</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">Proxy</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class="line">      <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">proxy</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;node&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="k">return</span> <span class="nx">element</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="k">return</span> <span class="nx">element</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="nx">element</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class="line">      <span class="p">},</span>
</span><span class="line">
</span><span class="line">      <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">proxy</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;node&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;node cannot be set&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="k">if</span> <span class="p">(</span><span class="nx">specialProps</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; cannot be set&#39;</span><span class="p">);</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">
</span><span class="line">          <span class="nx">element</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">element</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nx">p</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">})();</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span> <span class="c1">// proxy</span>
</span><span class="line">
</span><span class="line"><span class="nx">el</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="s1">&#39;proxyTest&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">el</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;first-class&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">el</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;second-class&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">el</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">el</span><span class="p">[</span><span class="s1">&#39;data-proxy-test&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">node</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">className</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">[</span><span class="s1">&#39;data-proxy-test&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="iv">IV、尾声</h2>

<p>更多关于ES6的信息可参阅如下链接：</p>

<ol>
  <li><a href="https://github.com/addyosmani/es6-tools">Addy Osmani ES6 Tools</a></li>
  <li><a href="http://addyosmani.com/blog/tracking-es6-support/">Tracking ECMAScript 6 Support</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/ECMAScript_6_support_in_Mozilla">ES6 Support in Mozilla</a></li>
  <li><a href="http://kangax.github.io/es5-compat-table/es6/">Kangax’s ES6 Support Table</a></li>
  <li><a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts">ES6 Specification Wiki</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[触摸Sublime Text Plugins]]></title>
    <link href="http://myunlessor.me/blog/2013/12/17/touch-sublime-text-plugins/"/>
    <updated>2013-12-17T21:02:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/12/17/touch-sublime-text-plugins</id>
    <content type="html"><![CDATA[<p>在<a href="http://myunlessor.me/blog/2013/12/16/pragmatic-sublime-text-snippets/">Sublime Text Snippets实用技巧二则</a>一文中提到可以通过<code>Sublime Text</code>的<code>Snippets</code>功能快速在页面中插入图片占位符标签，本来在此基础上借助<code>Sublime Text</code>的<code>Plugins(插件)</code>功能进一步完善它。</p>

<!-- more -->

<h2 id="section">引子</h2>

<p>我们知道<a href="http://placekitten.com/">placekitten</a>为我们提供了为我们提供了生成图片占位符的方案，比如当我们在页面中插入<code>src</code>设为<code>http://placekitten.com/300/240</code>的<code>img</code>标签时，返回一张<code>300 x 240</code>的猫咪图片如下：</p>

<p><img src="http://placekitten.com/300/240" alt="kitten: 300 x 240" /></p>

<p>同样，<a href="http://placehold.it/">placehold.it</a>也提供了类似的服务，比如在页页插入<code>src</code>设为<code>http://placehold.it/300x240</code>的<code>img</code>标签时，返回一张标有图片尺寸的原型图，如下所示：</p>

<p><img src="http://placehold.it/300x240" alt="placehold: 300 x 240" /></p>

<p>现在我想利用同一个<code>tab trigger</code>可以将<a href="http://placekitten.com/">placekitten</a>和<a href="http://placehold.it/">placehold.it</a>整合到一起。也就是说当我们输入<code>kitten</code>时触发的第一个编辑点输入格式为<code>{width}/{height}</code>时，得到相应尺寸的猫咪图片，而当我们输入格式为<code>{width}x{height}</code>时，得到
标有图片尺寸的原型图。显然这涉及到逻辑判断，这时<code>Snippets</code>的正则功能已无能为力了，至少我没想到办法。</p>

<p>这时，<code>Sublime Text</code>提供给我们的插件功能就派上大用场了。</p>

<h2 id="section-1">正文</h2>

<p>我们在<code>Sublime Text</code>官网上可以了解到，在<code>Sublime Text</code>的早期版本中，作者原本打算将<code>Scheme</code>语言作为<code>Sublime Text</code>的插件开发语言，但考虑到<code>Scheme</code>语言方言多，使用人少且门槛高。后来调研后决定采用<code>Python</code>脚本语言作为插件开发语言，事后证明这一抉择是十分明智的，<code>Python</code>脚本语言易学易用，使用人群广泛，才有了如今<code>Sublime Text</code>插件开发活跃的生态圈。</p>

<p>有关<code>Sublime Text</code>的插件开发文档可参考<a href="http://docs.sublimetext.info/en/latest/reference/plugins.html">这里</a>、<a href="http://docs.sublimetext.info/en/latest/extensibility/plugins.html">这里</a>还有<a href="http://www.sublimetext.com/docs/3/api_reference.html">这里</a>，<a href="http://www.sublimetext.com/forum/">官网论坛</a>也是个很不错的学习交流的地方，在此就不多讲了。</p>

<p>本文要分享的是一个很简单的通过<code>tab</code>触发的插件，以整合<a href="http://placekitten.com/">placekitten</a>和<a href="http://placehold.it/">placehold.it</a>服务，具体触发机制如下：</p>

<ol>
  <li>输入<code>pi</code>后按<code>tab</code>键触发<a href="http://placehold.it/">placehold.it</a>服务，触发后可交互性指定图片占位符宽高了</li>
  <li>输入<code>pi{numbers}</code>后按<code>tab</code>键触发<a href="http://placehold.it/">placehold.it</a>服务，其中<code>{numbers}</code>为图片占位符的宽高（即占位符图片为正方形）</li>
  <li>输入<code>pi{width}x{height}</code>后按<code>tab</code>键触发<a href="http://placehold.it/">placehold.it</a>服务，其中<code>{width}</code>指定图片占位符的宽度，<code>{height}</code>指定图片占位符的高度，注意<code>{width}</code>和<code>{height}</code>之间是小写的<code>x</code></li>
  <li>输入<code>pi{width}X{height}</code>后按<code>tab</code>键触发<a href="http://placekitten.com/">placekitten</a>服务，其中<code>{width}</code>指定图片占位符的宽度，<code>{height}</code>指定图片占位符的高度，注意<code>{width}</code>和<code>{height}</code>之间是大写的<code>X</code></li>
</ol>

<p>具体例子如下：</p>

<p>在文档中输入<code>pi</code>后按<code>tab</code>键触发后返回如下标签，此时高亮显示<code>300x240</code>，可以交互性地指定宽高了，然后<code>tab</code>键跳至第2个编辑点可选择是否保留<code>width</code>和<code>height</code>属性</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://placehold.it/300x240&quot;</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;240&quot;</span> <span class="na">title=</span><span class="s">&quot;PLACE.IT: [300 x 240]&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在文档中输入<code>pi100</code>后按<code>tab</code>键触发后返回如下标签，同时可选择是否保留<code>width</code>和<code>height</code>属性</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://placehold.it/100x100&quot;</span> <span class="na">width=</span><span class="s">&quot;100&quot;</span> <span class="na">height=</span><span class="s">&quot;100&quot;</span> <span class="na">title=</span><span class="s">&quot;PLACE.IT: [100 x 100]&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在文档中输入<code>pi150x180</code>后按<code>tab</code>键触发后返回如下标签，同时可选择是否保留<code>width</code>和<code>height</code>属性</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://placehold.it/150x180&quot;</span> <span class="na">width=</span><span class="s">&quot;150&quot;</span> <span class="na">height=</span><span class="s">&quot;180&quot;</span> <span class="na">title=</span><span class="s">&quot;PLACE.IT: [150 x 180]&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在文档中输入<code>pi150X180</code>后按<code>tab</code>键触发后返回如下标签，同时可选择是否保留<code>width</code>和<code>height</code>属性</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://placekitten.com/150/180&quot;</span> <span class="na">width=</span><span class="s">&quot;150&quot;</span> <span class="na">height=</span><span class="s">&quot;180&quot;</span> <span class="na">title=</span><span class="s">&quot;KITTEN: [150 x 180]&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>废话不多说，最后附上相关代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>图片占位符插件 (PlaceImage.py)</span> <a href="http://myunlessor.me/downloads/code/PlaceImage.py">下载</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sublime_plugin</span><span class="o">,</span> <span class="nn">re</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">PlaceImageCommand</span><span class="p">(</span><span class="n">sublime_plugin</span><span class="o">.</span><span class="n">EventListener</span><span class="p">):</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">pi_snip</span> <span class="o">=</span> <span class="s">&#39;&lt;img src=&quot;http://placehold.it/${1:300x240}&quot;${2: width=&quot;${1/^(?:[^\d]*)?([\d]*)x?.*$/$1/i}&quot; height=&quot;${1/^(?:[^\d]*)([\d]*?)x?([\d]*)(?:[^x]*)?$/$+/i}&quot;}${4: title=&quot;${3:PLACE.IT: [${1/^(?:[^\d]*)?([\d]*)x?.*$/$1/i} x ${1/^(?:[^\d]*)([\d]*?)x?([\d]*)(?:[^x]*)?$/$+/i}]}&quot;} alt=&quot;${5:Edit Me}&quot; /&gt;&#39;</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">placeit</span> <span class="o">=</span> <span class="s">&#39;&lt;img src=&quot;http://placehold.it/</span><span class="si">%s</span><span class="s">x</span><span class="si">%s</span><span class="s">&quot;${1: width=&quot;</span><span class="si">%s</span><span class="s">&quot; height=&quot;</span><span class="si">%s</span><span class="s">&quot;}${3: title=&quot;${2:PLACE.IT: [</span><span class="si">%s</span><span class="s"> x </span><span class="si">%s</span><span class="s">]}&quot;} alt=&quot;${4:Edit Me}&quot; /&gt;&#39;</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">kitten</span>  <span class="o">=</span> <span class="s">&#39;&lt;img src=&quot;http://placekitten.com/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&quot;${1: width=&quot;</span><span class="si">%s</span><span class="s">&quot; height=&quot;</span><span class="si">%s</span><span class="s">&quot;} title=&quot;${2:KITTEN: [</span><span class="si">%s</span><span class="s"> x </span><span class="si">%s</span><span class="s">]}&quot; alt=&quot;${3:Edit Me}&quot; /&gt;&#39;</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s">r&#39;^pi(?:(\d+)(?:(x|X)(\d+))?)?$&#39;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">on_query_completions</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">view</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">locations</span><span class="p">):</span>
</span><span class="line">    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pattern</span><span class="p">,</span> <span class="n">prefix</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
</span><span class="line">      <span class="n">groups</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>
</span><span class="line">      <span class="n">numNil</span> <span class="o">=</span> <span class="n">groups</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">      <span class="c"># handle tab trigger: `pi`</span>
</span><span class="line">      <span class="k">if</span> <span class="n">numNil</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">        <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pi_snip</span>
</span><span class="line">
</span><span class="line">      <span class="c"># handle tab trigger: `pi{numbers}`</span>
</span><span class="line">      <span class="k">elif</span> <span class="n">numNil</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">        <span class="n">width</span>  <span class="o">=</span> <span class="n">groups</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="n">height</span> <span class="o">=</span> <span class="n">width</span>
</span><span class="line">        <span class="n">value</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">placeit</span> <span class="o">%</span> <span class="p">((</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">      <span class="c"># handle tab trigger: `pi{width}(x|X){height}`</span>
</span><span class="line">      <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">width</span>  <span class="o">=</span> <span class="n">groups</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="n">height</span> <span class="o">=</span> <span class="n">groups</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">        <span class="n">source</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">placeit</span> <span class="k">if</span> <span class="n">groups</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;x&#39;</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">kitten</span>
</span><span class="line">        <span class="n">value</span>  <span class="o">=</span> <span class="n">source</span> <span class="o">%</span> <span class="p">((</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">      <span class="n">value</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="p">[(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">value</span><span class="p">)]</span> <span class="k">if</span> <span class="n">value</span> <span class="k">else</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将此段代码直接保存到<code>Packages</code>目录下即可使用啦！</p>

<h2 id="section-2">参考</h2>
<ol>
  <li><a href="http://docs.sublimetext.info/en/latest/reference/plugins.html">Plugins Reference</a></li>
  <li><a href="http://docs.sublimetext.info/en/latest/extensibility/plugins.html">Plugins Usage</a></li>
  <li><a href="http://www.sublimetext.com/docs/3/api_reference.html">API Reference</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text Snippets实用技巧二则]]></title>
    <link href="http://myunlessor.me/blog/2013/12/16/pragmatic-sublime-text-snippets/"/>
    <updated>2013-12-16T18:22:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/12/16/pragmatic-sublime-text-snippets</id>
    <content type="html"><![CDATA[<p>由于<code>Sublime Text Snippets</code>功能设计的强大和灵活性（TAB跳转、多编辑点多选区支持、正则匹配替换等），我们可以很方便地将它应用到各种能用上它的场合。</p>

<p>关于<code>Sublime Text Snippets</code>的基本介绍可参见文章<a href="http://myunlessor.me/blog/2013/12/15/embrace-sublime-text-snippets/">拥抱Sublime Text Snippets</a>以及该文章给出的参考文档。</p>

<p>下面列举使用<code>snippet</code>的实用技巧，参详这两例子后，大可举一反三而为之。</p>

<!-- more -->

<h2 id="section">一、选区片段包裹</h2>

<p>现在前端开发环境少不了模板系统的使用，诣如<a href="https://github.com/janl/mustache.js">Mustache</a>、<a href="http://handlebarsjs.com/">Handlebars</a>、<a href="http://underscorejs.org/#template">Underscore</a>和<a href="http://lodash.com/docs#template">Lo-Dash</a>等。</p>

<p>模板系统一般都在模板上下文中内嵌<code>分隔符(delimiter)</code>进行解析，像<a href="http://underscorejs.org/#template">Underscore</a>和<a href="http://lodash.com/docs#template">Lo-Dash</a>默认有<code>&lt;%  %&gt;(interpolate delimiter)</code>、<code>&lt;%=  %&gt;(evaluate delimiter)</code>及<code>&lt;%-  %&gt;(escape delimiter)</code>，使用模板的时候书写这些分隔符尤显得不太方便。借助<code>Sublime Text Snippets</code>可以使书写模板不再头痛。</p>

<p>下面这个<code>snippet</code>我将它保存为<code>Packages/User/snippets/angle-delimiter.sublime-snippet</code>，你会注意到元素<code>snippet</code>中只包含<code>content</code>一个元素，在<code>content</code>中定义了两个跳转<code>编辑点(edit point)</code>，同时将环境变量<code>$SELECTION(文本选区)</code>作为<code>编辑点2($2)</code>的占位符。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;snippet&gt;</span>
</span><span class="line">  <span class="nt">&lt;content&gt;</span><span class="cp">&lt;![CDATA[</span>
</span><span class="line"><span class="cp">&lt;%$1 ${2:$SELECTION} %&gt;</span>
</span><span class="line"><span class="cp">]]&gt;</span><span class="nt">&lt;/content&gt;</span>
</span><span class="line"><span class="nt">&lt;/snippet&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样当我们选中文本(可以为空，单个或多个选区)后，触发该片段后就可以将选中文本包裹在<code>&lt;%</code>和<code>%&gt;</code>间，同时跳转到<code>编辑点1($1)</code>，可以选择性地添加<code>=</code>或<code>-</code>从而定义不同的<code>分隔符(delimiter)</code>。但是我并没有定义<code>tabTrigger</code>元素进行<code>tab</code>触发，原因是我们这里包含环境变量<code>$SELECTION(文本选区)</code>，使用<code>tabTrigger</code>无法达到片段包裹的目的，因此我们选择定义键盘快捷键来触发该片段，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;super+k&quot;</span><span class="p">,</span> <span class="s2">&quot;super+5&quot;</span><span class="p">],</span>
</span><span class="line">  <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;insert_snippet&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Packages/User/snippets/angle-delimiter.sublime-snippet&quot;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将此段代码加入到<code>Packages/User/Default (OSX).sublime-keymap</code>后，然后选中你想包裹的文本，此时先后按下快捷键<code>cmd + k</code>、及<code>cmd + 5</code>后可以触发该片段。Cool!</p>

<h2 id="section-1">二、正则匹配替换</h2>

<p>有时候我们进行页面重构的时候，需要使用占位图片进行临时布局。<a href="http://placekitten.com/">placekitten</a>提供了一个快速而简单的服务帮我们完成此目的。</p>

<p>比如我们需要在页面某个位置放置一个宽200高300的图片，只需要添加如下标签代码即可，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://placekitten.com/200/300&quot;</span> <span class="na">width=</span><span class="s">&quot;200&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">title=</span><span class="s">&quot;KITTEN: [200 x 300]&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后<code>placekitten</code>会给我们返回一张<code>200 x 300</code>的猫咪图片，我们只要指定任意宽高就好了，so cutely it is!</p>

<p>使用<code>Sublime Text Snippets</code>提供的正则区配替换特性，我们可以快速输出以上标签，使得图片占位更加称心如意。片段如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;snippet&gt;</span>
</span><span class="line">  <span class="nt">&lt;content&gt;</span><span class="cp">&lt;![CDATA[</span>
</span><span class="line"><span class="cp">&lt;img src=&quot;http://placekitten.com/${1:300/240}&quot;${2: width=&quot;${1/^\/?([^\/]+)\/?.*$/$1/}&quot; height=&quot;${1/^([^\/]*?)\/?([^\/]+)\/?$/$2/}&quot;} title=&quot;KITTEN: [${1/^\/?([^\/]+)\/?.*$/$1/} x ${1/^([^\/]*?)\/?([^\/]+)\/?$/$2/}]&quot; alt=&quot;&quot; /&gt;</span>
</span><span class="line"><span class="cp">]]&gt;</span><span class="nt">&lt;/content&gt;</span>
</span><span class="line">  <span class="nt">&lt;tabTrigger&gt;</span>kitten<span class="nt">&lt;/tabTrigger&gt;</span>
</span><span class="line">  <span class="nt">&lt;scope&gt;</span>text.html<span class="nt">&lt;/scope&gt;</span>
</span><span class="line"><span class="nt">&lt;/snippet&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将此片段保存到<code>Packages/User/snippets/placekitten.sublime-snippet</code>，然后在我们的html页面中敲入<code>kitten</code>后按<code>tab</code>键，输出标签如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://placekitten.com/300/240&quot;</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;240&quot;</span> <span class="na">title=</span><span class="s">&quot;KITTEN: [300 x 240]&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时<code>300/240</code>处于高亮显示，这是我们的第一个编辑点，在这个编辑点我们可以随意更改宽高值，可以看到<code>width</code>、<code>height</code>及<code>title</code>三个标签属性值跟着变化。</p>

<p>比如替换为<code>250</code>，标签显示为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://placekitten.com/250&quot;</span> <span class="na">width=</span><span class="s">&quot;250&quot;</span> <span class="na">height=</span><span class="s">&quot;250&quot;</span> <span class="na">title=</span><span class="s">&quot;KITTEN: [250 x 250]&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>替换为<code>400/300</code>，标签显示为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://placekitten.com/400/300&quot;</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">title=</span><span class="s">&quot;KITTEN: [400 x 300]&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们不需要<code> width="xxx" height="xxx"</code>，这里按<code>tab</code>跳至第二个编辑点，按<code>delete</code>键即可删除，awesome!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拥抱Sublime Text Snippets]]></title>
    <link href="http://myunlessor.me/blog/2013/12/15/embrace-sublime-text-snippets/"/>
    <updated>2013-12-15T17:07:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/12/15/embrace-sublime-text-snippets</id>
    <content type="html"><![CDATA[<p>用过<code>Sublime Text</code>很长一段时间，对它的<code>Snippets(片段)</code>功能却是情有独钟。</p>

<p>它的用法很简洁，在文档编辑点敲入定义的触发字符(<code>tabTrigger</code>)，然后按下<code>tab</code>键就可以输出预先定义的片段文字(<code>content</code>)。</p>

<!-- more -->

<h2 id="section">介绍</h2>

<p>片段是通过普通的XML格式文件进行定义的，文件扩展名为<code>sublime-snippet</code>，自定义的片段一般存放在<code>Packages/User/snippets</code>目录下。通过菜单命令<code>Tools | New Snippet...</code>进行创建，统一格式如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;snippet&gt;</span>
</span><span class="line">  <span class="nt">&lt;content&gt;</span><span class="cp">&lt;![CDATA[]]&gt;</span><span class="nt">&lt;/content&gt;</span>
</span><span class="line">  <span class="nt">&lt;tabTrigger&gt;&lt;/tabTrigger&gt;</span>
</span><span class="line">  <span class="nt">&lt;scope&gt;&lt;/scope&gt;</span>
</span><span class="line">  <span class="nt">&lt;description&gt;&lt;/description&gt;</span>
</span><span class="line"><span class="nt">&lt;/snippet&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>snippet</code>元素由以下4个元素构成：</p>

<ul>
  <li><code>content</code>: 实际片段内容</li>
  <li><code>tabTrigger(可选)</code>: 通过TAB键触发的代码片段的简短字符串，未指定时可通过绑定键盘快捷键触发该片段</li>
  <li><code>scope(可选)</code>: 指定触发激活该片段的作用域，如<code>text.html</code>、<code>js.source</code></li>
  <li><code>description(可选)</code>: <code>completions</code>补全提示时该片段的描述语</li>
</ul>

<p>当在<code>snippet</code>元素中包含了这些信息后，<code>Sublime Text</code>就知道什么何时可以触发，是否触发及在哪触发这个片段了。</p>

<p><code>content</code>中可以包含任意字符，包含的字符必须置于<code>&lt;![CDATA[</code>及<code>]]&gt;</code>之间，否则<code>Sublime Text</code>不知道如何解析它。</p>

<p>如果要输出符号<code>$</code>，则须转义为<code>\$</code>，因为符号<code>$</code>在<code>content</code>中有特殊作用，具体如下：</p>

<ul>
  <li>定义<code>环境变量名(environment variables)</code>，如<code>$SELECTION</code>，更多定义的环境变量参见<a href="http://docs.sublimetext.info/en/latest/reference/snippets.html#environment-variables">这里</a></li>
  <li>定义通过<code>tab</code>或<code>shift+tab</code>键进行编辑点位置跳转的<code>域(fields)</code>
    <ul>
      <li>语法：<code>$1</code> .. <code>$n</code></li>
    </ul>
  </li>
  <li>定义<code>占位符(placeholder)</code>，即带默认值的<code>域(fields)</code>
    <ul>
      <li>语法：<code>${1:占位符}</code> .. <code>${n:占位符}</code></li>
    </ul>
  </li>
  <li>定义正则替换，详细的语法定义参见<a href="http://docs.sublimetext.info/en/latest/reference/snippets.html#substitutions">这里</a>
    <ul>
      <li>语法 <code>${var_name/regex/format_string/}</code>, <code>${var_name/regex/format_string/options}</code></li>
    </ul>
  </li>
</ul>

<p><code>content</code>中不能直接键入字符串<code>]]&gt;</code>，如果片段要实际输入<code>]]&gt;</code>，可以书写为<code>]]$NOT_DEFINED&gt;</code>，这里的<code>$NOT_DEFINED</code>可以是任意未定义的环境变量，而未定义的环境变量解析为空字符串，因此可以达到输出<code>]]&gt;</code>的目的。</p>

<h2 id="section-1">用例</h2>

<p>定义并保存以下片段到<code>Packages/User/snippets/conditional-html-tag.sublime-snippet</code>后，就可以在<code>html</code>文件中键入<code>condhtml</code>后按<code>tab</code>键触发<code>content</code>中定义的内容了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;snippet&gt;</span>
</span><span class="line">  <span class="nt">&lt;content&gt;</span><span class="cp">&lt;![CDATA[</span>
</span><span class="line"><span class="cp">&lt;!--[if lt IE 7]&gt; &lt;html class=&quot;ie6&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class="line"><span class="cp">&lt;!--[if IE 7]&gt;    &lt;html class=&quot;ie7&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class="line"><span class="cp">&lt;!--[if IE 8]&gt;    &lt;html class=&quot;ie8&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class="line"><span class="cp">&lt;!--[if IE 9]&gt;    &lt;html class=&quot;ie9&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class="line"><span class="cp">&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt; &lt;html class=&quot;&quot;&gt; &lt;!--&lt;![endif]--&gt;</span>
</span><span class="line"><span class="cp">]]&gt;</span><span class="nt">&lt;/content&gt;</span>
</span><span class="line">  <span class="nt">&lt;tabTrigger&gt;</span>condhtml<span class="nt">&lt;/tabTrigger&gt;</span>
</span><span class="line">  <span class="nt">&lt;scope&gt;</span>text.html<span class="nt">&lt;/scope&gt;</span>
</span><span class="line"><span class="nt">&lt;/snippet&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>更多实用技巧参见文章<a href="http://myunlessor.me/blog/2013/12/16/pragmatic-sublime-text-snippets/">Sublime Text Snippets实用技巧二则</a>。</p>

<h2 id="section-2">参考</h2>
<ol>
  <li><a href="http://docs.sublimetext.info/en/latest/reference/snippets.html">Snippets Reference</a></li>
  <li><a href="http://docs.sublimetext.info/en/latest/extensibility/snippets.html">Snippets Usage</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[情逗Sublime Text]]></title>
    <link href="http://myunlessor.me/blog/2013/12/14/embrace-sublime-text/"/>
    <updated>2013-12-14T13:11:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/12/14/embrace-sublime-text</id>
    <content type="html"><![CDATA[<p>本是脑子里一闪而过的念头，停留之际，思绪暗涌，忽觉有必要整理下自己凌乱的思想了。</p>

<p>一直想明白现实是什么，可又不愿去理解。它是抽象的，或是跟上帝一样，是一种虚无的存在。</p>

<!-- more -->

<h2 id="section">游离</h2>

<p>人类是一种社会性的动物，挂着这层身份，少不了真假善恶、虚情假意。既然是社会性的，免不了体制化。体制决定了人的行为。试着以体制外人的身份来看待人的行为，免不了许多呵呵。可你到底仍处于体制内，于是也免不了一番自嘲了。</p>

<p>每个个体都是很奇妙的存在，有多少个体，就有多少内心在骚动。骚动的相互传播也就有了社会性。传播伴随着有害的和无害的，但每个人对有害和无害的定义不一样，这种差异性导致了所谓的平衡—-动荡的平衡是微妙的。</p>

<p>生和死是对反义词。如果生是天使，死即是恶魔。这种带入个人情感因素的类比，误解了对生死意义的评判，于是便有了个人偏见。好在每个人都有亲历生死的权利。</p>

<p>你认为你爱上了一个人，那是因为你的灵魂暂时复苏了。你认为你爱得死去活来，那是因为你的灵魂暂时出窍了。你认为你不会再爱了，那是因为你的灵魂暂时休克了。所有一切都是你认为，所有一切都是暂时的。</p>

<h2 id="section-1">梦醒</h2>

<p>Sublime Text诞生前，长途跋涉过UltraEdit、Edit Plus、Notepad++、Dreamweaver、VIM、Emacs。</p>

<p>遇到Sublime Text后，又走马观花过Brackets、Espresso、BBEdit、Coda 2、TextMate 2、WebStorm。</p>

<p>最后仍旧选择Sublime Text，它优雅、贴心，它是主角。</p>

<p>没有长途跋涉和走马观花的经历，你如何知道会为谁流连忘返？</p>

<p>你没有想过选择，你会认为你喜欢着现有的。</p>

<p>其实你有做出选择，你选择包容，你选择不讨厌。</p>

<p>你选择不做选择，你做了没做选择的选择。</p>

<p>你选择欺骗，你为欺骗埋下伏笔，种下借口。</p>

<p>你选择所谓的良知以平衡另外的“良知”，你选择以后再选择。</p>

<p>选择意味着出轨，出轨意味着背叛，背判意味着你接受对自我的审判和质问，不再是自我包容，不再是欺瞒。</p>

<p>虚拟现实，现实虚拟。</p>

<p>选择现实，选择虚拟，是纯情还是滥情？</p>

<p>滥情是为纯情，纯情是为无情，无情是为滥情。</p>

<p>无所谓滥情，无所谓纯情，无所谓无情，一切皆有情。</p>

<p>如果你懂，我不必解释。如果你不懂，你不会明白。</p>

<p>游离在规则之外的人，你害怕没有规则，却又怕束缚于规则。</p>

<p>很多貌似无懈可击的话，细想下来，又过又是一句新的毫无营养的废话。</p>

<p>我的存在是漫不经心的，我的思想是肤浅的。</p>

<p>再次自嘲一番，这次让我正经儿些。</p>

<h2 id="section-2">结语</h2>

<blockquote>
  <p>如果不知道一部电影好不好看，就给它10分钟的机会。如果10分钟之内你还可以走开，那么这电影就不值得看。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闭包陷阱：我中招了！]]></title>
    <link href="http://myunlessor.me/blog/2013/12/09/closure-caveat-it-got-me/"/>
    <updated>2013-12-09T21:37:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/12/09/closure-caveat-it-got-me</id>
    <content type="html"><![CDATA[<p>一直以来我都以为自己对js的闭包功能掌握的还算可以，最近在工作中却实实在在地被闭包整了一回，特记录于斯，以为警戒！</p>

<!-- more -->

<p>以下代码是从工作中提炼出来的，在这4个case中两次调用<code>howdy()</code>函数时log打印值分别是什么？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// closure caveat</span>
</span><span class="line">
</span><span class="line"><span class="c1">// case 1</span>
</span><span class="line"><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">$target</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">howdy</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$target</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$target</span> <span class="o">=</span> <span class="nx">$</span><span class="p">({})</span>
</span><span class="line">        <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">        <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;soga&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class="line">        <span class="p">});</span>
</span><span class="line">
</span><span class="line">      <span class="nx">$target</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;soga&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$target</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">howdy</span><span class="p">();</span>
</span><span class="line">  <span class="nx">howdy</span><span class="p">();</span>
</span><span class="line"><span class="p">})(</span><span class="k">this</span><span class="p">,</span> <span class="nx">jQuery</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// case 2</span>
</span><span class="line"><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">$target</span><span class="p">,</span> <span class="nx">x</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">howdy</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$target</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$target</span> <span class="o">=</span> <span class="nx">$</span><span class="p">({})</span>
</span><span class="line">        <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">        <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;soga&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class="line">        <span class="p">});</span>
</span><span class="line">
</span><span class="line">      <span class="nx">$target</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;soga&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$target</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">howdy</span><span class="p">();</span>
</span><span class="line">  <span class="nx">howdy</span><span class="p">();</span>
</span><span class="line"><span class="p">})(</span><span class="k">this</span><span class="p">,</span> <span class="nx">jQuery</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// case 3</span>
</span><span class="line"><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">$target</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">howdy</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$target</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$target</span> <span class="o">=</span> <span class="nx">$</span><span class="p">({}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;soga&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$target</span>
</span><span class="line">      <span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$target</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;soga&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">$target</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">howdy</span><span class="p">();</span>
</span><span class="line">  <span class="nx">howdy</span><span class="p">();</span>
</span><span class="line"><span class="p">})(</span><span class="k">this</span><span class="p">,</span> <span class="nx">jQuery</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// case 4</span>
</span><span class="line"><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">$target</span><span class="p">,</span> <span class="nx">x</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">howdy</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$target</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$target</span> <span class="o">=</span> <span class="nx">$</span><span class="p">({}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;soga&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$target</span>
</span><span class="line">      <span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$target</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;soga&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">$target</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;whatever&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">howdy</span><span class="p">();</span>
</span><span class="line">  <span class="nx">howdy</span><span class="p">();</span>
</span><span class="line"><span class="p">})(</span><span class="k">this</span><span class="p">,</span> <span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>总结：<code>prefer object properties to local variables when recording state!</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淘宝前端之智勇大闯关第三季攻略]]></title>
    <link href="http://myunlessor.me/blog/2013/08/15/alibaba-ued-quiz3-strategy/"/>
    <updated>2013-08-15T22:42:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/08/15/alibaba-ued-quiz3-strategy</id>
    <content type="html"><![CDATA[<p>今天在群里看到好多人都在玩这游戏，都玩得挺high，自己也点进链接玩了下，第一次玩这类游戏，觉得挺有意思的，遂记录下自己的玩法。</p>

<p>首先，<a href="http://ued.campus.alibaba.com/quiz3/index.php">游戏链接</a>如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http://ued.campus.alibaba.com/quiz3/index.php</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>该游戏一共有6关。</p>

<h2 id="section">第一关 —— 突破，带锁的门</h2>

<p>F12键打开控制台，输入以下代码，密码显现，按不同顺序尝试密码即可通关。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">[].</span><span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">Array</span><span class="p">(</span><span class="mi">11</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">),</span> <span class="nx">powder</span><span class="p">.</span><span class="nx">blow</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">powder</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">第二关 —— 激光，前进的方向</h2>

<p>该关主要调整id为ma和mb两挡板元素的位置和角度形成反射即可通关，在控制台输入以下代码即可：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">mas</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ma&#39;</span><span class="p">).</span><span class="nx">style</span><span class="p">,</span>
</span><span class="line">      <span class="nx">mbs</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;mb&#39;</span><span class="p">).</span><span class="nx">style</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">mas</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="s1">&#39;550px&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="nx">mas</span><span class="p">.</span><span class="nx">webkitTransform</span> <span class="o">=</span> <span class="s1">&#39;rotate(-82deg)&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">mbs</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="s1">&#39;430px&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="nx">mbs</span><span class="p">.</span><span class="nx">webkitTransform</span> <span class="o">=</span> <span class="s1">&#39;rotate(172deg)&#39;</span><span class="p">;</span>
</span><span class="line"><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">第三关 —— 坐标，隐藏的线索</h2>

<p>初看这个场景，看到三个定位角块，嗯这是二维码，但是是空白的，审查元素得知它是个canvas元素，需要画图将该二维码补充完整，在控制台输入以下代码完成：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="p">[].</span><span class="nx">filter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">8</span><span class="p">;</span>
</span><span class="line">  <span class="p">})[</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span><span class="p">.</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">));</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">})(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;qr-canvas&#39;</span><span class="p">).</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">第四关 —— 图案，疯狂的猜测</h2>

<p>本关类似于看图识字的游戏，在文本框输入图片对应的关键字即可，主要有以下这些：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">github</span>
</span><span class="line"><span class="nx">v</span>
</span><span class="line"><span class="nx">css</span> <span class="nx">sprite</span>
</span><span class="line"><span class="nx">stackoverflow</span>
</span><span class="line"><span class="nx">underscore</span>
</span><span class="line"><span class="nx">jade</span>
</span><span class="line"><span class="nx">ubuntu</span>
</span><span class="line"><span class="nx">php</span>
</span><span class="line"><span class="nx">less</span>
</span><span class="line"><span class="nx">wordpress</span>
</span><span class="line"><span class="nx">sublime</span> <span class="nx">text</span>
</span><span class="line"><span class="nx">w3</span>
</span><span class="line"><span class="nx">grunt</span>
</span><span class="line"><span class="nx">npm</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">第五关 —— 寻找，无尽的房间</h2>

<p>这关看得云里来雾里去，最开始一直更改url中查询字符串room的值，提示你不要人肉。控制台叫你用jquery通关，尝试许久，总结如下方法，在控制台运行后直接通关：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">loc</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">ready</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">      <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span>
</span><span class="line">      <span class="nx">t</span> <span class="o">=</span> <span class="nx">query</span><span class="p">(</span><span class="s1">&#39;t&#39;</span><span class="p">),</span>
</span><span class="line">      <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">query</span><span class="p">(</span><span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;[?&amp;]&#39;</span> <span class="o">+</span> <span class="nx">param</span> <span class="o">+</span> <span class="s1">&#39;=([^&amp;]*)&#39;</span><span class="p">).</span><span class="nx">exec</span><span class="p">(</span><span class="nx">loc</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">match</span> <span class="o">&amp;&amp;</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\+/g</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">));</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="p">(</span><span class="kd">function</span> <span class="nx">yoda</span><span class="p">(</span><span class="nx">next_room</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">loc</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;?&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">t</span><span class="o">:</span> <span class="nx">t</span><span class="p">,</span>
</span><span class="line">      <span class="nx">room</span><span class="o">:</span> <span class="nx">next_room</span>
</span><span class="line">    <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span>
</span><span class="line">          <span class="nx">nextRoom</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#next-room&#39;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span> <span class="o">+=</span> <span class="nx">msg</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">ready</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">url</span> <span class="o">+=</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span> <span class="o">===</span> <span class="s1">&#39;/quiz3/i&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">ready</span> <span class="o">=</span> <span class="o">!</span><span class="nx">ready</span><span class="p">;</span>
</span><span class="line">        <span class="nx">url</span> <span class="o">+=</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">nextRoom</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">yoda</span><span class="p">(</span><span class="nx">nextRoom</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">nextUrl</span> <span class="o">=</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;//&#39;</span> <span class="o">+</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="nx">url</span><span class="p">;</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s1">&#39;点击进入下一关^_^: &#39;</span> <span class="o">+</span> <span class="nx">nextUrl</span><span class="p">);</span>
</span><span class="line">        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">nextUrl</span><span class="p">;</span> <span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">  <span class="p">})(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#next-room&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
</span><span class="line"><span class="p">})(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nx">location</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-5">第六关 —— 消除! 最后的任务</h2>

<p>这关没想到什么好办法，浏览js文件<code>http://ued.campus.alibaba.com/quiz3/assets/js/step5.js</code>看到里面有<code>window.location</code>，于是直接在控制台输入如下代码，顺利通关：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">).</span><span class="nx">getAttributeNode</span><span class="p">(</span><span class="s1">&#39;data-p&#39;</span><span class="p">).</span><span class="nx">nodeValue</span><span class="p">;</span>
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">Base64</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photoshop趣味用法：玩转QQ找茬游戏]]></title>
    <link href="http://myunlessor.me/blog/2013/08/08/playing-zhao-cha-with-photoshop/"/>
    <updated>2013-08-08T22:52:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/08/08/playing-zhao-cha-with-photoshop</id>
    <content type="html"><![CDATA[<h2 id="section">引子</h2>

<p>相信不少童鞋都玩过QQ找茬游戏，游戏规则很简单：在2～4人的房间里，随机几组图片，每组图片分2张，找出每组图片中5处不同的地方，在规定的时间内谁找的茬多算谁赢。玩这个游戏的第一感觉就是各种眼花缭乱，我接受自己没有火眼金睛这一事实，在每组图规定的时间能平均能找出3个茬算是幸运之至了（我运气一向很差，无论做什么）。这样下来战绩总是令人沮丧，胜率老是上不去。尽管这些都是虚的，但心里多有不甘，于是就想到了一种投机取巧的办法——让Photoshop来充当自己的眼睛，自己则当指挥^_^。</p>

<!-- more -->

<p>其实最初用这方法玩找茬游戏还是三年前的事情了，只是近两天不知怎的突然心血来潮，有心将它记录下来留作纪念已矣。</p>

<h2 id="section-1">正文</h2>

<p>原理呢其实挺简单，找茬嘛就是找两张图的差异，这可是Photoshop最擅长做的事情啦（这也是我想到用它的原因）。在游戏过程中用Photoshop找茬需要解决的关键问题是如何做到迅速地让茬茬尽收眼底，显然Photoshop的Action最能胜任此类事情了。</p>

<p>如果Problem是输入的话，那么输出则是Solution。</p>

<p>现在的Problem是:</p>

<p><img src="http://myunlessor.me/images/muo_img/zhaocha/problem.jpg" /></p>

<p>而所谓的Solution的就是这样的(瞧，5茬尽收眼底！):</p>

<p><img src="http://myunlessor.me/images/muo_img/zhaocha/solution.jpg" /></p>

<p>从Problem出发，可以看出原图大小即为游戏窗口大小(<code>800 x 600</code>)，Solution中的结果图大小为原图中单张茬茬图的大小(<code>381 x 286</code>)，我们要做的就是从原图到结果图中的转换。</p>

<p>首先需要建一张<code>381 x 286</code>大小的纯黑色图片（比如将其保存为x.png，如下图）作为结果图的容器然后在Photoshop中打开。</p>

<p><img src="http://myunlessor.me/images/muo_img/zhaocha/x.png" /></p>

<p>Photoshop要想获取游戏窗口的截图，需要剪贴板作为中介，在<code>Windows</code>下按快捷键<code>Alt + Print Screen</code>将当前激活窗口（这里即为游戏窗口）拷贝至剪贴板，这时在Photoshop就可以按<code>Ctrl + V</code>或<code>F4</code>键将截图拷贝至图层。</p>

<p>第二步就是录制<code>Action</code>啦，一共分为8步，如下图:</p>

<p><img class="left" src="http://myunlessor.me/images/muo_img/zhaocha/zhaocha_action.png" /></p>

<ul>
  <li>粘贴：将通过<code>Alt + Print Screen</code>快捷键截取的游戏窗口粘贴到打开的<code>x.png</code>图片中作为图层</li>
  <li>图层对位：移动图层的位置使左张茬图完全显示在画布中</li>
  <li>复制图层：<code>Ctrl + J</code>复制图层到新的图层</li>
  <li>全选：<code>Ctrl + A</code>选区选中整个画布</li>
  <li>右对齐新复制的图层</li>
  <li>取消选择：<code>Ctrl + D</code>取消选区</li>
  <li>设置新复制图层的叠加模式为<code>Difference</code></li>
  <li>移位新复制图层使右张茬图与左张茬图重叠得到Solution所示效果</li>
</ul>

<p style="clear:both" />

<p>动作准备好后，玩游戏就是机械运动了：</p>

<ul>
  <li><code>Alt + Print Screen</code> 截取游戏窗口</li>
  <li>切换到Photoshop执行脚本</li>
  <li>点点点点点、然后换图继续执行第一步</li>
</ul>

<p>当然为了方便可以为动作设置快捷键。</p>

<p>我的做法，响应文件<code>Revert</code>事件：通过菜单命令<code>File | Scripts | Script Event Manager…</code>打开<code>脚本事件管理</code>弹出框，如下图，按以下方式进行设置：</p>

<p><img src="http://myunlessor.me/images/muo_img/zhaocha/script_events_manager_panel.png" /></p>

<ul>
  <li>勾选<code>Enable Events to Run Scripts/Actions</code></li>
  <li><code>Photoshop Event</code>下拉框选择<code>Add an Event…</code>添加自定义事件</li>
  <li>在打开的<code>Add an Event</code>弹出框中
    <ul>
      <li><code>Event Name</code>文本框填入<code>Revert</code></li>
      <li><code>Descriptive Label</code>文本框填入<code>Rvrt</code></li>
      <li>点击<code>OK</code>按钮完成添加</li>
    </ul>
  </li>
  <li><code>Photoshop Event</code>下拉框选择刚刚添加的<code>Event</code>事件</li>
  <li>选中单选框<code>Action</code>，然后选择之前刚录制的动作</li>
</ul>

<p>这时候<code>Alt + Print Screen</code> + <code>F12</code>的<code>“REPL”</code>完成，一切妥妥的、一切都变得机械！</p>

<h2 id="section-2">尾声</h2>

<p>当我利用这投机取巧的办法再次投入战斗时，真是屡试不爽、所向披靡。一相比较，游戏里的辅助道具实在弱爆了。我并不认为我这种玩法叫开挂，作弊一说也算勉强的了，晓之以理的讲法叫扬长避短、不亦乐乎。尽管缺失了些游戏的趣味性，但心理上得到的满足感却更强，这就够了。游戏说白了就是图个开心，每个人从中汲取开心的因子不一罢了。同时这也算是我用Photoshop比较有趣味的一种玩法吧！</p>

<p>P.S.：行文着实仓促!</p>

<h2 id="section-3">参考</h2>

<ol>
  <li><a href="http://tinyurl.com/kwmfjj9">Photoshop Programming Guide</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[import this 与恺撒密码]]></title>
    <link href="http://myunlessor.me/blog/2013/06/04/import-this-and-caesar-cipher/"/>
    <updated>2013-06-04T20:56:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/06/04/import-this-and-caesar-cipher</id>
    <content type="html"><![CDATA[<p>学过<code>python</code>脚本语言的人都知道<code>python</code>中有一个叫<code>this</code>的模块（<code>module</code>）。该模块只做了件很简单的事，打印一段字符串，内容是有关python语言的一些禅语（也可以称它为<code>python</code>哲学）。</p>

<!-- more -->

<p>要显示它很简单，在<code>python</code>的<code>REPL</code>（<code>Read-Eval-Print Loop</code>）中键入<code>import this</code>，可以看到如下字符串:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">The Zen of Python, by Tim Peters
</span><span class="line">
</span><span class="line">Beautiful is better than ugly.
</span><span class="line">Explicit is better than implicit.
</span><span class="line">Simple is better than complex.
</span><span class="line">Complex is better than complicated.
</span><span class="line">Flat is better than nested.
</span><span class="line">Sparse is better than dense.
</span><span class="line">Readability counts.
</span><span class="line">Special cases aren't special enough to break the rules.
</span><span class="line">Although practicality beats purity.
</span><span class="line">Errors should never pass silently.
</span><span class="line">Unless explicitly silenced.
</span><span class="line">In the face of ambiguity, refuse the temptation to guess.
</span><span class="line">There should be one-- and preferably only one --obvious way to do it.
</span><span class="line">Although that way may not be obvious at first unless you're Dutch.
</span><span class="line">Now is better than never.
</span><span class="line">Although never is often better than *right* now.
</span><span class="line">If the implementation is hard to explain, it's a bad idea.
</span><span class="line">If the implementation is easy to explain, it may be a good idea.
</span><span class="line">Namespaces are one honking great idea -- let's do more of those!</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我想，这个模块应该是<code>python</code>里最简单、也最特殊的模块罢！出于好奇，查看了下这个模块的源码，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>python哲学 (this.py)</span> <a href="http://myunlessor.me/downloads/code/this.py">下载</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;Gur Mra bs Clguba, ol Gvz Crgref</span>
</span><span class="line">
</span><span class="line"><span class="s">Ornhgvshy vf orggre guna htyl.</span>
</span><span class="line"><span class="s">Rkcyvpvg vf orggre guna vzcyvpvg.</span>
</span><span class="line"><span class="s">Fvzcyr vf orggre guna pbzcyrk.</span>
</span><span class="line"><span class="s">Pbzcyrk vf orggre guna pbzcyvpngrq.</span>
</span><span class="line"><span class="s">Syng vf orggre guna arfgrq.</span>
</span><span class="line"><span class="s">Fcnefr vf orggre guna qrafr.</span>
</span><span class="line"><span class="s">Ernqnovyvgl pbhagf.</span>
</span><span class="line"><span class="s">Fcrpvny pnfrf nera&#39;g fcrpvny rabhtu gb oernx gur ehyrf.</span>
</span><span class="line"><span class="s">Nygubhtu cenpgvpnyvgl orngf chevgl.</span>
</span><span class="line"><span class="s">Reebef fubhyq arire cnff fvyragyl.</span>
</span><span class="line"><span class="s">Hayrff rkcyvpvgyl fvyraprq.</span>
</span><span class="line"><span class="s">Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.</span>
</span><span class="line"><span class="s">Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.</span>
</span><span class="line"><span class="s">Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh&#39;er Qhgpu.</span>
</span><span class="line"><span class="s">Abj vf orggre guna arire.</span>
</span><span class="line"><span class="s">Nygubhtu arire vf bsgra orggre guna *evtug* abj.</span>
</span><span class="line"><span class="s">Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg&#39;f n onq vqrn.</span>
</span><span class="line"><span class="s">Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.</span>
</span><span class="line"><span class="s">Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg&#39;f qb zber bs gubfr!&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line"><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">65</span><span class="p">,</span> <span class="mi">97</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">26</span><span class="p">):</span>
</span><span class="line">        <span class="n">d</span><span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">((</span><span class="n">i</span><span class="o">+</span><span class="mi">13</span><span class="p">)</span> <span class="o">%</span> <span class="mi">26</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>呈现在眼前的不是一段平淡无奇的print语句，而采用了恺撒密码算法（<code>Caesar cipher</code>）。以下内容摘自维基百科，详见<a href="http://goo.gl/n9Ldz">凯撒密码</a>:</p>

<blockquote>
  <p>在密码学中,恺撒密码(或称恺撒加密、恺撒变换、变换加密)是一种最简单且最广为人知的加密技术。它是一种替换加密的技 术,明文中的所有字母都在字母表上向后(或向前)按照一个固定数目进行偏移后被替换成密文。例如,当偏移量是3的时候,所有的字母A将被替换成 D,B变成E,以此类推。这个加密方法是以恺撒的名字命名的,当年恺撒曾用此方法与其将军们进行联系。<br />
恺撒密码通常被作为其他更复杂的加密方法中的一个步骤,例如维吉尼尔密码。恺撒密码还在现代的 ROT13系统中被应用。但是 和所有的利用字母表进行替换的加密技术一样,恺撒密码非常容易被破解,而且在实际应用中也无法保证通信安全。</p>
</blockquote>

<p>可以看到，恺撒密码的原理很简单，对每个字母按照同一偏移量映射为别的字母，这样就完成了简单的加密。</p>

<p>看到<code>this</code>模块，我最大的感悟就是<code>python</code>语言优雅简洁的表达能力，我试过用<code>JavaScript</code>语言表达恺撒密码，实在为它感到汗颜。大概是因为<code>JavaScript</code>表达的废话太多，才催生了<code>CoffeeScript</code>这种比<code>JavaScript</code>更具表达力的语言吧。当然这得力于<code>CoffeeScript</code>大量借鉴<code>python、ruby</code>这种表达能力强的语言的语法才使然哩！</p>

<p><code>this.py</code>中用到的取余运算符<code>%</code>有一个很值得学习的技巧，比如我们想让一个变量在某个上限和下限范围内递增或递减，我们一般会写这样的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">lower</span>   <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">      <span class="nx">upper</span>   <span class="o">=</span> <span class="mi">17</span><span class="p">,</span>
</span><span class="line">      <span class="nx">current</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 单位递增</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">&lt;</span> <span class="nx">upper</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">current</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">current</span> <span class="o">=</span> <span class="nx">lower</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">current</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 单位递减</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">prev</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">&gt;</span> <span class="nx">lower</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">current</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">current</span> <span class="o">=</span> <span class="nx">upper</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">current</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// current = 15</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// current = 16</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// current = 17</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">());</span> <span class="c1">// current = 10</span>
</span><span class="line"><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>利用取余运算符<code>%</code>，我们可以将如上代码简化为如下（注意此时没有了<code>if</code>条件语句）:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">lower</span>   <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">      <span class="nx">upper</span>   <span class="o">=</span> <span class="mi">17</span><span class="p">,</span>
</span><span class="line">      <span class="nx">dist</span>    <span class="o">=</span> <span class="nx">upper</span> <span class="o">-</span> <span class="nx">lower</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">      <span class="nx">current</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">lower</span> <span class="o">+</span> <span class="p">(</span><span class="nx">current</span> <span class="o">-</span> <span class="nx">lower</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">dist</span><span class="p">)</span> <span class="o">%</span> <span class="nx">dist</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">prev</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">lower</span> <span class="o">+</span> <span class="p">(</span><span class="nx">current</span> <span class="o">-</span> <span class="nx">lower</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">dist</span><span class="p">)</span> <span class="o">%</span> <span class="nx">dist</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 13</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 12</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 11</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 10</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prev</span><span class="p">());</span> <span class="c1">// current = 17</span>
</span><span class="line"><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript异步代码排程策略]]></title>
    <link href="http://myunlessor.me/blog/2013/06/04/strategy-for-scheduling-javascript-asynchronous-code/"/>
    <updated>2013-06-04T19:06:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/06/04/strategy-for-scheduling-javascript-asynchronous-code</id>
    <content type="html"><![CDATA[<h2 id="section">问题</h2>

<p>写JavaScript脚本代码经常需要用到计时器(<code>window.setTimeout</code>)功能，先看如下代码片段：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// 先解析，但延时1000ms</span>
</span><span class="line"><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 后解析，但延时100ms</span>
</span><span class="line"><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>将该代码片段拷贝进Chrome浏览器的控制台(<code>Console</code>)中执行，可以发现在控制台中是先打印<code>bar</code>字符串，后打印<code>foo</code>字符串，也即是先执行了<code>bar</code>函数，后执行了<code>foo</code>函数。假如我们要让代码执行完<code>foo</code>函数后再执行<code>bar</code>函数，不难想到如下方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在控制台中测试发现这确实达到了我们的预期结果，但这种嵌套结构实在不优雅。当嵌套层级多时，代码可读性会变得相当差，试看如下代码片段：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">muo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">bar</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">yell</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;boo&#39;</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">bear</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">foo</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">muo</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">muo</span><span class="p">.</span><span class="nx">bar</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yell</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">bear</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">17</span><span class="p">);</span>
</span><span class="line">      <span class="p">},</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
</span><span class="line">  <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>相信没多少人喜欢读这种缺乏结构的代码。那么，有什么办法可以让上述代码变得优雅起来呢？这就涉及到异步代码排程的问题。</p>

<h2 id="section-1">策略</h2>

<p>在上述第一段代码中，<code>setTimeout</code>方法设定的延时在一定程度上可以看成是代码执行顺序的优先级，它打乱了先来后到的规则，延时短的比延时长的优先级高，在同一作用域内计时器代码执行的顺序与解析的顺序无关，这就产生了异步问题，可以类比为现实中的插队行为。我们这里要解决的就是这种异步排程问题，我们要确保先来后到的规则，先执行先被解析的代码，后执行后被解析的代码。</p>

<p>我们知道，在银行窗口办理业务时，我们得先取票排队，先取票的先为之服务，后取票的后服务。当然，这里只考虑只有一个窗口的情况。</p>

<p>类似的，要解决异步代码排程问题，我们可以把要执行的代码当成任务约束在队列中，先入队的先执行，后入队的后执行（即<code>FIFO</code>），且保证同一时间最多允许一个任务执行。基于以上分析，我们可以设计如下策略：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">schedule</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">paused</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// 标记状态</span>
</span><span class="line">      <span class="nx">queue</span>  <span class="o">=</span> <span class="p">[];</span>     <span class="c1">// 队列</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 入队</span>
</span><span class="line">  <span class="nx">self</span><span class="p">.</span><span class="nx">join</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">params</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">args</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">_</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">_</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span>
</span><span class="line">      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">context</span> <span class="o">||</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class="line">        <span class="nx">_</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span>
</span><span class="line">      <span class="p">},</span> <span class="nx">params</span><span class="p">.</span><span class="nx">delay</span> <span class="o">||</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nx">exec</span><span class="p">();</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="nx">self</span><span class="p">.</span><span class="nx">pause</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">paused</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>  <span class="c1">// 忙碌</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// ready and call next</span>
</span><span class="line">  <span class="nx">self</span><span class="p">.</span><span class="nx">resume</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">paused</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// 空闲</span>
</span><span class="line">    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">exec</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">exec</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">paused</span> <span class="o">&amp;&amp;</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()(</span><span class="nx">self</span><span class="p">);</span>  <span class="c1">// 出队</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">paused</span><span class="p">)</span> <span class="nx">self</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">self</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nx">self</span><span class="p">;</span>
</span><span class="line"><span class="p">}(</span><span class="nx">schedule</span> <span class="o">||</span> <span class="p">{}));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有了以上设计的排程规则，我们可以将如上多嵌套代码优雅地表达为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">muo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">bar</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">yell</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;boo&#39;</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">bear</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">schedule</span>
</span><span class="line">  <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">delay</span><span class="o">:</span> <span class="mi">1000</span> <span class="c1">// 延时</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">  <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">muo</span><span class="p">.</span><span class="nx">bar</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">delay</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class="line">    <span class="nx">context</span><span class="o">:</span> <span class="nx">muo</span> <span class="c1">// this解析上下文</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">  <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">muo</span><span class="p">.</span><span class="nx">bar</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">delay</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">    <span class="nx">context</span><span class="o">:</span> <span class="nx">yell</span> <span class="c1">// this解析上下文</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">  <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">bear</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">delay</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">    <span class="nx">args</span><span class="o">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">17</span><span class="p">]</span> <span class="c1">// 为bear函数提供参数</span>
</span><span class="line">  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">参考</h2>

<ul>
  <li><a href="http://goo.gl/1A8ew">Secrets of the JavaScript Ninja</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Photoshop: 将整图一分为九]]></title>
    <link href="http://myunlessor.me/blog/2013/05/20/divide-slice-by-using-photoshop-scripts/"/>
    <updated>2013-05-20T20:31:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/05/20/divide-slice-by-using-photoshop-scripts</id>
    <content type="html"><![CDATA[<h2 id="section">引子</h2>

<p>前些天一同事在做拼图游戏。设计师提供了很多素材图片给他，这些图片都是整张整张的，他需要将这些图片切图成九宫格(3 x 3)、十六宫格(4 x 4)、二十五宫格(5 x 5)等。如果单张单张地进行计算然后裁切肯定不现实，那样实在效率低下，然后他问我有没快捷方法可以帮助他。</p>

<!-- more -->

<h2 id="section-1">思路一(动作)</h2>

<p>我们切图一般都在<code>photoshop</code>中完成。以往我遇到这种大量的重复性工作时，我绝对不会坐以待毙，我会想方设法，不达目的绝不罢休。通常面对这种问题时，我首先想到的就是生成一个<code>action</code>(动作)，然后利用它批量完成。</p>

<p>该<code>action</code>(动作)的大致思路是将各宫格图片分散到不同的图层中，然后便可以通过菜单命令<code>File | Scripts | Export Layers to Files…</code>将图层一一导出为文件，具体如下：</p>

<ul>
  <li>计算一张图片的三等分宽高，生成并保存选区</li>
  <li>将选区定位在图片左上角，然后通过菜单命令<code>Layer | New | Layer via Cut(Copy)</code>将该区域隔离到新的图层</li>
  <li>重新载入选区，移位选区至新的位置，执行第二步同样命令</li>
  <li>重复执行第三步，直到图片九等分分散在不同图层</li>
</ul>

<p>但是，生成这样的动作不仅麻烦，而且也不甚高效，原因如下：</p>

<ul>
  <li>需要为九宫格(3 x 3)、十六宫格(4 x 4)、二十五宫格(5 x 5)不同规格生成不同的动作</li>
  <li>其他原因忘了~^~…</li>
</ul>

<p>于是这种思路只成为了一种念想，一闪即过。</p>

<h2 id="section-2">思路二(切片工具)</h2>

<p>然后有考虑利用<code>Divide Slice…</code>(划分切图)及<code>Slices from Guides</code>(辅助线自动生成切片)功能——一种传统古老的切图方式。然后通过菜单命令<code>File | Save for Web…</code>将各切片导出为图片。这种方式可行是可行，但事实是提供的图片不是很理想，宫格中有1个像素的透明<code>gutter</code>(间隙)。如果不考虑<code>gutter</code>(间隙)的话，九宫格切图只需四条均分辅助线，否则需要八条，这样就会导出很多垃圾图片——1像素宽或(和)1像素高的图。这样效果不是很理想(自许准理想主义者)，于是这种方法也不了了之了。</p>

<blockquote>
  <p>事实是，这种方法确实可行，考虑四条均分辅助线生成切片，最后可以生成个<code>action</code>(动作)对这些图片做最后的<code>sanitization</code>(“消毒处理”)，傻眼了当时…</p>
</blockquote>

<h2 id="section-3">思路三(脚本)</h2>

<p>最后，不得不实施<code>Last Resort</code>(破釜沉舟之计)。我想到了脚本语言(事实是，原来我调侃同事用写段<code>Java</code>代码生成图片…^-^)，<code>photoshop</code>自带的脚本功能(支持<code>JavaScript</code>、<code>VBScript</code>、<code>AppleScript</code>三种脚本语言)做这类事可谓游刃有余，一段简短的代码就可以干净利落地解决它，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>划分切图脚本 (divide_slice.js)</span> <a href="http://myunlessor.me/downloads/code/divide_slice.js">下载</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="err">#</span><span class="nx">target</span> <span class="nx">photoshop</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">preferences</span><span class="p">.</span><span class="nx">rulerUnits</span> <span class="o">!==</span> <span class="nx">Units</span><span class="p">.</span><span class="nx">PIXELS</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// 采用像素单位进行计算</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">preferences</span><span class="p">.</span><span class="nx">rulerUnits</span> <span class="o">=</span> <span class="nx">Units</span><span class="p">.</span><span class="nx">PIXELS</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 当前文档引用</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">docRef</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">activeDocument</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 文档宽度</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">docWidth</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class="line"><span class="c1">// 文档高度</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">docHeight</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 细分次数(默认 3 x 3，即九宫格切分)</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">divides</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 宫格间隙(默认无间隙)</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">gutter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 每宫格宽度</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">slotWidth</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">docWidth</span> <span class="o">/</span> <span class="nx">divides</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 每宫格高度</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">slotHeight</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">docHeight</span> <span class="o">/</span> <span class="nx">divides</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 保存当前图层(即整图)引用</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">layerRef</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">activeLayer</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 遍历行</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">docWidth</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">-=</span> <span class="nx">slotHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// 遍历列</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">docHeight</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">-=</span> <span class="nx">slotWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// 重置当前图片为原图层(即整图)</span>
</span><span class="line">    <span class="nx">docRef</span><span class="p">.</span><span class="nx">activeLayer</span> <span class="o">=</span> <span class="nx">layerRef</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 从右往左、从下往上设置选区</span>
</span><span class="line">    <span class="nx">docRef</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">select</span><span class="p">([</span>
</span><span class="line">      <span class="p">[</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">slotWidth</span><span class="p">,</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">slotHeight</span><span class="p">],</span> <span class="c1">// 左</span>
</span><span class="line">      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">slotHeight</span><span class="p">],</span>  <span class="c1">// 上</span>
</span><span class="line">      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">],</span> <span class="c1">// 右</span>
</span><span class="line">      <span class="p">[</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">slotWidth</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="c1">// 下</span>
</span><span class="line">    <span class="p">],</span> <span class="nx">SelectionType</span><span class="p">.</span><span class="nx">REPLACE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// layer via copy ^-^</span>
</span><span class="line">    <span class="nx">docRef</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">copy</span><span class="p">();</span>
</span><span class="line">    <span class="nx">docRef</span><span class="p">.</span><span class="nx">artLayers</span><span class="p">.</span><span class="nx">add</span><span class="p">();</span>
</span><span class="line">    <span class="nx">docRef</span><span class="p">.</span><span class="nx">paste</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 水平轴向间隙偏移</span>
</span><span class="line">    <span class="nx">x</span> <span class="o">-=</span> <span class="nx">gutter</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// 垂直轴向间隙偏移</span>
</span><span class="line">  <span class="nx">y</span> <span class="o">-=</span> <span class="nx">gutter</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 删除原图层(即整图)</span>
</span><span class="line"><span class="nx">layerRef</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用法很简单，只需下载这段脚本到本地，打开需要切分的图片，然后执行菜单命令<code>File | Scripts | Browse…</code>，在打开的弹出框中找到该脚本，双击执行即可。
r
如果要处理的图片很多的话，配合动作使用即可实现批处理。</p>

<h2 id="section-4">参考书目</h2>

<ol>
  <li><a href="http://goo.gl/IFQav">Photoshop CS6 Scripting Guide</a></li>
  <li><a href="http://goo.gl/ukIhf">Photoshop CS6 JavaScript Ref</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文件批处理那些事儿]]></title>
    <link href="http://myunlessor.me/blog/2013/05/19/file-batch-stuff/"/>
    <updated>2013-05-19T11:14:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/05/19/file-batch-stuff</id>
    <content type="html"><![CDATA[<h2 id="section">引子</h2>

<p>在日常工作中我们无疑会碰到形形色色的针对文件操作的重复性工作，比如说批量复制、批量替换、批量重命名、批量删除文件或文件夹等的机械活。机械意味着我们不应该执拗于手工地去完成它们，我们需要<strong>尽力</strong>地从中摆脱出来。</p>

<p>之前做过批量重命名的活，在那之前经常用<code>Adobe Bridge</code>用于文件管理，知道其中就有个叫<code>Batch Rename</code>的工具。我很推荐使用它，但它有个缺点，只能针对文件进行重命名，对文件夹无效。但瑕不掩瑜，它真的很棒，能出色地完成我指定规则的重命名工作。</p>

<p>之后为了应对文件批操作，我写了个<code>文件批处理小工具</code>。我对这玩意的评价是，它只能处理很窄范围的特点需求，稍微来点需求变更，它便束手无策、黯然失色。顺便再吐嘈一句，我用了把牛刀干了件杀鸡的事。</p>

<!--more-->

<p>直到最近做了些很坑爹的事，我们一直给设计部的设计变更擦屁股这话就不提了。橙视圈十二生肖和十二星座两个应用被改版得几尽与原先版本脱节，数据已不由后台接口提供，得自己手活制造一大批json序列文件用于界面查询，算下来有接近3k个文件。开始重复地做复制、重命名文件、填充数据，依此反复，一下午时间弄完不到400个文件。</p>

<p>这样下去可不是办法，久闻shell命令名不虚传，稍试了下水，便惊叹shell的无底深渊，一些简单的命令便帮我完成了一些不简单的事。</p>

<h2 id="section-1">正题</h2>

<p>假如我有一个名叫<code>template.json</code>的json模板数据文件，文件内容如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="nt">&quot;result&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="nt">&quot;dataArea&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nt">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我要生成一堆类似<code>a_0.json、a_1.json...d_4.json</code>这样的序列文件，同时文件都包含<code>template.json</code>的内容，手活的话我会先复制一堆<code>template.json</code>文件，然后一个个重命名得到期望的序列文件，这真的很累。可是若借助shell命令的魔力，简直不费吹灰之力。</p>

<p>我们都知道<code>cp</code>是拷贝文件命令，例如在终端下执行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&gt; cp template.json a_0.json
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么在<code>template.json</code>文件的所在目录下将得到一个名为<code>a_0.json</code>的文件，内容与<code>template.json</code>一模一样。</p>

<p>那么如何批量生成一堆这样的序列文件呢？这意味着我们要重复执行<code>cp</code>命令，但每次执行时上述例子中指定的目标文件（<code>a_0.json</code>）要相应改变，这跟每次传入不同参数调用相同函数很有些类似。<code>xargs</code>命令就是帮助你做这件事的，以下是对xargs命令的简短介绍：</p>

<blockquote>
  <p><code>xargs</code>命令被用来构造参数列表并调用其他命令(工具)，它从标准输入流（<code>standard input</code>）或管道(<code>pipes</code>)中读取以空格或换行分隔的东西，这些读取的东西可以被当作其所调用的命令的参数传入，执行该命令一次或多次。</p>
</blockquote>

<p>可以看出，<code>xargs</code>命令其实不<strong>干实事</strong>，它旨在督导和帮助其他一些<strong>干实事</strong>的命令（比如<code>cp、mdkir、mv、rm</code>等）重复做事，从而让那些<strong>干实事</strong>的命令尽显其能，这正是<code>xargs</code>本身的价值所在。那么如何使用它呢？请看以下这个例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&gt; <span class="nb">echo </span>a_1.json a_2.json | xargs -n 1 -I <span class="o">{}</span> cp template.json <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行以上命令后，可以看到<code>template.json</code>文件的所在目录下多了两个名字分别为<code>a_1.json、a_2.json</code>的文件，并且内容也和<code>template.json</code>一模一样。</p>

<p>对以上命令的一些解释：</p>

<ul>
  <li><code>echo a_1.json a_2.json</code>表示<code>echo</code>两个以空格分隔的字符串到输出流</li>
  <li><code>|</code>表示管道，可以理解为将前一命令的输出流重定向到下一命令的输入流中，这有些类似于将函数调用得到的值作为参数传入到别一函数中</li>
  <li><code>xargs</code>中重复调用<code>cp</code>命令，选项<code>-n 1</code>表过每次调用时只使用一个参数，并且<code>-I {}</code>像声明参数名一样，<code>cp template.json {}</code>中的<code>{}</code>正是使用该参数的位置</li>
</ul>

<p>其结果是<code>cp</code>命令被执行了两次，第一次将<code>a_1.json</code>替换<code>{}</code>被执行，第二次将<code>a_2.json</code>替换<code>{}</code>被执行，于是实现了两次复制操作。我说了这和函数调用没什么两样。</p>

<p>还是回到之前的问题，怎么批量生成序列文件呢？我们现在找到了批量执行<code>cp</code>命令的方法，现在的问题简化到如何生成序列字符串的问题。很简单，看如下例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&gt; <span class="nb">echo</span> <span class="o">{</span>1..10<span class="o">}</span>
</span><span class="line">1 2 3 4 5 6 7 8 9 10
</span><span class="line">
</span><span class="line">&gt; <span class="nb">echo</span> <span class="o">{</span>a..g<span class="o">}</span>
</span><span class="line">a b c d e f g
</span><span class="line">
</span><span class="line">&gt; <span class="nb">echo</span> <span class="o">{</span>a..d<span class="o">}</span>_<span class="o">{</span>1..4<span class="o">}</span>.json
</span><span class="line">a_1.json a_2.json a_3.json a_4.json
</span><span class="line">b_1.json b_2.json b_3.json b_4.json
</span><span class="line">c_1.json c_2.json c_3.json c_4.json
</span><span class="line">d_1.json d_2.json d_3.json d_4.json
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看到规律了吧？以下是在<code>template.json</code>文件所在目录的子目录<code>seqs</code>下生成序列文件的命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&gt; mkdir -p seqs
</span><span class="line">&gt; <span class="nb">echo</span> <span class="o">{</span>a..d<span class="o">}</span>_<span class="o">{</span>1..4<span class="o">}</span>.json | xargs -n 1 -I <span class="o">{}</span> cp template.json seqs/<span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">一些小实践</h2>

<p>下面是我实践过的一些例子，大家可自行实践，方法跟上面所讲的大同小异。</p>

<h3 id="section-3">1.应用打包批处理</h3>

<p>假如终端当前工作子目录为<code>works</code>，在该目录下有如下结构：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">works
</span><span class="line">  |__ source_files      <span class="o">[</span>应用源文件放置目录<span class="o">]</span>
</span><span class="line">  |   |__ riddle           <span class="o">[</span>我爱猜谜语<span class="o">]</span>
</span><span class="line">  |   |__ brain_twists     <span class="o">[</span>脑筋急转弯<span class="o">]</span>
</span><span class="line">  |   |__ train_tickets    <span class="o">[</span>火车票查询<span class="o">]</span>
</span><span class="line">  |
</span><span class="line">  |__ package_files     <span class="o">[</span>应用打包放置目录<span class="o">]</span>
</span><span class="line">  |
</span><span class="line">  |__ package_template  <span class="o">[</span>打包模板结构文件目录<span class="o">]</span>
</span><span class="line">      |__ draw
</span><span class="line">      |   |__ icon
</span><span class="line">      |   |__ poster
</span><span class="line">      |__ assets
</span><span class="line">          |__brolife    <span class="o">[</span>应用放置根目录<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们要将<code>source_files</code>目录下的所有应用打包放置在<code>package_files</code>目录下，可执行如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 在应用打包目录下建立相应的应用文件夹</span>
</span><span class="line">&gt; ls source_files | xargs -n 1 -I <span class="o">{}</span> mkdir -p package_files/<span class="o">{}</span>
</span><span class="line">
</span><span class="line"><span class="c"># 拷贝文件夹需要带上`-a`或`-pPR`选项表示递归拷贝</span>
</span><span class="line">&gt; ls source_files | xargs -n 1 -I <span class="o">{}</span> cp -a package_temptate/* package_files/<span class="o">{}</span>
</span><span class="line">
</span><span class="line"><span class="c"># 将应用拷贝至相应的`brolife`文件夹中</span>
</span><span class="line">&gt; ls source_files | xargs -n 1 -I <span class="o">{}</span> cp -a source_files/<span class="o">{}</span> package_files/<span class="o">{}</span>/assets/brolife
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">2.应用解包</h3>

<p>应用解包即是将应用从各用的<code>brolife</code>文件夹中拷贝出至统一的路径，原理跟打包都差不多，时间关系不允罗列相应命令。</p>

<h3 id="htm">3.过滤应用中的<code>.htm</code>文件</h3>
<p>只拷贝出应用中的<code>.htm</code>文件，其他文件全部忽略，这项操作需要用到find命令，时间关系不允过多解释。下面是一个使用的小例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 查找当前目录及其子目录下所有以`.htm`后缀结尾的所有文件</span>
</span><span class="line">&gt; find . -name <span class="s2">&quot;*.htm&quot;</span> -type f
</span><span class="line">
</span><span class="line"><span class="c"># 查找`~myunlessor/Desktop/riddle`目录及其子目录下所有以`.jpg`或`.png`后缀结尾的文件</span>
</span><span class="line">&gt; find ~myunlessor/Desktop/riddle <span class="se">\(</span> -name <span class="s2">&quot;*.jpg&quot;</span> -or -name <span class="s2">&quot;*.png&quot;</span> <span class="se">\)</span> -type f
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-5">小结</h2>

<p>从以上例子可以看到有了<code>xargs</code>命令及管道后，这些朴素的<strong>干实事</strong>的命令像脱胎换骨了一样，相当强大。千里之行，始于足下！</p>

<h2 id="section-6">附录</h2>

<p>以上所讲的文件批处理解决方案都依赖于*NIX环境的shell，但我们工作在windows平台上<sup id="fnref:fn1"><a href="#fn:fn1" rel="footnote">1</a></sup>，说这些有什么意义呢？没关系，我们有<a href="http://www.cygwin.com/">Cygwin</a>，它在windows平台下极力模拟Linux环境，让我们可以在windows下使用Linux的一些实用工具。它的标语是：</p>

<blockquote>
  <p>Get that Linux feeling - on Windows!</p>
</blockquote>

<p>猛击<a href="http://cygwin.com/setup.exe">这里</a>下载安装使用起来吧！</p>

<div class="footnotes">
  <ol>
    <li id="fn:fn1">
      <p>Windows平台下有PowerShell，没使用过，但我想它也应该很擅长做这类事吧！<a href="#fnref:fn1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
