<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: localstorage | Silent Reverie]]></title>
  <link href="http://myunlessor.me/blog/categories/localstorage/atom.xml" rel="self"/>
  <link href="http://myunlessor.me/"/>
  <updated>2016-08-14T02:34:10+08:00</updated>
  <id>http://myunlessor.me/</id>
  <author>
    <name><![CDATA[俞乐]]></name>
    <email><![CDATA[myunlessor@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[缓存JS代码到本地localStorage的一种思路]]></title>
    <link href="http://myunlessor.me/blog/2016/08/15/cache-javascript-code-to-localstorage/"/>
    <updated>2016-08-15T11:22:00+08:00</updated>
    <id>http://myunlessor.me/blog/2016/08/15/cache-javascript-code-to-localstorage</id>
    <content type="html"><![CDATA[<p>为了加快页面的加载速度和交互速度，缓存JS脚本文件内容到本地<code>localStorage</code>（以下简称<code>缓存JS</code>）是一种行之有效的手段。</p>

<p>以加载<code>foo.js</code>文件为例，<code>缓存JS</code>的逻辑大致如下：</p>

<p><img src="/images/cachejs2localstorage/cache-to-local.png"></p>

<!-- more -->

<p>在实际应用中，<code>缓存JS</code>需要解决以下两个问题：</p>

<ul>
  <li>获取JS脚本文件的内容并写入缓存</li>
  <li>JS脚本文件的内容变化时自动更新缓存</li>
</ul>

<h2 id="js">获取JS脚本文件的内容并写入缓存</h2>

<p>前端JS文件一般使用单独的域名存放到CDN上，跨域问题使得我们无法通过ajax请求获取JS文件的内容。</p>

<p>那有其他办法可以获取脚本文件的内容吗？答案是有的。</p>

<p>以<code>https://www.xxx.com/static/js/foo.js</code>为例，其文件内容如下：</p>

<p><code>js
console.log('first line');
console.log('second line');
</code></p>

<p>大家都知道，函数是可以转换成字符串类型的，因此我们可以这种方式获取函数本身的代码，如下所示：</p>

<p>```js
function foo() {
  console.log(‘first line’);
  console.log(‘second line’);
}</p>

<p>// 函数转换为字符串 =&gt; 函数代码的字符串形式
console.log(String(foo));</p>

<p>// 也可以这样调用得到
console.log(foo.toString());
```</p>

<p>得到函数完整的字符串代码后，需要将字符串进行剥离，只获取得到body部分，这一步可以使用正则表达式将body匹配出来：</p>

<p>```js
// 正则表达式匹配完整的函数语句
// 这里使用<code>^</code>和<code>$</code>匹配头尾，匹配性能不成问题
var rfunc = /^function\s<em>(?:[^(]</em>)(([^)]<em>))\s</em>{([\s\S]*)}$/;</p>

<p>// 变量<code>code</code>存放的就是<code>foo.js</code>的代码内容
var code = String(foo).match(rfunc) &amp;&amp; RegExp.$2;
console.log(code);
```</p>

<p>所以，将原代码包裹一层<code>function</code>，我们可以成功拿到任意脚本文件的内容，而完全不用关心是否存在跨域问题。</p>

<p>于是我们可以将原先的<code>foo.js</code>自动转换成如下形式，这一步实际可以通过构建（打包）工具（如<code>webpack</code>）自动完成。</p>

<p>```js
// 自执行函数
void function (fn) {
  // 执行代码逻辑
  fn.call(function () { return this; }());</p>

<p>var rfunc = /^function\s<em>(?:[^(]</em>)(([^)]<em>))\s</em>{([\s\S]*)}$/;
  var code = String(fn).match(rfunc) &amp;&amp; RegExp.$2;</p>

<p>// TODO: 将<code>code</code>写入到<code>localStorage</code>中（见下文）
}(function () {
  console.log(‘first line’);
  console.log(‘second line’);
});
```</p>

<h2 id="js-1">JS脚本文件的内容变化时自动更新缓存</h2>

<p>我们可以通过计算文件内容的md5值，然后取md5值前面若干位作为文件的版本号拼到文件名中（如<code>foo.09c1ff3231.js</code>、<code>foo.b9193b0ded.js</code>等），以此标记文件内容发生了变化。</p>

<p>假设<code>foo.09c1ff3231.js</code>是旧版本文件，<code>foo.b9193b0ded.js</code>是新版本文件，用流程图可以清晰地呈现缓存自动更新的过程：</p>

<p><img src="/images/cachejs2localstorage/update-cache-to-local.png"></p>

<h2 id="section">实际应用</h2>

<p>在实际应用中，我们可以将缓存相关的逻辑封装到普通对象（如命名为<code>StoreManager</code>，并保存为文件<code>store-manager.js</code>，该对象应实现如下几个功能：</p>

<ul>
  <li>获取指定脚本文件名的缓存内容</li>
  <li>判断是否已缓存指定版本号的文件内容</li>
  <li>将指定版本号的文件内容写入到缓存（或替换掉已缓存版本）</li>
  <li>将指定脚本文件名的内容从缓存中移除</li>
  <li>清理已过期的缓存内容（可选）</li>
</ul>

<p>以下是<code>StoreManager</code>的实现代码：</p>

<p>```js
void function (global) {
  var storage = global.localStorage;</p>

<p>// 缓存js时存储的key使用统一的前缀作为命名空间
  // 这样方便管理及尽可能避免冲突
  var prefix = ‘store-manager/js/’;</p>

<p>// 匹配版本号(8~12位)
  var rkey = /^(.+).(\w{8,20}).js$/;</p>

<p>// 默认缓存时长
  // 30 days (单位：小时)
  var defaultExpiration = 30 * 24;</p>

<p>var store = {
    // 获取指定脚本文件名的缓存内容
    get: function (key) {
      var item = storage.getItem(prefix + key);
      try {
        return JSON.parse(item || ‘false’);
      } catch (e) {
        return false;
      }
    },</p>

<pre><code>// 判断是否已缓存指定版本号的文件内容
has: function (md5key) {
  var matches = String(md5key).match(rkey);
  return matches ? (this.get(matches[1]).md5 === matches[2]) : false;
},

// 将指定版本号的文件内容写入到缓存（或替换掉已缓存版本）
set: function (md5key, code, opts) {
  var matches = String(md5key).match(rkey);

  if (matches) {
    var now = +new Date;
    var storeKey = prefix + matches[1];

    opts || (opts = {});

    var storeVal = {
      'md5': matches[2],
      'stamp': now,
      'expire': (now + (opts.expire || defaultExpiration) * 60 * 60 * 1000),
      'code': code,
    };

    storage.setItem(storeKey, JSON.stringify(storeVal));
  }

  return this;
},

// 将指定脚本文件名的内容从缓存中移除
remove: function (key) {
  storage.removeItem(prefix + key);
  return this;
},

// 清理（已过期的）缓存内容
clear: function (expired) {
  var now = +new Date;

  for (var item in storage) {
    var key = item.replace(prefix, '');

    if (key &amp;&amp; (!expired || this.get(key).expire &lt;= now)) {
      this.remove(key);
    }
  }

  return this;
},   };
</code></pre>

<p>// 导出为全局变量
  // 注：一旦我们的脚本重命名后，缓存的旧版本会失去跟踪，
  // 执行<code>clear(true)</code>，这样失去跟踪的缓存内容过期后能够得到清理
  global.StoreManager = store.clear(true);</p>

<p>}(function () { return this; }());
```</p>

<p>有了<code>StoreManager</code>对象后，我们就可以轻松地<code>缓存JS</code>了。</p>

<ul>
  <li>源文件<code>foo.js</code>：</li>
</ul>

<p><code>js
console.log('line 1');
console.log('line 2');
</code></p>

<ul>
  <li>通过构建（打包）工具得到<code>foo.b9193b0ded.js</code>(这里md5随便取的名，实际代码应该需要精简)：</li>
</ul>

<p>```
// 自执行函数
void function (fn) {
  // 执行代码逻辑
  fn.call(function () { return this; }());</p>

<p>// 容错检测
  if (typeof StoreManager === ‘object’ &amp;&amp; StoreManager) {
    var rfunc = /^function\s<em>(?:[^(]</em>)(([^)]<em>))\s</em>{([\s\S]*)}$/;
    var code = String(fn).match(rfunc) &amp;&amp; RegExp.$2;</p>

<pre><code>if (code) {
  // 缓存一个月
  StoreManager.set('foo.b9193b0ded.js', code, { 'expire': 720 });
}   } }(function () {   console.log('line 1');   console.log('line 2'); }); ```
</code></pre>

<ul>
  <li>得到条件判断加载（执行）<code>foo.b9193b0ded.js</code>文件的代码（同上，实际代码应该需要精简）：</li>
</ul>

<p>```html
<!-- 预先引入`store-manager.js` -->
<script src="https://xxx.com/static/js/store-manager.js"></script></p>

<!-- 或者将`store-manager.js`内联到页面中 -->
<script> /* 精简过的`store-manager.js`代码 */ </script>

<!-- 通过构建（打包）工具得到如下<script>片段 -->
<script>
if (typeof StoreManager === 'object' && StoreManager && StoreManager.has('foo.b9193b0ded.js')) {
  try { eval(StoreManager.get('foo').code); }
  catch (e) {}
} else {
  document.write('<script src="https://www.xxx.com/static/js/foo.b9193b0ded.js"><\/script>');
}
</script>

<!-- 其他需缓存的js脚本文件，etc -->
<script>
if (typeof StoreManager === 'object' && StoreManager && StoreManager.has('bar.3e9a1fbe8c.js')) {
  try { eval(StoreManager.get('bar').code); }
  catch (e) {}
} else {
  document.write('<script src="https://www.xxx.com/static/js/bar.3e9a1fbe8c.js"><\/script>');
}
</script>

<p>```</p>

<p>最后，<code>localStorage</code>针对每个域可存储容量很有限，需节制使用。</p>
]]></content>
  </entry>
  
</feed>
