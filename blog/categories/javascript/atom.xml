<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: javascript | Silent Reverie]]></title>
  <link href="http://myunlessor.me/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://myunlessor.me/"/>
  <updated>2016-08-14T02:39:22+08:00</updated>
  <id>http://myunlessor.me/</id>
  <author>
    <name><![CDATA[俞乐]]></name>
    <email><![CDATA[myunlessor@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[缓存JS代码到本地localStorage的一种思路]]></title>
    <link href="http://myunlessor.me/blog/2016/08/15/cache-javascript-code-to-localstorage/"/>
    <updated>2016-08-15T11:22:00+08:00</updated>
    <id>http://myunlessor.me/blog/2016/08/15/cache-javascript-code-to-localstorage</id>
    <content type="html"><![CDATA[<p>为了加快页面的加载速度和交互速度，缓存JS脚本文件内容到本地<code>localStorage</code>（以下简称<code>缓存JS</code>）是一种行之有效的手段。</p>

<p>以加载<code>foo.js</code>文件为例，<code>缓存JS</code>的逻辑大致如下：</p>

<p><img src="/images/cachejs2localstorage/cache-to-local.png"></p>

<!-- more -->

<p>在实际应用中，<code>缓存JS</code>需要解决以下两个问题：</p>

<ul>
  <li>获取JS脚本文件的内容并写入缓存</li>
  <li>JS脚本文件的内容变化时自动更新缓存</li>
</ul>

<h2 id="js">获取JS脚本文件的内容并写入缓存</h2>

<p>前端JS文件一般使用单独的域名存放到CDN上，跨域问题使得我们无法通过ajax请求获取JS文件的内容。</p>

<p>那有其他办法可以获取脚本文件的内容吗？答案是有的。</p>

<p>以<code>https://www.xxx.com/static/js/foo.js</code>为例，其文件内容如下：</p>

<p><code>js
console.log('first line');
console.log('second line');
</code></p>

<p>大家都知道，函数是可以转换成字符串类型的，因此我们可以这种方式获取函数本身的代码，如下所示：</p>

<p>```js
function foo() {
  console.log(‘first line’);
  console.log(‘second line’);
}</p>

<p>// 函数转换为字符串 =&gt; 函数代码的字符串形式
console.log(String(foo));</p>

<p>// 也可以这样调用得到
console.log(foo.toString());
```</p>

<p>得到函数完整的字符串代码后，需要将字符串进行剥离，只获取得到body部分，这一步可以使用正则表达式将body匹配出来：</p>

<p>```js
// 正则表达式匹配完整的函数语句
// 这里使用<code>^</code>和<code>$</code>匹配头尾，匹配性能不成问题
var rfunc = /^function\s<em>(?:[^(]</em>)(([^)]<em>))\s</em>{([\s\S]*)}$/;</p>

<p>// 变量<code>code</code>存放的就是<code>foo.js</code>的代码内容
var code = String(foo).match(rfunc) &amp;&amp; RegExp.$2;
console.log(code);
```</p>

<p>所以，将原代码包裹一层<code>function</code>，我们可以成功拿到任意脚本文件的内容，而完全不用关心是否存在跨域问题。</p>

<p>于是我们可以将原先的<code>foo.js</code>自动转换成如下形式，这一步实际可以通过构建（打包）工具（如<code>webpack</code>）自动完成。</p>

<p>```js
// 自执行函数
void function (fn) {
  // 执行代码逻辑
  fn.call(function () { return this; }());</p>

<p>var rfunc = /^function\s<em>(?:[^(]</em>)(([^)]<em>))\s</em>{([\s\S]*)}$/;
  var code = String(fn).match(rfunc) &amp;&amp; RegExp.$2;</p>

<p>// TODO: 将<code>code</code>写入到<code>localStorage</code>中（见下文）
}(function () {
  console.log(‘first line’);
  console.log(‘second line’);
});
```</p>

<h2 id="js-1">JS脚本文件的内容变化时自动更新缓存</h2>

<p>我们可以通过计算文件内容的md5值，然后取md5值前面若干位作为文件的版本号拼到文件名中（如<code>foo.09c1ff3231.js</code>、<code>foo.b9193b0ded.js</code>等），以此标记文件内容发生了变化。</p>

<p>假设<code>foo.09c1ff3231.js</code>是旧版本文件，<code>foo.b9193b0ded.js</code>是新版本文件，用流程图可以清晰地呈现缓存自动更新的过程：</p>

<p><img src="/images/cachejs2localstorage/update-cache-to-local.png"></p>

<h2 id="section">实际应用</h2>

<p>在实际应用中，我们可以将缓存相关的逻辑封装到普通对象（如命名为<code>StoreManager</code>，并保存为文件<code>store-manager.js</code>，该对象应实现如下几个功能：</p>

<ul>
  <li>获取指定脚本文件名的缓存内容</li>
  <li>判断是否已缓存指定版本号的文件内容</li>
  <li>将指定版本号的文件内容写入到缓存（或替换掉已缓存版本）</li>
  <li>将指定脚本文件名的内容从缓存中移除</li>
  <li>清理已过期的缓存内容（可选）</li>
</ul>

<p>以下是<code>StoreManager</code>的实现代码：</p>

<p>```js
void function (global) {
  var storage = global.localStorage;</p>

<p>// 缓存js时存储的key使用统一的前缀作为命名空间
  // 这样方便管理及尽可能避免冲突
  var prefix = ‘store-manager/js/’;</p>

<p>// 匹配版本号(8~12位)
  var rkey = /^(.+).(\w{8,20}).js$/;</p>

<p>// 默认缓存时长
  // 30 days (单位：小时)
  var defaultExpiration = 30 * 24;</p>

<p>var store = {
    // 获取指定脚本文件名的缓存内容
    get: function (key) {
      var item = storage.getItem(prefix + key);
      try {
        return JSON.parse(item || ‘false’);
      } catch (e) {
        return false;
      }
    },</p>

<pre><code>// 判断是否已缓存指定版本号的文件内容
has: function (md5key) {
  var matches = String(md5key).match(rkey);
  return matches ? (this.get(matches[1]).md5 === matches[2]) : false;
},

// 将指定版本号的文件内容写入到缓存（或替换掉已缓存版本）
set: function (md5key, code, opts) {
  var matches = String(md5key).match(rkey);

  if (matches) {
    var now = +new Date;
    var storeKey = prefix + matches[1];

    opts || (opts = {});

    var storeVal = {
      'md5': matches[2],
      'stamp': now,
      'expire': (now + (opts.expire || defaultExpiration) * 60 * 60 * 1000),
      'code': code,
    };

    storage.setItem(storeKey, JSON.stringify(storeVal));
  }

  return this;
},

// 将指定脚本文件名的内容从缓存中移除
remove: function (key) {
  storage.removeItem(prefix + key);
  return this;
},

// 清理（已过期的）缓存内容
clear: function (expired) {
  var now = +new Date;

  for (var item in storage) {
    var key = item.replace(prefix, '');

    if (key &amp;&amp; (!expired || this.get(key).expire &lt;= now)) {
      this.remove(key);
    }
  }

  return this;
},   };
</code></pre>

<p>// 导出为全局变量
  // 注：一旦我们的脚本重命名后，缓存的旧版本会失去跟踪，
  // 执行<code>clear(true)</code>，这样失去跟踪的缓存内容过期后能够得到清理
  global.StoreManager = store.clear(true);</p>

<p>}(function () { return this; }());
```</p>

<p>有了<code>StoreManager</code>对象后，我们就可以轻松地<code>缓存JS</code>了。</p>

<ul>
  <li>源文件<code>foo.js</code>：</li>
</ul>

<p><code>js
console.log('line 1');
console.log('line 2');
</code></p>

<ul>
  <li>通过构建（打包）工具得到<code>foo.b9193b0ded.js</code>(这里md5随便取的名，实际代码应该需要精简)：</li>
</ul>

<p>```
// 自执行函数
void function (fn) {
  // 执行代码逻辑
  fn.call(function () { return this; }());</p>

<p>// 容错检测
  if (typeof StoreManager === ‘object’ &amp;&amp; StoreManager) {
    var rfunc = /^function\s<em>(?:[^(]</em>)(([^)]<em>))\s</em>{([\s\S]*)}$/;
    var code = String(fn).match(rfunc) &amp;&amp; RegExp.$2;</p>

<pre><code>if (code) {
  // 缓存一个月
  StoreManager.set('foo.b9193b0ded.js', code, { 'expire': 720 });
}   } }(function () {   console.log('line 1');   console.log('line 2'); }); ```
</code></pre>

<ul>
  <li>通过条件判断是否从缓存中执行对应<code>foo.b9193b0ded.js</code>文件的代码逻辑（同上，实际代码应该需要精简）：</li>
</ul>

<p>```html
<!-- 预先引入`store-manager.js` -->
<script src="https://www.xxx.com/static/js/store-manager.js"></script></p>

<!-- 或者将`store-manager.js`内联到页面中 -->
<script> /* 精简过的`store-manager.js`代码 */ </script>

<!-- 通过构建（打包）工具得到如下<script>片段 -->
<script>
if (typeof StoreManager === 'object' && StoreManager && StoreManager.has('foo.b9193b0ded.js')) {
  try { eval(StoreManager.get('foo').code); }
  catch (e) {}
} else {
  document.write('<script src="https://www.xxx.com/static/js/foo.b9193b0ded.js"><\/script>');
}
</script>

<!-- 其他需缓存的js脚本文件，etc -->
<script>
if (typeof StoreManager === 'object' && StoreManager && StoreManager.has('bar.3e9a1fbe8c.js')) {
  try { eval(StoreManager.get('bar').code); }
  catch (e) {}
} else {
  document.write('<script src="https://www.xxx.com/static/js/bar.3e9a1fbe8c.js"><\/script>');
}
</script>

<p>```</p>

<p>最后，<code>localStorage</code>针对每个域可存储容量很有限，需节制使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Promise消除“先发起请求后收到响应”问题带来的副作用]]></title>
    <link href="http://myunlessor.me/blog/2015/12/19/promise-solve-continuous-request-and-respone-not-in-order-problem/"/>
    <updated>2015-12-19T20:39:00+08:00</updated>
    <id>http://myunlessor.me/blog/2015/12/19/promise-solve-continuous-request-and-respone-not-in-order-problem</id>
    <content type="html"><![CDATA[<h2 id="section">问题分析</h2>

<p>考虑这种应用场景：用户与页面进行交互，切换不同的查询条件，实时发起异步请求，待响应返回后，将响应数据渲染到页面指定区域。大部分情况下，前一次操作发起的请求都会比后一次操作发起的请求先响应。先响应的先渲染，后响应的将先渲染的结果覆盖。于是我们可以得到查询条件与响应数据显示一致的结果。这是我们所期望的结果，也是我们眼中的“正常”流程。如果我们认真对待它的话，是不应该忽略“异常”流程的。由于请求是异步的，前一次发起的请求不会阻塞后一次请求的发起，顺理成章地，前一次请求也未必会比后一次请求先返回。于是导致的直接后果就是后一次请求响应的数据先渲染，待前一次请求响应时，直接覆盖了后一次请求的渲染结果。这可不是我们所期望看到的。</p>

<!-- more -->

<p>以上场景如果用代码来描述的话，是这样的：</p>

<p>```javascript
var result;</p>

<p>// A function to simulate async request delay
var request = function (msec, mockedData, callback) {
  setTimeout(function () {
    callback(mockedData);
  }, msec);
};</p>

<p>var sample = [
  { msec: 200, data: ‘stale’ },
  { msec: 100, data: ‘fresh’ }
];</p>

<p>// 模拟<code>先发起请求后响应</code>的情景
sample.forEach(function (item) {
  request(item.msec, item.data, function (resp) {
    result = resp;
  });
});</p>

<p>// wait 1s, we inspect the <code>result</code>
setTimeout(function () {
  // we expect <code>result</code> to be <code>fresh</code>, but it is <code>stale</code>
  console.log(result); // =&gt; <code>stale</code>
}, 1000);
```</p>

<h2 id="section-1">解决问题</h2>

<p>解决方法有很多，归根结底我们需要解决的问题就是：在后一次请求响应返回并渲染时，保证渲染结果不会被前一次请求的响应结果覆盖。</p>

<h3 id="section-2">简单粗暴式</h3>

<p>最简单粗暴的方式就是在当前请求还未响应时，禁止发起下一次请求。对于性急的人来说，这种做法实在不可接受，直接pass。</p>

<h3 id="section-3">简单直观式</h3>

<p>另外一种思路：在每次响应后且在渲染之前，判断当前响应是不是对应最新一次请求的。是，则渲染；不是，则不渲染。</p>

<p>这种思路最容易想到的实现就是使用<code>全局变量</code>标记最新请求，<code>局部变量</code>标记当前请求，然后在响应回调中判断<code>局部变量</code>的值是否和<code>全局变量</code>的值一样。如果不一样，忽略响应结果；如果一样，我们可以断言这是最新请求的响应，直接渲染。</p>

<p>以下是这种思路针对上面代码的改写：</p>

<p>```javascript
var result;
var globalMark = 0;</p>

<p>// A function to simulate async request delay
var request = function (msec, mockedData, callback) {
  setTimeout(function () {
    callback(mockedData);
  }, msec);
};</p>

<p>var sample = [
  { msec: 200, data: ‘stale’ },
  { msec: 100, data: ‘fresh’ }
];</p>

<p>// 模拟<code>先发起请求后响应</code>的情景
sample.forEach(function (item) {
  var localMark = ++globalMark;</p>

<p>request(item.msec, item.data, function (resp) {
    if (localMark !== globalMark) {
      return;
    }</p>

<pre><code>result = resp;   }); });
</code></pre>

<p>// wait 1s, we inspect <code>result</code>
setTimeout(function () {
  // now our <code>result</code> is <code>fresh</code>, just as expected
  console.log(result); // =&gt; <code>fresh</code>
}, 1000);
```</p>

<p>和我们所期望的一样，这种思路可以正常工作，而且简单直观。但是当我们要处理大量这类请求问题时，这类重复逻辑的代码将散落在各个地方，不是很优雅。问题不在于思路上，而在于实现。我们需要在源头（请求）处规避（控制）问题，而不是到结果（响应）处解决问题。</p>

<h3 id="promise">Promise式</h3>

<p><code>Promise</code>正在已经成为解决异步问题的一大解决工具了，经过多年的实际考验，它甚至已纳入W3C规范，制定标准API了。所以回到这个问题，<code>we should think in promise at the first place</code>。</p>

<p>例如，上面的<code>request</code>方法我们实际可以写成<code>Promise</code>的形式：</p>

<p>```javascript
// A function to simulate async request delay
var request = function (msec, mockedData) {
  return $.Deferred(function (dfd) {
    setTimeout(function () {
      dfd.resolve(mockedData);
    }, msec);
  }).promise();
};</p>

<p>request(200, ‘some data’).then(function (resp) {
  console.log(resp); // =&gt; ‘some data’
});
```</p>

<p>我们可以封装出<code>promisify</code>方法，这样可以将形如<code>request</code>的方法方便地包装为<code>promise化</code>的方法：</p>

<p><strong>promisify [jQuery.Deferred版本]</strong></p>

<p>```javascript
var promisify = function (fn) {
  // Is <code>fn</code> thenable?
  return fn.then ? fn : function () {
    var args = [].slice.call(arguments);</p>

<pre><code>return $.Deferred(function () {
  fn.apply(null, args.concat(this.resolve));
}).promise();   }; }; ```
</code></pre>

<p><strong>promisify [ES6版本]</strong></p>

<p><code>javascript
var promisify = function (fn) {
  // Is `fn` thenable?
  return fn.then ? fn : function () {
    var args = Array.from(arguments);
    return new Promise(resolve =&gt; void fn(...args.concat(resolve)));
  };
};
</code></p>

<p>以下是将<code>request</code>方法<code>promise化</code>的例子：</p>

<p>```javascript
// A function to simulate async request delay
var request = function (msec, mockedData, callback) {
  setTimeout(function () {
    callback(mockedData);
  }, msec);
};</p>

<p>// decorate <code>request</code> with <code>promisify</code>
request = promisify(request);</p>

<p>request(200, ‘some data’).then(function (resp) {
  console.log(resp); // =&gt; ‘some data’
});
```</p>

<p>但是，单单凭<code>promisify</code>并不能解决我们最初的问题，我们需进一步将之前的思路翻译为<code>promise式</code>的代码。为了不改变原有调用方式，我们可以对原有<code>promisify</code>后得到的方法再进行一层装饰。装饰后的方法仍是<code>promise化</code>的，这样对外调用完全是透明的。</p>

<p>以下是装饰器的实现方法，我将它命名为<code>mutePrior</code>, 意为<code>mute prior</code>：</p>

<p><strong>mutePrior [jQuery.Deferred版本]</strong></p>

<p>```javascript
var mutePrior = function (promisifiedFunc) {
  // 用于存储<code>promise</code>对象，从第2个位置开始存储
  var registry = [0];</p>

<p>return function () {
    var promise = promisifiedFunc.apply(null, arguments);</p>

<pre><code>// 已发起的请求(promise)入队，可以看到新发起的请求(promise)始终位列数组末尾
registry.push(promise);

return $.Deferred(function (dfd) {
  var proxyCallbacks = ['resolve', 'reject'].map(function (action) {
    return function () {
      // 关键代码：截获原有响应结果，判断对应请求是否为最新一次请求
      if (registry.indexOf(promise) === registry.length - 1) {
        dfd[action].apply(dfd, [].slice.call(arguments));

        // 重置`registry`
        registry.length = 1;
      }
    };
  });

  // 添加代理回调
  promise.then.apply(promise, proxyCallbacks);
}).promise();   }; }; ```
</code></pre>

<p><strong>mutePrior [ES6版本]</strong></p>

<p>```javascript
var mutePrior = function (promisifiedFunc) {
  var registry = [0];</p>

<p>return function () {
    var promise = promisifiedFunc(…arguments);
    registry.push(promise);</p>

<pre><code>return new Promise(function (...actions) {
  var proxyCallbacks = actions.map(action =&gt; function (result) {
    if (registry.indexOf(promise) === registry.length - 1) {
      action(result);
      registry.length = 1;
    }
  });

  promise.then(...proxyCallbacks);
});   }; }; ```
</code></pre>

<p>有了<code>mutePrior</code>，一切都变得很简单了，简单到纯粹的模式复用了。</p>

<p>```javascript
var result;</p>

<p>// A function to simulate async request delay
var request = function (msec, mockedData, callback) {
  setTimeout(function () {
    callback(mockedData);
  }, msec);
};</p>

<p>// decorate <code>request</code> with both <code>promisify</code> and <code>mutePrior</code>
request = mutePrior(promisify(request));</p>

<p>var sample = [
  { msec: 200, data: ‘stale’ },
  { msec: 100, data: ‘fresh’ }
];</p>

<p>// 模拟<code>先发起请求后响应</code>的情景
sample.forEach(function (item) {
  request(item.msec, item.data).then(function (resp) {
    result = resp;
  });
});</p>

<p>// wait 1s, we inspect <code>result</code>
setTimeout(function () {
  // now our <code>result</code> is <code>fresh</code>, just as expected
  console.log(result); // =&gt; <code>fresh</code>
}, 1000);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["eval" is not evil]]></title>
    <link href="http://myunlessor.me/blog/2015/11/19/eval-is-not-evil/"/>
    <updated>2015-11-19T21:56:00+08:00</updated>
    <id>http://myunlessor.me/blog/2015/11/19/eval-is-not-evil</id>
    <content type="html"><![CDATA[<p>一般我们代码几乎不会使用到<code>eval</code>, 但凡需要使用到<code>eval</code>的地方，都会代而<code>使用构造器Function生成函数实例</code>的方式，因为<code>eval is evil</code>。<code>eval</code>可以在全局作域下执行代码，也可以在局部作用域（间接调用<code>eval</code>）下执行代码。而<code>使用构造器Function生成函数实例</code>的方式，可以确保我们的代码是在全局作用域下执行。</p>

<!-- more -->

<p>依赖<code>Function</code>构造函数，我们可以实现自己的<code>“eval”</code>。这里我将实现的<code>“eval”</code>命名为<code>$eval</code>，以示区分。当然，<code>$eval</code>实现的功能和原生<code>eval</code>功能不尽相同。<code>$eval</code>可以让我们在指定作用域下执行代码。同时，这里还额外将<code>$eval</code>方法定义到<code>Object.prototype</code>中以适用不同场合。</p>

<p>下面是<code>$eval</code>和<code>Object.prototype.$eval</code>的代码实现。</p>

<p>```javascript
void function (global) {
  /**
   * Execute javascript code within specific scope
   * @param  {Function|String} fn Scoped function or expression
   * @param  {Object} imports     An object which defines required local variables
   * @return {Function}           Function that can be invoked to run code in specific scope
   <em>/
  function scopedRunner(fn, imports) {
    var rfunc = /^function\s+(?:[^(]</em>)(([^)]<em>))\s</em>{([^]*)}$/;
    var found = String(fn).match(rfunc) || [,,’return (‘ + fn + ‘);’];
    var args = found[1] || ‘’;
    var stmt = found[2] || ‘’;</p>

<pre><code>var body = Object.keys(imports || {}).reduce(function (ret, key, idx) {
  return ret + (idx ? ', ' : 'var ') + key + ' = $scope["' + key + '"]';
}, '') + '; return function (' + args + ') {' + stmt + '};';

return Function('$scope', body).call(null, imports);   }
</code></pre>

<p>// define <code>global.$eval</code>
  Object.defineProperty(global, ‘$eval’, {
    value: function () {
      return scopedRunner.apply(null, arguments)();
    }
  });</p>

<p>// define <code>Object.prototype.$eval</code>
  Object.defineProperty(Object.prototype, ‘$eval’, {
    value: function (expr) {
      return global.$eval(expr, this);
    }
  });
}(function () { return this; }());
```</p>

<p>以下是一些关于<code>$eval</code>和<code>Object.prototype.$eval</code>的使用例子。</p>

<ul>
  <li>e.g 1</li>
</ul>

<p>```javascript
// define some global variables
x = 10;
y = 30;</p>

<p>void function () {
  // define some local variables
  var a = 6, b = 7;</p>

<p>$eval(function () {
    // ReferenceError: a is not defined
    // console.log(a + b);
  });</p>

<p>// ReferenceError: a is not defined
  // console.log($eval(‘a + b’));</p>

<p>console.log($eval(‘y / x’)); //=&gt; 3
}();
```</p>

<ul>
  <li>e.g 2</li>
</ul>

<p>```javascript
void function () {
  var obj = { a: 6, b: 7 };
  var result;</p>

<p>result = $eval(function () {
    return a * b;
  }, obj);
  console.log(result); //=&gt; 42</p>

<p>result = $eval(‘a * b’, obj);
  console.log(result); //=&gt; 42</p>

<p>result = obj.$eval(‘a * b’);
  console.log(result); //=&gt; 42
}();
```</p>

<ul>
  <li>e.g 3</li>
</ul>

<p>```javascript
void function () {
  var raws = [‘42’, ‘“42”’, ‘a * b’, ‘[a, b]’, ‘{ x: a, y: b }’];
  var out = raws.map(eval.$eval.bind({ a: 6, b: 7 }));</p>

<p>//=&gt; [42, ‘42’, 42, [6, 7], { x: 6, y: 7 }]
  console.log(out);
}();
```</p>

<ul>
  <li>e.g 4</li>
</ul>

<p>```javascript
x = 10;
y = 30;</p>

<p>void function () {
  var obj = {
    x: 6,
    y: 7,
    times: function () {
      return this.x * this.y;
    },
    sum: function (x, y) {
      return x + y;
    }
  };</p>

<p>console.log(
    $eval(‘$scope’, obj) === obj,                        //=&gt; true
    $eval(function () { return $scope; }, obj) === obj,  //=&gt; true
    obj.$eval(‘$scope’) === obj,                         //=&gt; true
    obj.$eval(function () { return $scope; }) === obj    //=&gt; true
  );</p>

<p>console.log(
    obj.$eval(‘times()’),             //=&gt; 300
    obj.$eval(‘$scope.times()’),      //=&gt; 42
    obj.$eval(‘times.call($scope)’)   //=&gt; 42
  );</p>

<p>obj.$eval(function () {
    console.log(times());             //=&gt; 300
    console.log($scope.times());      //=&gt; 42
    console.log(times.call($scope));  //=&gt; 42
  });</p>

<p>console.log(
    obj.$eval(‘sum(x,y)’),                          //=&gt; 13
    obj.$eval(function () { return sum(x, y); }),   //=&gt; 13
    $eval(‘sum(x,y)’, obj),                         //=&gt; 13
    $eval(function () { return sum(x, y); }, obj)   //=&gt; 13
  );
}();
```</p>

<p>最后，<code>$eval is not eval, $eval is not evil</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scoped Reality]]></title>
    <link href="http://myunlessor.me/blog/2015/11/18/scoped-reality/"/>
    <updated>2015-11-18T21:32:00+08:00</updated>
    <id>http://myunlessor.me/blog/2015/11/18/scoped-reality</id>
    <content type="html"><![CDATA[<blockquote>
  <p>有人叫她“熟食铺子”，因为只有熟食店会把那许多颜色暖热的肉公开陈列；
又有人叫她“真理”，因为据说“真理是赤裸裸的”；
而鲍小姐并未一丝不挂，所以他们修正为“局部的真理”。
　　　　　　　　　　　　　　　　　　　　　　　　　《围城》 — 钱钟书</p>
</blockquote>

<!-- more -->

<p>```javascript
/**
 * Execute javascript code within specific scope
 * @param  {Function|String} fn scoped function or expression
 * @param  {Object} imports     An object defines required local variables
 * @return {Function}           A function that can be invoked to run code in specific scope
 <em>/
function scopedRunner(fn, imports) {
  var rfunc = /^function\s+(?:[^(]</em>)(([^)]<em>))\s</em>{([^]*)}$/;
  var found = String(fn).match(rfunc) || [,,’return ‘ + fn];
  var args = found[1] || ‘’;
  var stmt = found[2] || ‘’;</p>

<p>var body = Object.keys(imports || {}).reduce(function (ret, key, idx) {
    return ret + (idx ? ‘, ‘ : ‘var ‘) + key + ‘ = <strong>locals</strong>[”’ + key + ‘”]’;
  }, ‘’) + ‘; return function (‘ + args + ‘) {‘ + stmt + ‘};’;</p>

<p>return Function(‘<strong>locals</strong>’, body).call(null, imports);
}
```</p>

<p>The following are some examples.</p>

<p><code>javascript
// e.g 1
void function () {
   scopedRunner(
     function (m, n) {
       var result = (x + y) + (m + n);
       console.log('The meaning of life is:', result);  //=&gt; 42
     },
     { x: 10, y: 1 }
   ).call(null, 30, 1);
}();
</code></p>

<p>```javascript
// e.g 2
void function () {
  var result = scopedRunner(
    ‘times(a, b)’,
    { a: 6, b: 7, times: (x, y) =&gt; x * y }
  )();</p>

<p>console.log(‘The meaning of life is:’, result);      //=&gt; 42
}();
```</p>

<p>```javascript
// e.g 3
Object.prototype.__eval = function (expr) { return scopedRunner(expr, this)(); };</p>

<p>void function () {
  var obj = { a: 6, b: 7, times: (x, y) =&gt; x * y };
  var result = obj.__eval(‘times(a, b)’);</p>

<p>console.log(‘The meaning of life is:’, result);      //=&gt; 42
}();
```</p>

<p>```javascript
// e.g 4
var take = (scope =&gt; scopedRunner(scope.eval, scope.with)());</p>

<p>void function () {
  var a = 6, b = 7, times = (a, b) =&gt; a * b;</p>

<p>// take result out from evaluated value within specific scope
  var result = take({
    with: { a, b, times },
    eval: ‘times(a, b)’
  });</p>

<p>console.log(‘The meaning of life is:’, result);      //=&gt; 42
}();
```</p>

<p>```javascript
// e.g 5
var invoke = scopedRunner((fn, …args) =&gt; fn.apply(null, args))();</p>

<p>void function () {
  var result = invoke((a, b) =&gt; a + b, 6, 7);
  console.log(‘The meaning of life is:’, result);      //=&gt; 13
}();
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jQuery实现简单的自定义事件功能]]></title>
    <link href="http://myunlessor.me/blog/2014/08/19/simple-custom-events-using-jquery/"/>
    <updated>2014-08-19T22:06:00+08:00</updated>
    <id>http://myunlessor.me/blog/2014/08/19/simple-custom-events-using-jquery</id>
    <content type="html"><![CDATA[<p>众所周知，页面元素的交互离不开javascript的事件模型，DOM元素对事件有原生的支持。而事件并不是javascript语言本身的固有功能，它是一种模式，通常被叫做<code>发布/订阅(publish/subscribe)</code>模式。这种模式可以很好地令代码解耦，寥寥数十行的javascript原生代码就可以实现简单的事件模型，但要实现复杂又易用的事件模型并不是件简单的事。而如果项目使用jQuery类库的话，我们可以在它实现的事件模型基础上做一定的封装，实现简单的自定义事件功能。</p>

<!-- more -->

<p>既然jQuery实现有事件模型，为什么我们还要另外再整一套呢？jQuery实现的事件方法(像<code>on、off、trigger</code>等)都是绑定在jQuery包装集对象上的，如果我们想为普通的字面对象或通过构造函数实例化的对象添加事件，显然jQuery提供的那套事件模型不能直接拿来用。如果我们细微地思考下就知道，对jQuery的事件模型稍加包装可以直接应用到普通对象上——jQuery包装集可以包装任意对象，包括字面对象及实例化对象等。</p>

<p>以下是使用jQuery实现的<code>发布/订阅(publish/subscribe)</code>模式。</p>

<h2 id="section">全局静态事件实现</h2>

<p>```js
!(function ($) {
  var o = $({});</p>

<p>$.subscribe = function () {
    o.on.apply(o, arguments);
  };</p>

<p>$.unsubscribe = function () {
    o.off.apply(o, arguments);
  };</p>

<p>$.publish = function () {
    o.trigger.apply(o, arguments);
  };
})(jQuery);</p>

<p>// 使用
$.subscribe(‘howdy’, function (e, data) {
  //=&gt; [“one”, “two”]
  console.log(data);
});</p>

<p>$.publish(‘howdy’, [[‘one’, ‘two’]]);
```</p>

<h2 id="section-1">适配一般对象的自定义事件实现</h2>

<p>```js
var pubsub = {
  <em>$: function () {
    return this.<strong>$ || (this.</strong>$ = $(this));
  },
  on: function () {
    return this.</em>$().on.apply(this.<em>$(), arguments)[0];
  },
  one: function () {
    return this.</em>$().one.apply(this.<em>$(), arguments)[0];
  },
  off: function () {
    return this.</em>$().off.apply(this.<em>$(), arguments)[0];
  },
  emit: function (events, data) {
    return this.</em>$().trigger(events, [data])[0];
  }
};</p>

<p>// 使用</p>

<p>// =====================
// 字面对象添加自定义事件
// =====================
var obj = {};
$.extend(obj, pubsub);</p>

<p>obj
  .on({
    ‘hello’: function (e, data) {
      //=&gt; ‘how are you today?’
      console.log(data);
    },
    ‘bye’: function (e, data) {
      //=&gt; ‘good night!’
      console.log(data);
    }
  })
  .emit(‘hello’, ‘how are you today?’)
  .emit(‘bye’, ‘good night!’);</p>

<p>// =====================
// 实例化对象添加自定义事件
// =====================</p>

<p>// 构造函数
var Foo = function () {};</p>

<p>// 将事件方法添加到构造函数的原型上
$.extend(Foo.prototype, pubsub);</p>

<p>// 实例化对象
var foo = new Foo();</p>

<p>foo.on(‘howdy.with.namespace’, function (e, data) {
  //=&gt; { spam: “one”, eggs: “two” }
  console.log(data);
});</p>

<p>foo.emit(‘howdy’, { ‘spam’: ‘one’, ‘eggs’: ‘two’ });
```</p>

<p>通过以上代码我们可以看到，编写区区几行代码，我们就实现了适配一般对象的复杂易用的事件模型，它具有jQuery事件模型一切强大的功能。另外，我们注意到改造后的事件模型和Backbone实现的事件模型特别相似。另外，如果采用ES6环境，上述代码还可继续简化。</p>

<p><code>js
var pubsub = {
  _$: function () {
    return this.__$ || (this.__$ = $(this));
  },
  on: function () {
    return this._$().on(...arguments)[0];
  },
  one: function () {
    return this._$().one(...arguments)[0];
  },
  off: function () {
    return this._$().off(...arguments)[0];
  },
  emit: function (events, data) {
    return this._$().trigger(events, [data])[0];
  }
};
</code></p>

<p>END</p>

]]></content>
  </entry>
  
</feed>
