<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: pragmatic | Silent Reverie]]></title>
  <link href="http://myunlessor.me/blog/categories/pragmatic/atom.xml" rel="self"/>
  <link href="http://myunlessor.me/"/>
  <updated>2013-08-09T01:26:10+08:00</updated>
  <id>http://myunlessor.me/</id>
  <author>
    <name><![CDATA[刘郁]]></name>
    <email><![CDATA[myunlessor@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Photoshop趣味用法：玩转QQ找茬游戏]]></title>
    <link href="http://myunlessor.me/blog/2013/08/08/playing-zhao-cha-with-photoshop/"/>
    <updated>2013-08-08T22:52:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/08/08/playing-zhao-cha-with-photoshop</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>相信不少童鞋都玩过QQ找茬游戏，游戏规则很简单：在2～4人的房间里，随机几组图片，每组图片分2张，找出每组图片中5处不同的地方，在规定的时间内谁找的茬多算谁赢。玩这个游戏的第一感觉就是各种眼花缭乱，我接受自己没有火眼金睛这一事实，在每组图规定的时间能平均能找出3个茬算是幸运之至了（我运气一向很差，无论做什么）。这样下来战绩总是令人沮丧，胜率老是上不去。尽管这些都是虚的，但心里多有不甘，于是就想到了一种投机取巧的办法——让Photoshop来充当自己的眼睛，自己则当指挥^_^。</p>

<!-- more -->


<p>其实最初用这方法玩找茬游戏还是三年前的事情了，只是近两天不知怎的突然心血来潮，有心将它记录下来留作纪念已矣。</p>

<h2>正文</h2>

<p>原理呢其实挺简单，找茬嘛就是找两张图的差异，这可是Photoshop最擅长做的事情啦（这也是我想到用它的原因）。在游戏过程中用Photoshop找茬需要解决的关键问题是如何做到迅速地让茬茬尽收眼底，显然Photoshop的Action最能胜任此类事情了。</p>

<p>如果Problem是输入的话，那么输出则是Solution。</p>

<p>现在的Problem是:</p>

<p><img src="/images/muo_img/zhaocha/problem.jpg"></p>

<p>而所谓的Solution的就是这样的(瞧，5茬尽收眼底！):</p>

<p><img src="/images/muo_img/zhaocha/solution.jpg"></p>

<p>从Problem出发，可以看出原图大小即为游戏窗口大小(<code>800 x 600</code>)，Solution中的结果图大小为原图中单张茬茬图的大小(<code>381 x 286</code>)，我们要做的就是从原图到结果图中的转换。</p>

<p>首先需要建一张<code>381 x 286</code>大小的纯黑色图片（比如将其保存为x.png，如下图）作为结果图的容器然后在Photoshop中打开。</p>

<p><img src="/images/muo_img/zhaocha/x.png"></p>

<p>Photoshop要想获取游戏窗口的截图，需要剪贴板作为中介，在<code>Windows</code>下按快捷键<code>Alt + Print Screen</code>将当前激活窗口（这里即为游戏窗口）拷贝至剪贴板，这时在Photoshop就可以按<code>Ctrl + V</code>或<code>F4</code>键将截图拷贝至图层。</p>

<p>第二步就是录制<code>Action</code>啦，一共分为8步，如下图:</p>

<p><img class="left" src="/images/muo_img/zhaocha/zhaocha_action.png"></p>

<ul>
<li>粘贴：将通过<code>Alt + Print Screen</code>快捷键截取的游戏窗口粘贴到打开的<code>x.png</code>图片中作为图层</li>
<li>图层对位：移动图层的位置使左张茬图完全显示在画布中</li>
<li>复制图层：<code>Ctrl + J</code>复制图层到新的图层</li>
<li>全选：<code>Ctrl + A</code>选区选中整个画布</li>
<li>右对齐新复制的图层</li>
<li>取消选择：<code>Ctrl + D</code>取消选区</li>
<li>设置新复制图层的叠加模式为<code>Difference</code></li>
<li>移位新复制图层使右张茬图与左张茬图重叠得到Solution所示效果</li>
</ul>


<p style="clear:both"></p>


<p>动作准备好后，玩游戏就是机械运动了：
  * <code>Alt + Print Screen</code> 截取游戏窗口
  * 切换到Photoshop执行脚本
  * 点点点点点、然后换图继续执行第一步</p>

<p>当然为了方便可以为动作设置快捷键。</p>

<p>我的做法，响应文件<code>Revert</code>事件：通过菜单命令<code>File | Scripts | Script Event Manager…</code>打开<code>脚本事件管理</code>弹出框，如下图，按以下方式进行设置：</p>

<p><img src="/images/muo_img/zhaocha/script_events_manager_panel.png"></p>

<ul>
<li>勾选<code>Enable Events to Run Scripts/Actions</code></li>
<li><code>Photoshop Event</code>下拉框选择<code>Add an Event…</code>添加自定义事件</li>
<li>在打开的<code>Add an Event</code>弹出框中

<ul>
<li><code>Event Name</code>文本框填入<code>Revert</code></li>
<li><code>Descriptive Label</code>文本框填入<code>Rvrt</code></li>
<li>点击<code>OK</code>按钮完成添加</li>
</ul>
</li>
<li><code>Photoshop Event</code>下拉框选择刚刚添加的<code>Event</code>事件</li>
<li>选中单选框<code>Action</code>，然后选择之前刚录制的动作</li>
</ul>


<p>这时候<code>Alt + Print Screen</code> + <code>F12</code>的<code>“REPL”</code>完成，一切妥妥的、一切都变得机械！</p>

<h2>尾声</h2>

<p>当我利用这投机取巧的办法再次投入战斗时，真是屡试不爽、所向披靡。一相比较，游戏里的辅助道具实在弱爆了。我并不认为我这种玩法叫开挂，作弊一说也算勉强的了，晓之以理的讲法叫扬长避短、不亦乐乎。尽管缺失了些游戏的趣味性，但心理上得到的满足感却更强，这就够了。游戏说白了就是图个开心，每个人从中汲取开心的因子不一罢了。同时这也算是我用Photoshop比较有趣味的一种玩法吧！</p>

<p>P.S.：行文着实仓促!</p>

<h2>参考</h2>

<ol>
<li><a href="http://tinyurl.com/kwmfjj9">Photoshop Programming Guide</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript异步代码排程策略]]></title>
    <link href="http://myunlessor.me/blog/2013/06/04/strategy-for-scheduling-javascript-asynchronous-code/"/>
    <updated>2013-06-04T19:06:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/06/04/strategy-for-scheduling-javascript-asynchronous-code</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>写JavaScript脚本代码经常需要用到计时器(<code>window.setTimeout</code>)功能，先看如下代码片段：</p>

<p>```js
// 先解析，但延时1000ms
setTimeout(function foo() {
  console.log(&lsquo;foo&rsquo;);
}, 1000);</p>

<p>// 后解析，但延时100ms
setTimeout(function bar() {
  console.log(&lsquo;bar&rsquo;);
}, 100);
```</p>

<!-- more -->


<p>将该代码片段拷贝进Chrome浏览器的控制台(<code>Console</code>)中执行，可以发现在控制台中是先打印<code>bar</code>字符串，后打印<code>foo</code>字符串，也即是先执行了<code>bar</code>函数，后执行了<code>foo</code>函数。假如我们要让代码执行完<code>foo</code>函数后再执行<code>bar</code>函数，不难想到如下方法：</p>

<p>```js
setTimeout(function foo() {
  console.log(&lsquo;foo&rsquo;);</p>

<p>  setTimeout(function bar() {</p>

<pre><code>console.log('bar');
</code></pre>

<p>  }, 100);
}, 1000);
```</p>

<p>在控制台中测试发现这确实达到了我们的预期结果，但这种嵌套结构实在不优雅。当嵌套层级多时，代码可读性会变得相当差，试看如下代码片段：</p>

<p>```js
var foo = function () {
  console.log(&lsquo;foo&rsquo;);
};</p>

<p>var muo = {
  x: &lsquo;baz&rsquo;,
  bar: function () {</p>

<pre><code>console.log(this.x);
</code></pre>

<p>  }
};</p>

<p>var yell = {x: &lsquo;boo&rsquo;};</p>

<p>var bear = function (x, y) {
  console.log(x + y);
};</p>

<p>setTimeout(function () {
  foo();</p>

<p>  setTimeout(function () {</p>

<pre><code>muo.bar();

setTimeout(function () {
  muo.bar.call(yell);

  setTimeout(function () {
    bear(10, 17);
  }, 1);
}, 10);
</code></pre>

<p>  }, 100);
}, 1000);
```</p>

<p>相信没多少人喜欢读这种缺乏结构的代码。那么，有什么办法可以让上述代码变得优雅起来呢？这就涉及到异步代码排程的问题。</p>

<h2>策略</h2>

<p>在上述第一段代码中，<code>setTimeout</code>方法设定的延时在一定程度上可以看成是代码执行顺序的优先级，它打乱了先来后到的规则，延时短的比延时长的优先级高，在同一作用域内计时器代码执行的顺序与解析的顺序无关，这就产生了异步问题，可以类比为现实中的插队行为。我们这里要解决的就是这种异步排程问题，我们要确保先来后到的规则，先执行先被解析的代码，后执行后被解析的代码。</p>

<p>我们知道，在银行窗口办理业务时，我们得先取票排队，先取票的先为之服务，后取票的后服务。当然，这里只考虑只有一个窗口的情况。</p>

<p>类似的，要解决异步代码排程问题，我们可以把要执行的代码当成任务约束在队列中，先入队的先执行，后入队的后执行（即<code>FIFO</code>），且保证同一时间最多允许一个任务执行。基于以上分析，我们可以设计如下策略：</p>

<p>```js
var schedule = (function (self) {
  var paused = false, // 标记状态</p>

<pre><code>  queue  = [];     // 队列
</code></pre>

<p>  // 入队
  self.join = function (fn, params) {</p>

<pre><code>params = params || {};
var args = [].concat(params.args);

queue.push(function (_) {
  _.pause();
  setTimeout(function () {
    fn.apply(params.context || null, args);
    _.resume();
  }, params.delay || 1);
});

return exec();
</code></pre>

<p>  };</p>

<p>  self.pause = function () {</p>

<pre><code>paused = true;  // 忙碌
return this;
</code></pre>

<p>  };</p>

<p>  // ready and call next
  self.resume = function () {</p>

<pre><code>paused = false; // 空闲
setTimeout(exec, 1);
return this;
</code></pre>

<p>  };</p>

<p>  function exec() {</p>

<pre><code>if (!paused &amp;&amp; queue.length) {
  queue.shift()(self);  // 出队
  if (!paused) self.resume();
}
return self;
</code></pre>

<p>  }</p>

<p>  return self;
}(schedule || {}));
```</p>

<p>有了以上设计的排程规则，我们可以将如上多嵌套代码优雅地表达为：</p>

<p>```js
var foo = function () {
  console.log(&lsquo;foo&rsquo;);
};</p>

<p>var muo = {
  x: &lsquo;baz&rsquo;,
  bar: function () {</p>

<pre><code>console.log(this.x);
</code></pre>

<p>  }
};</p>

<p>var yell = {x: &lsquo;boo&rsquo;};</p>

<p>var bear = function (x, y) {
  console.log(x + y);
};</p>

<p>schedule
  .join(foo, {</p>

<pre><code>delay: 1000 // 延时
</code></pre>

<p>  })
  .join(muo.bar, {</p>

<pre><code>delay: 100,
context: muo // this解析上下文
</code></pre>

<p>  })
  .join(muo.bar, {</p>

<pre><code>delay: 10,
context: yell // this解析上下文
</code></pre>

<p>  })
  .join(bear, {</p>

<pre><code>delay: 1,
args: [10, 17] // 为bear函数提供参数
</code></pre>

<p>  });
```</p>

<h2>参考</h2>

<ul>
<li><a href="http://goo.gl/1A8ew">Secrets of the JavaScript Ninja</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Photoshop: 将整图一分为九]]></title>
    <link href="http://myunlessor.me/blog/2013/05/20/divide-slice-by-using-photoshop-scripts/"/>
    <updated>2013-05-20T20:31:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/05/20/divide-slice-by-using-photoshop-scripts</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>前些天一同事在做拼图游戏。设计师提供了很多素材图片给他，这些图片都是整张整张的，他需要将这些图片切图成九宫格(3 x 3)、十六宫格(4 x 4)、二十五宫格(5 x 5)等。如果单张单张地进行计算然后裁切肯定不现实，那样实在效率低下，然后他问我有没快捷方法可以帮助他。</p>

<!-- more -->


<h2>思路一(动作)</h2>

<p>我们切图一般都在<code>photoshop</code>中完成。以往我遇到这种大量的重复性工作时，我绝对不会坐以待毙，我会想方设法，不达目的绝不罢休。通常面对这种问题时，我首先想到的就是生成一个<code>action</code>(动作)，然后利用它批量完成。</p>

<p>该<code>action</code>(动作)的大致思路是将各宫格图片分散到不同的图层中，然后便可以通过菜单命令<code>File | Scripts | Export Layers to Files…</code>将图层一一导出为文件，具体如下：</p>

<ul>
<li>计算一张图片的三等分宽高，生成并保存选区</li>
<li>将选区定位在图片左上角，然后通过菜单命令<code>Layer | New | Layer via Cut(Copy)</code>将该区域隔离到新的图层</li>
<li>重新载入选区，移位选区至新的位置，执行第二步同样命令</li>
<li>重复执行第三步，直到图片九等分分散在不同图层</li>
</ul>


<p>但是，生成这样的动作不仅麻烦，而且也不甚高效，原因如下：</p>

<ul>
<li>需要为九宫格(3 x 3)、十六宫格(4 x 4)、二十五宫格(5 x 5)不同规格生成不同的动作</li>
<li>其他原因忘了~^~…</li>
</ul>


<p>于是这种思路只成为了一种念想，一闪即过。</p>

<h2>思路二(切片工具)</h2>

<p>然后有考虑利用<code>Divide Slice…</code>(划分切图)及<code>Slices from Guides</code>(辅助线自动生成切片)功能——一种传统古老的切图方式。然后通过菜单命令<code>File | Save for Web…</code>将各切片导出为图片。这种方式可行是可行，但事实是提供的图片不是很理想，宫格中有1个像素的透明<code>gutter</code>(间隙)。如果不考虑<code>gutter</code>(间隙)的话，九宫格切图只需四条均分辅助线，否则需要八条，这样就会导出很多垃圾图片——1像素宽或(和)1像素高的图。这样效果不是很理想(自许准理想主义者)，于是这种方法也不了了之了。</p>

<blockquote><p>事实是，这种方法确实可行，考虑四条均分辅助线生成切片，最后可以生成个<code>action</code>(动作)对这些图片做最后的<code>sanitization</code>(“消毒处理”)，傻眼了当时…</p></blockquote>

<h2>思路三(脚本)</h2>

<p>最后，不得不实施<code>Last Resort</code>(破釜沉舟之计)。我想到了脚本语言(事实是，原来我调侃同事用写段<code>Java</code>代码生成图片…^&ndash;^)，<code>photoshop</code>自带的脚本功能(支持<code>JavaScript</code>、<code>VBScript</code>、<code>AppleScript</code>三种脚本语言)做这类事可谓游刃有余，一段简短的代码就可以干净利落地解决它，代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>划分切图脚本 (divide_slice.js)</span> <a href='/downloads/code/divide_slice.js'>下载</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">#</span><span class="nx">target</span> <span class="nx">photoshop</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">preferences</span><span class="p">.</span><span class="nx">rulerUnits</span> <span class="o">!==</span> <span class="nx">Units</span><span class="p">.</span><span class="nx">PIXELS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 采用像素单位进行计算</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">preferences</span><span class="p">.</span><span class="nx">rulerUnits</span> <span class="o">=</span> <span class="nx">Units</span><span class="p">.</span><span class="nx">PIXELS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 当前文档引用</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docRef</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">activeDocument</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 文档宽度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docWidth</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 文档高度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docHeight</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 细分次数(默认 3 x 3，即九宫格切分)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">divides</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 宫格间隙(默认无间隙)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">gutter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 每宫格宽度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">slotWidth</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">docWidth</span> <span class="o">/</span> <span class="nx">divides</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 每宫格高度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">slotHeight</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">docHeight</span> <span class="o">/</span> <span class="nx">divides</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 保存当前图层(即整图)引用</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">layerRef</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">activeLayer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 遍历行</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">docWidth</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">-=</span> <span class="nx">slotHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 遍历列</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">docHeight</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">-=</span> <span class="nx">slotWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 重置当前图片为原图层(即整图)</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">activeLayer</span> <span class="o">=</span> <span class="nx">layerRef</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 从右往左、从下往上设置选区</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">select</span><span class="p">([</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">slotWidth</span><span class="p">,</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">slotHeight</span><span class="p">],</span> <span class="c1">// 左</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">slotHeight</span><span class="p">],</span>  <span class="c1">// 上</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">],</span> <span class="c1">// 右</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">slotWidth</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="c1">// 下</span>
</span><span class='line'>    <span class="p">],</span> <span class="nx">SelectionType</span><span class="p">.</span><span class="nx">REPLACE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// layer via copy ^-^</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">copy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">artLayers</span><span class="p">.</span><span class="nx">add</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">paste</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 水平轴向间隙偏移</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">-=</span> <span class="nx">gutter</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 垂直轴向间隙偏移</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">-=</span> <span class="nx">gutter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 删除原图层(即整图)</span>
</span><span class='line'><span class="nx">layerRef</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>用法很简单，只需下载这段脚本到本地，打开需要切分的图片，然后执行菜单命令<code>File | Scripts | Browse…</code>，在打开的弹出框中找到该脚本，双击执行即可。
r
如果要处理的图片很多的话，配合动作使用即可实现批处理。</p>

<h2>参考书目</h2>

<ol>
<li><a href="http://goo.gl/IFQav">Photoshop CS6 Scripting Guide</a></li>
<li><a href="http://goo.gl/ukIhf">Photoshop CS6 JavaScript Ref</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文件批处理那些事儿]]></title>
    <link href="http://myunlessor.me/blog/2013/05/19/file-batch-stuff/"/>
    <updated>2013-05-19T11:14:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/05/19/file-batch-stuff</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>在日常工作中我们无疑会碰到形形色色的针对文件操作的重复性工作，比如说批量复制、批量替换、批量重命名、批量删除文件或文件夹等的机械活。机械意味着我们不应该执拗于手工地去完成它们，我们需要<strong>尽力</strong>地从中摆脱出来。</p>

<p>之前做过批量重命名的活，在那之前经常用<code>Adobe Bridge</code>用于文件管理，知道其中就有个叫<code>Batch Rename</code>的工具。我很推荐使用它，但它有个缺点，只能针对文件进行重命名，对文件夹无效。但瑕不掩瑜，它真的很棒，能出色地完成我指定规则的重命名工作。</p>

<p>之后为了应对文件批操作，我写了个<code>文件批处理小工具</code>。我对这玩意的评价是，它只能处理很窄范围的特点需求，稍微来点需求变更，它便束手无策、黯然失色。顺便再吐嘈一句，我用了把牛刀干了件杀鸡的事。</p>

<!--more-->


<p>直到最近做了些很坑爹的事，我们一直给设计部的设计变更擦屁股这话就不提了。橙视圈十二生肖和十二星座两个应用被改版得几尽与原先版本脱节，数据已不由后台接口提供，得自己手活制造一大批json序列文件用于界面查询，算下来有接近3k个文件。开始重复地做复制、重命名文件、填充数据，依此反复，一下午时间弄完不到400个文件。</p>

<p>这样下去可不是办法，久闻shell命令名不虚传，稍试了下水，便惊叹shell的无底深渊，一些简单的命令便帮我完成了一些不简单的事。</p>

<h2>正题</h2>

<p>假如我有一个名叫<code>template.json</code>的json模板数据文件，文件内容如下：</p>

<p>```json
{
  &ldquo;result&rdquo;: &ldquo;0&rdquo;,
  &ldquo;dataArea&rdquo;: {</p>

<pre><code>"content": ""
</code></pre>

<p>  }
}
```</p>

<p>我要生成一堆类似<code>a_0.json、a_1.json...d_4.json</code>这样的序列文件，同时文件都包含<code>template.json</code>的内容，手活的话我会先复制一堆<code>template.json</code>文件，然后一个个重命名得到期望的序列文件，这真的很累。可是若借助shell命令的魔力，简直不费吹灰之力。</p>

<p>我们都知道<code>cp</code>是拷贝文件命令，例如在终端下执行：</p>

<p>```bash</p>

<blockquote><p>cp template.json a_0.json
```</p></blockquote>

<p>那么在<code>template.json</code>文件的所在目录下将得到一个名为<code>a_0.json</code>的文件，内容与<code>template.json</code>一模一样。</p>

<p>那么如何批量生成一堆这样的序列文件呢？这意味着我们要重复执行<code>cp</code>命令，但每次执行时上述例子中指定的目标文件（<code>a_0.json</code>）要相应改变，这跟每次传入不同参数调用相同函数很有些类似。<code>xargs</code>命令就是帮助你做这件事的，以下是对xargs命令的简短介绍：</p>

<blockquote><p><code>xargs</code>命令被用来构造参数列表并调用其他命令(工具)，它从标准输入流（<code>standard input</code>）或管道(<code>pipes</code>)中读取以空格或换行分隔的东西，这些读取的东西可以被当作其所调用的命令的参数传入，执行该命令一次或多次。</p></blockquote>

<p>可以看出，<code>xargs</code>命令其实不<strong>干实事</strong>，它旨在督导和帮助其他一些<strong>干实事</strong>的命令（比如<code>cp、mdkir、mv、rm</code>等）重复做事，从而让那些<strong>干实事</strong>的命令尽显其能，这正是<code>xargs</code>本身的价值所在。那么如何使用它呢？请看以下这个例子：</p>

<p>```bash</p>

<blockquote><p>echo a_1.json a_2.json | xargs -n 1 -I {} cp template.json {}
```</p></blockquote>

<p>执行以上命令后，可以看到<code>template.json</code>文件的所在目录下多了两个名字分别为<code>a_1.json、a_2.json</code>的文件，并且内容也和<code>template.json</code>一模一样。</p>

<p>对以上命令的一些解释：</p>

<ul>
<li><code>echo a_1.json a_2.json</code>表示<code>echo</code>两个以空格分隔的字符串到输出流</li>
<li><code>|</code>表示管道，可以理解为将前一命令的输出流重定向到下一命令的输入流中，这有些类似于将函数调用得到的值作为参数传入到别一函数中</li>
<li><code>xargs</code>中重复调用<code>cp</code>命令，选项<code>-n 1</code>表过每次调用时只使用一个参数，并且<code>-I {}</code>像声明参数名一样，<code>cp template.json {}</code>中的<code>{}</code>正是使用该参数的位置</li>
</ul>


<p>其结果是<code>cp</code>命令被执行了两次，第一次将<code>a_1.json</code>替换<code>{}</code>被执行，第二次将<code>a_2.json</code>替换<code>{}</code>被执行，于是实现了两次复制操作。我说了这和函数调用没什么两样。</p>

<p>还是回到之前的问题，怎么批量生成序列文件呢？我们现在找到了批量执行<code>cp</code>命令的方法，现在的问题简化到如何生成序列字符串的问题。很简单，看如下例子:</p>

<p>```bash</p>

<blockquote><p>echo {1..10}
1 2 3 4 5 6 7 8 9 10</p>

<p>echo {a..g}
a b c d e f g</p>

<p>echo {a..d}_{1..4}.json
a_1.json a_2.json a_3.json a_4.json
b_1.json b_2.json b_3.json b_4.json
c_1.json c_2.json c_3.json c_4.json
d_1.json d_2.json d_3.json d_4.json
```</p></blockquote>

<p>看到规律了吧？以下是在<code>template.json</code>文件所在目录的子目录<code>seqs</code>下生成序列文件的命令：</p>

<p>```bash</p>

<blockquote><p>mkdir -p seqs
echo {a..d}_{1..4}.json | xargs -n 1 -I {} cp template.json seqs/{}
```</p></blockquote>

<h2>一些小实践</h2>

<p>下面是我实践过的一些例子，大家可自行实践，方法跟上面所讲的大同小异。</p>

<h3>1.应用打包批处理</h3>

<p>假如终端当前工作子目录为<code>works</code>，在该目录下有如下结构：</p>

<p>```
works
  |<strong> source_files      [应用源文件放置目录]
  |   |</strong> riddle           [我爱猜谜语]
  |   |<strong> brain_twists     [脑筋急转弯]
  |   |</strong> train_tickets    [火车票查询]
  |
  |<strong> package_files     [应用打包放置目录]
  |
  |</strong> package_template  [打包模板结构文件目录]</p>

<pre><code>  |__ draw
  |   |__ icon
  |   |__ poster
  |__ assets
      |__brolife    [应用放置根目录]
</code></pre>

<p>```</p>

<p>我们要将<code>source_files</code>目录下的所有应用打包放置在<code>package_files</code>目录下，可执行如下命令：</p>

<p>```bash</p>

<h1>在应用打包目录下建立相应的应用文件夹</h1>

<blockquote><p>ls source_files | xargs -n 1 -I {} mkdir -p package_files/{}</p></blockquote>

<h1>拷贝文件夹需要带上<code>-a</code>或<code>-pPR</code>选项表示递归拷贝</h1>

<blockquote><p>ls source_files | xargs -n 1 -I {} cp -a package_temptate/* package_files/{}</p></blockquote>

<h1>将应用拷贝至相应的<code>brolife</code>文件夹中</h1>

<blockquote><p>ls source_files | xargs -n 1 -I {} cp -a source_files/{} package_files/{}/assets/brolife
```</p></blockquote>

<h3>2.应用解包</h3>

<p>应用解包即是将应用从各用的<code>brolife</code>文件夹中拷贝出至统一的路径，原理跟打包都差不多，时间关系不允罗列相应命令。</p>

<h3>3.过滤应用中的<code>.htm</code>文件</h3>

<p>只拷贝出应用中的<code>.htm</code>文件，其他文件全部忽略，这项操作需要用到find命令，时间关系不允过多解释。下面是一个使用的小例子：</p>

<p>```bash</p>

<h1>查找当前目录及其子目录下所有以<code>.htm</code>后缀结尾的所有文件</h1>

<blockquote><p>find . -name &ldquo;*.htm&rdquo; -type f</p></blockquote>

<h1>查找<code>~myunlessor/Desktop/riddle</code>目录及其子目录下所有以<code>.jpg</code>或<code>.png</code>后缀结尾的文件</h1>

<blockquote><p>find ~myunlessor/Desktop/riddle ( -name &ldquo;<em>.jpg&rdquo; -or -name &ldquo;</em>.png&rdquo; ) -type f
```</p></blockquote>

<h2>小结</h2>

<p>从以上例子可以看到有了<code>xargs</code>命令及管道后，这些朴素的<strong>干实事</strong>的命令像脱胎换骨了一样，相当强大。千里之行，始于足下！</p>

<h2>附录</h2>

<p>以上所讲的文件批处理解决方案都依赖于*NIX环境的shell，但我们工作在windows平台上<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，说这些有什么意义呢？没关系，我们有<a href="http://www.cygwin.com/">Cygwin</a>，它在windows平台下极力模拟Linux环境，让我们可以在windows下使用Linux的一些实用工具。它的标语是：</p>

<blockquote><p>Get that Linux feeling &ndash; on Windows!</p></blockquote>

<p>猛击<a href="http://cygwin.com/setup.exe">这里</a>下载安装使用起来吧！</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Windows平台下有PowerShell，没使用过，但我想它也应该很擅长做这类事吧！<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
