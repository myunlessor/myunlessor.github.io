<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: pragmatic | Silent Reverie]]></title>
  <link href="http://myunlessor.me/blog/categories/pragmatic/atom.xml" rel="self"/>
  <link href="http://myunlessor.me/"/>
  <updated>2014-06-19T22:56:27+08:00</updated>
  <id>http://myunlessor.me/</id>
  <author>
    <name><![CDATA[俞乐]]></name>
    <email><![CDATA[myunlessor@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[触摸Sublime Text Plugins]]></title>
    <link href="http://myunlessor.me/blog/2013/12/17/touch-sublime-text-plugins/"/>
    <updated>2013-12-17T21:02:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/12/17/touch-sublime-text-plugins</id>
    <content type="html"><![CDATA[<p>在<a href="/blog/2013/12/16/pragmatic-sublime-text-snippets/">Sublime Text Snippets实用技巧二则</a>一文中提到可以通过<code>Sublime Text</code>的<code>Snippets</code>功能快速在页面中插入图片占位符标签，本来在此基础上借助<code>Sublime Text</code>的<code>Plugins(插件)</code>功能进一步完善它。</p>

<!-- more -->


<h2>引子</h2>

<p>我们知道<a href="http://placekitten.com/">placekitten</a>为我们提供了为我们提供了生成图片占位符的方案，比如当我们在页面中插入<code>src</code>设为<code>http://placekitten.com/300/240</code>的<code>img</code>标签时，返回一张<code>300 x 240</code>的猫咪图片如下：</p>

<p><img src="http://placekitten.com/300/240" alt="kitten: 300 x 240" /></p>

<p>同样，<a href="http://placehold.it/">placehold.it</a>也提供了类似的服务，比如在页页插入<code>src</code>设为<code>http://placehold.it/300x240</code>的<code>img</code>标签时，返回一张标有图片尺寸的原型图，如下所示：</p>

<p><img src="http://placehold.it/300x240" alt="placehold: 300 x 240" /></p>

<p>现在我想利用同一个<code>tab trigger</code>可以将<a href="http://placekitten.com/">placekitten</a>和<a href="http://placehold.it/">placehold.it</a>整合到一起。也就是说当我们输入<code>kitten</code>时触发的第一个编辑点输入格式为<code>{width}/{height}</code>时，得到相应尺寸的猫咪图片，而当我们输入格式为<code>{width}x{height}</code>时，得到
标有图片尺寸的原型图。显然这涉及到逻辑判断，这时<code>Snippets</code>的正则功能已无能为力了，至少我没想到办法。</p>

<p>这时，<code>Sublime Text</code>提供给我们的插件功能就派上大用场了。</p>

<h2>正文</h2>

<p>我们在<code>Sublime Text</code>官网上可以了解到，在<code>Sublime Text</code>的早期版本中，作者原本打算将<code>Scheme</code>语言作为<code>Sublime Text</code>的插件开发语言，但考虑到<code>Scheme</code>语言方言多，使用人少且门槛高。后来调研后决定采用<code>Python</code>脚本语言作为插件开发语言，事后证明这一抉择是十分明智的，<code>Python</code>脚本语言易学易用，使用人群广泛，才有了如今<code>Sublime Text</code>插件开发活跃的生态圈。</p>

<p>有关<code>Sublime Text</code>的插件开发文档可参考<a href="http://docs.sublimetext.info/en/latest/reference/plugins.html">这里</a>、<a href="http://docs.sublimetext.info/en/latest/extensibility/plugins.html">这里</a>还有<a href="http://www.sublimetext.com/docs/3/api_reference.html">这里</a>，<a href="http://www.sublimetext.com/forum/">官网论坛</a>也是个很不错的学习交流的地方，在此就不多讲了。</p>

<p>本文要分享的是一个很简单的通过<code>tab</code>触发的插件，以整合<a href="http://placekitten.com/">placekitten</a>和<a href="http://placehold.it/">placehold.it</a>服务，具体触发机制如下：</p>

<ol>
<li> 输入<code>pi</code>后按<code>tab</code>键触发<a href="http://placehold.it/">placehold.it</a>服务，触发后可交互性指定图片占位符宽高了</li>
<li> 输入<code>pi{numbers}</code>后按<code>tab</code>键触发<a href="http://placehold.it/">placehold.it</a>服务，其中<code>{numbers}</code>为图片占位符的宽高（即占位符图片为正方形）</li>
<li> 输入<code>pi{width}x{height}</code>后按<code>tab</code>键触发<a href="http://placehold.it/">placehold.it</a>服务，其中<code>{width}</code>指定图片占位符的宽度，<code>{height}</code>指定图片占位符的高度，注意<code>{width}</code>和<code>{height}</code>之间是小写的<code>x</code></li>
<li> 输入<code>pi{width}X{height}</code>后按<code>tab</code>键触发<a href="http://placekitten.com/">placekitten</a>服务，其中<code>{width}</code>指定图片占位符的宽度，<code>{height}</code>指定图片占位符的高度，注意<code>{width}</code>和<code>{height}</code>之间是大写的<code>X</code></li>
</ol>


<p>具体例子如下：</p>

<p>在文档中输入<code>pi</code>后按<code>tab</code>键触发后返回如下标签，此时高亮显示<code>300x240</code>，可以交互性地指定宽高了，然后<code>tab</code>键跳至第2个编辑点可选择是否保留<code>width</code>和<code>height</code>属性</p>

<pre><code class="html">&lt;img src="http://placehold.it/300x240" width="300" height="240" title="PLACE.IT: [300 x 240]" alt="" /&gt;
</code></pre>

<p>在文档中输入<code>pi100</code>后按<code>tab</code>键触发后返回如下标签，同时可选择是否保留<code>width</code>和<code>height</code>属性</p>

<pre><code class="html">&lt;img src="http://placehold.it/100x100" width="100" height="100" title="PLACE.IT: [100 x 100]" alt="" /&gt;
</code></pre>

<p>在文档中输入<code>pi150x180</code>后按<code>tab</code>键触发后返回如下标签，同时可选择是否保留<code>width</code>和<code>height</code>属性</p>

<pre><code class="html">&lt;img src="http://placehold.it/150x180" width="150" height="180" title="PLACE.IT: [150 x 180]" alt="" /&gt;
</code></pre>

<p>在文档中输入<code>pi150X180</code>后按<code>tab</code>键触发后返回如下标签，同时可选择是否保留<code>width</code>和<code>height</code>属性</p>

<pre><code class="html">&lt;img src="http://placekitten.com/150/180" width="150" height="180" title="KITTEN: [150 x 180]" alt="" /&gt;
</code></pre>

<p>废话不多说，最后附上相关代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>图片占位符插件 (PlaceImage.py)</span> <a href='/downloads/code/PlaceImage.py'>下载</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sublime_plugin</span><span class="o">,</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PlaceImageCommand</span><span class="p">(</span><span class="n">sublime_plugin</span><span class="o">.</span><span class="n">EventListener</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">pi_snip</span> <span class="o">=</span> <span class="s">&#39;&lt;img src=&quot;http://placehold.it/${1:300x240}&quot;${2: width=&quot;${1/^(?:[^\d]*)?([\d]*)x?.*$/$1/i}&quot; height=&quot;${1/^(?:[^\d]*)([\d]*?)x?([\d]*)(?:[^x]*)?$/$+/i}&quot;}${4: title=&quot;${3:PLACE.IT: [${1/^(?:[^\d]*)?([\d]*)x?.*$/$1/i} x ${1/^(?:[^\d]*)([\d]*?)x?([\d]*)(?:[^x]*)?$/$+/i}]}&quot;} alt=&quot;${5:Edit Me}&quot; /&gt;&#39;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">placeit</span> <span class="o">=</span> <span class="s">&#39;&lt;img src=&quot;http://placehold.it/</span><span class="si">%s</span><span class="s">x</span><span class="si">%s</span><span class="s">&quot;${1: width=&quot;</span><span class="si">%s</span><span class="s">&quot; height=&quot;</span><span class="si">%s</span><span class="s">&quot;}${3: title=&quot;${2:PLACE.IT: [</span><span class="si">%s</span><span class="s"> x </span><span class="si">%s</span><span class="s">]}&quot;} alt=&quot;${4:Edit Me}&quot; /&gt;&#39;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">kitten</span>  <span class="o">=</span> <span class="s">&#39;&lt;img src=&quot;http://placekitten.com/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&quot;${1: width=&quot;</span><span class="si">%s</span><span class="s">&quot; height=&quot;</span><span class="si">%s</span><span class="s">&quot;} title=&quot;${2:KITTEN: [</span><span class="si">%s</span><span class="s"> x </span><span class="si">%s</span><span class="s">]}&quot; alt=&quot;${3:Edit Me}&quot; /&gt;&#39;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s">r&#39;^pi(?:(\d+)(?:(x|X)(\d+))?)?$&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">on_query_completions</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">view</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">locations</span><span class="p">):</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pattern</span><span class="p">,</span> <span class="n">prefix</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
</span><span class='line'>      <span class="n">groups</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>
</span><span class='line'>      <span class="n">numNil</span> <span class="o">=</span> <span class="n">groups</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># handle tab trigger: `pi`</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">numNil</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pi_snip</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># handle tab trigger: `pi{numbers}`</span>
</span><span class='line'>      <span class="k">elif</span> <span class="n">numNil</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="n">width</span>  <span class="o">=</span> <span class="n">groups</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">height</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>        <span class="n">value</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">placeit</span> <span class="o">%</span> <span class="p">((</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># handle tab trigger: `pi{width}(x|X){height}`</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">width</span>  <span class="o">=</span> <span class="n">groups</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">height</span> <span class="o">=</span> <span class="n">groups</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">source</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">placeit</span> <span class="k">if</span> <span class="n">groups</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;x&#39;</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">kitten</span>
</span><span class='line'>        <span class="n">value</span>  <span class="o">=</span> <span class="n">source</span> <span class="o">%</span> <span class="p">((</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">value</span><span class="p">)]</span> <span class="k">if</span> <span class="n">value</span> <span class="k">else</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>将此段代码直接保存到<code>Packages</code>目录下即可使用啦！</p>

<h2>参考</h2>

<ol>
<li><a href="http://docs.sublimetext.info/en/latest/reference/plugins.html">Plugins Reference</a></li>
<li><a href="http://docs.sublimetext.info/en/latest/extensibility/plugins.html">Plugins Usage</a></li>
<li><a href="http://www.sublimetext.com/docs/3/api_reference.html">API Reference</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text Snippets实用技巧二则]]></title>
    <link href="http://myunlessor.me/blog/2013/12/16/pragmatic-sublime-text-snippets/"/>
    <updated>2013-12-16T18:22:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/12/16/pragmatic-sublime-text-snippets</id>
    <content type="html"><![CDATA[<p>由于<code>Sublime Text Snippets</code>功能设计的强大和灵活性（TAB跳转、多编辑点多选区支持、正则匹配替换等），我们可以很方便地将它应用到各种能用上它的场合。</p>

<p>关于<code>Sublime Text Snippets</code>的基本介绍可参见文章<a href="/blog/2013/12/15/embrace-sublime-text-snippets/">拥抱Sublime Text Snippets</a>以及该文章给出的参考文档。</p>

<p>下面列举使用<code>snippet</code>的实用技巧，参详这两例子后，大可举一反三而为之。</p>

<!-- more -->


<h2>一、选区片段包裹</h2>

<p>现在前端开发环境少不了模板系统的使用，诣如<a href="https://github.com/janl/mustache.js">Mustache</a>、<a href="http://handlebarsjs.com/">Handlebars</a>、<a href="http://underscorejs.org/#template">Underscore</a>和<a href="http://lodash.com/docs#template">Lo-Dash</a>等。</p>

<p>模板系统一般都在模板上下文中内嵌<code>分隔符(delimiter)</code>进行解析，像<a href="http://underscorejs.org/#template">Underscore</a>和<a href="http://lodash.com/docs#template">Lo-Dash</a>默认有<code>&lt;%  %&gt;(interpolate delimiter)</code>、<code>&lt;%=  %&gt;(evaluate delimiter)</code>及<code>&lt;%-  %&gt;(escape delimiter)</code>，使用模板的时候书写这些分隔符尤显得不太方便。借助<code>Sublime Text Snippets</code>可以使书写模板不再头痛。</p>

<p>下面这个<code>snippet</code>我将它保存为<code>Packages/User/snippets/angle-delimiter.sublime-snippet</code>，你会注意到元素<code>snippet</code>中只包含<code>content</code>一个元素，在<code>content</code>中定义了两个跳转<code>编辑点(edit point)</code>，同时将环境变量<code>$SELECTION(文本选区)</code>作为<code>编辑点2($2)</code>的占位符。</p>

<pre><code class="xml">&lt;snippet&gt;
  &lt;content&gt;&lt;![CDATA[
&lt;%$1 ${2:$SELECTION} %&gt;
]]&gt;&lt;/content&gt;
&lt;/snippet&gt;
</code></pre>

<p>这样当我们选中文本(可以为空，单个或多个选区)后，触发该片段后就可以将选中文本包裹在<code>&lt;%</code>和<code>%&gt;</code>间，同时跳转到<code>编辑点1($1)</code>，可以选择性地添加<code>=</code>或<code>-</code>从而定义不同的<code>分隔符(delimiter)</code>。但是我并没有定义<code>tabTrigger</code>元素进行<code>tab</code>触发，原因是我们这里包含环境变量<code>$SELECTION(文本选区)</code>，使用<code>tabTrigger</code>无法达到片段包裹的目的，因此我们选择定义键盘快捷键来触发该片段，如下所示：</p>

<pre><code class="json">{
  "keys": ["super+k", "super+5"],
  "command": "insert_snippet",
  "args": {
    "name": "Packages/User/snippets/angle-delimiter.sublime-snippet"
  }
}
</code></pre>

<p>将此段代码加入到<code>Packages/User/Default (OSX).sublime-keymap</code>后，然后选中你想包裹的文本，此时先后按下快捷键<code>cmd + k</code>、及<code>cmd + 5</code>后可以触发该片段。Cool!</p>

<h2>二、正则匹配替换</h2>

<p>有时候我们进行页面重构的时候，需要使用占位图片进行临时布局。<a href="http://placekitten.com/">placekitten</a>提供了一个快速而简单的服务帮我们完成此目的。</p>

<p>比如我们需要在页面某个位置放置一个宽200高300的图片，只需要添加如下标签代码即可，如下所示：</p>

<pre><code class="html">&lt;img src="http://placekitten.com/200/300" width="200" height="300" title="KITTEN: [200 x 300]" alt="" /&gt;
</code></pre>

<p>然后<code>placekitten</code>会给我们返回一张<code>200 x 300</code>的猫咪图片，我们只要指定任意宽高就好了，so cutely it is!</p>

<p>使用<code>Sublime Text Snippets</code>提供的正则区配替换特性，我们可以快速输出以上标签，使得图片占位更加称心如意。片段如下：</p>

<pre><code class="xml">&lt;snippet&gt;
  &lt;content&gt;&lt;![CDATA[
&lt;img src="http://placekitten.com/${1:300/240}"${2: width="${1/^\/?([^\/]+)\/?.*$/$1/}" height="${1/^([^\/]*?)\/?([^\/]+)\/?$/$2/}"} title="KITTEN: [${1/^\/?([^\/]+)\/?.*$/$1/} x ${1/^([^\/]*?)\/?([^\/]+)\/?$/$2/}]" alt="" /&gt;
]]&gt;&lt;/content&gt;
  &lt;tabTrigger&gt;kitten&lt;/tabTrigger&gt;
  &lt;scope&gt;text.html&lt;/scope&gt;
&lt;/snippet&gt;
</code></pre>

<p>将此片段保存到<code>Packages/User/snippets/placekitten.sublime-snippet</code>，然后在我们的html页面中敲入<code>kitten</code>后按<code>tab</code>键，输出标签如下：</p>

<pre><code class="html">&lt;img src="http://placekitten.com/300/240" width="300" height="240" title="KITTEN: [300 x 240]" alt="" /&gt;
</code></pre>

<p>此时<code>300/240</code>处于高亮显示，这是我们的第一个编辑点，在这个编辑点我们可以随意更改宽高值，可以看到<code>width</code>、<code>height</code>及<code>title</code>三个标签属性值跟着变化。</p>

<p>比如替换为<code>250</code>，标签显示为：</p>

<pre><code class="html">&lt;img src="http://placekitten.com/250" width="250" height="250" title="KITTEN: [250 x 250]" alt="" /&gt;
</code></pre>

<p>替换为<code>400/300</code>，标签显示为：</p>

<pre><code class="html">&lt;img src="http://placekitten.com/400/300" width="400" height="300" title="KITTEN: [400 x 300]" alt="" /&gt;
</code></pre>

<p>如果我们不需要<code>width="xxx" height="xxx"</code>，这里按<code>tab</code>跳至第二个编辑点，按<code>delete</code>键即可删除，awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photoshop趣味用法：玩转QQ找茬游戏]]></title>
    <link href="http://myunlessor.me/blog/2013/08/08/playing-zhao-cha-with-photoshop/"/>
    <updated>2013-08-08T22:52:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/08/08/playing-zhao-cha-with-photoshop</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>相信不少童鞋都玩过QQ找茬游戏，游戏规则很简单：在2～4人的房间里，随机几组图片，每组图片分2张，找出每组图片中5处不同的地方，在规定的时间内谁找的茬多算谁赢。玩这个游戏的第一感觉就是各种眼花缭乱，我接受自己没有火眼金睛这一事实，在每组图规定的时间能平均能找出3个茬算是幸运之至了（我运气一向很差，无论做什么）。这样下来战绩总是令人沮丧，胜率老是上不去。尽管这些都是虚的，但心里多有不甘，于是就想到了一种投机取巧的办法——让Photoshop来充当自己的眼睛，自己则当指挥^_^。</p>

<!-- more -->


<p>其实最初用这方法玩找茬游戏还是三年前的事情了，只是近两天不知怎的突然心血来潮，有心将它记录下来留作纪念已矣。</p>

<h2>正文</h2>

<p>原理呢其实挺简单，找茬嘛就是找两张图的差异，这可是Photoshop最擅长做的事情啦（这也是我想到用它的原因）。在游戏过程中用Photoshop找茬需要解决的关键问题是如何做到迅速地让茬茬尽收眼底，显然Photoshop的Action最能胜任此类事情了。</p>

<p>如果Problem是输入的话，那么输出则是Solution。</p>

<p>现在的Problem是:</p>

<p><img src="/images/muo_img/zhaocha/problem.jpg"></p>

<p>而所谓的Solution的就是这样的(瞧，5茬尽收眼底！):</p>

<p><img src="/images/muo_img/zhaocha/solution.jpg"></p>

<p>从Problem出发，可以看出原图大小即为游戏窗口大小(<code>800 x 600</code>)，Solution中的结果图大小为原图中单张茬茬图的大小(<code>381 x 286</code>)，我们要做的就是从原图到结果图中的转换。</p>

<p>首先需要建一张<code>381 x 286</code>大小的纯黑色图片（比如将其保存为x.png，如下图）作为结果图的容器然后在Photoshop中打开。</p>

<p><img src="/images/muo_img/zhaocha/x.png"></p>

<p>Photoshop要想获取游戏窗口的截图，需要剪贴板作为中介，在<code>Windows</code>下按快捷键<code>Alt + Print Screen</code>将当前激活窗口（这里即为游戏窗口）拷贝至剪贴板，这时在Photoshop就可以按<code>Ctrl + V</code>或<code>F4</code>键将截图拷贝至图层。</p>

<p>第二步就是录制<code>Action</code>啦，一共分为8步，如下图:</p>

<p><img class="left" src="/images/muo_img/zhaocha/zhaocha_action.png"></p>

<ul>
<li>粘贴：将通过<code>Alt + Print Screen</code>快捷键截取的游戏窗口粘贴到打开的<code>x.png</code>图片中作为图层</li>
<li>图层对位：移动图层的位置使左张茬图完全显示在画布中</li>
<li>复制图层：<code>Ctrl + J</code>复制图层到新的图层</li>
<li>全选：<code>Ctrl + A</code>选区选中整个画布</li>
<li>右对齐新复制的图层</li>
<li>取消选择：<code>Ctrl + D</code>取消选区</li>
<li>设置新复制图层的叠加模式为<code>Difference</code></li>
<li>移位新复制图层使右张茬图与左张茬图重叠得到Solution所示效果</li>
</ul>


<p style="clear:both"></p>


<p>动作准备好后，玩游戏就是机械运动了：</p>

<ul>
<li><code>Alt + Print Screen</code> 截取游戏窗口</li>
<li>切换到Photoshop执行脚本</li>
<li>点点点点点、然后换图继续执行第一步</li>
</ul>


<p>当然为了方便可以为动作设置快捷键。</p>

<p>我的做法，响应文件<code>Revert</code>事件：通过菜单命令<code>File | Scripts | Script Event Manager…</code>打开<code>脚本事件管理</code>弹出框，如下图，按以下方式进行设置：</p>

<p><img src="/images/muo_img/zhaocha/script_events_manager_panel.png"></p>

<ul>
<li>勾选<code>Enable Events to Run Scripts/Actions</code></li>
<li><code>Photoshop Event</code>下拉框选择<code>Add an Event…</code>添加自定义事件</li>
<li>在打开的<code>Add an Event</code>弹出框中

<ul>
<li><code>Event Name</code>文本框填入<code>Revert</code></li>
<li><code>Descriptive Label</code>文本框填入<code>Rvrt</code></li>
<li>点击<code>OK</code>按钮完成添加</li>
</ul>
</li>
<li><code>Photoshop Event</code>下拉框选择刚刚添加的<code>Event</code>事件</li>
<li>选中单选框<code>Action</code>，然后选择之前刚录制的动作</li>
</ul>


<p>这时候<code>Alt + Print Screen</code> + <code>F12</code>的<code>“REPL”</code>完成，一切妥妥的、一切都变得机械！</p>

<h2>尾声</h2>

<p>当我利用这投机取巧的办法再次投入战斗时，真是屡试不爽、所向披靡。一相比较，游戏里的辅助道具实在弱爆了。我并不认为我这种玩法叫开挂，作弊一说也算勉强的了，晓之以理的讲法叫扬长避短、不亦乐乎。尽管缺失了些游戏的趣味性，但心理上得到的满足感却更强，这就够了。游戏说白了就是图个开心，每个人从中汲取开心的因子不一罢了。同时这也算是我用Photoshop比较有趣味的一种玩法吧！</p>

<p>P.S.：行文着实仓促!</p>

<h2>参考</h2>

<ol>
<li><a href="http://tinyurl.com/kwmfjj9">Photoshop Programming Guide</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript异步代码排程策略]]></title>
    <link href="http://myunlessor.me/blog/2013/06/04/strategy-for-scheduling-javascript-asynchronous-code/"/>
    <updated>2013-06-04T19:06:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/06/04/strategy-for-scheduling-javascript-asynchronous-code</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>写JavaScript脚本代码经常需要用到计时器(<code>window.setTimeout</code>)功能，先看如下代码片段：</p>

<pre><code class="js">// 先解析，但延时1000ms
setTimeout(function foo() {
  console.log('foo');
}, 1000);

// 后解析，但延时100ms
setTimeout(function bar() {
  console.log('bar');
}, 100);
</code></pre>

<!-- more -->


<p>将该代码片段拷贝进Chrome浏览器的控制台(<code>Console</code>)中执行，可以发现在控制台中是先打印<code>bar</code>字符串，后打印<code>foo</code>字符串，也即是先执行了<code>bar</code>函数，后执行了<code>foo</code>函数。假如我们要让代码执行完<code>foo</code>函数后再执行<code>bar</code>函数，不难想到如下方法：</p>

<pre><code class="js">setTimeout(function foo() {
  console.log('foo');

  setTimeout(function bar() {
    console.log('bar');
  }, 100);
}, 1000);
</code></pre>

<p>在控制台中测试发现这确实达到了我们的预期结果，但这种嵌套结构实在不优雅。当嵌套层级多时，代码可读性会变得相当差，试看如下代码片段：</p>

<pre><code class="js">var foo = function () {
  console.log('foo');
};

var muo = {
  x: 'baz',
  bar: function () {
    console.log(this.x);
  }
};

var yell = {x: 'boo'};

var bear = function (x, y) {
  console.log(x + y);
};

setTimeout(function () {
  foo();

  setTimeout(function () {
    muo.bar();

    setTimeout(function () {
      muo.bar.call(yell);

      setTimeout(function () {
        bear(10, 17);
      }, 1);
    }, 10);
  }, 100);
}, 1000);
</code></pre>

<p>相信没多少人喜欢读这种缺乏结构的代码。那么，有什么办法可以让上述代码变得优雅起来呢？这就涉及到异步代码排程的问题。</p>

<h2>策略</h2>

<p>在上述第一段代码中，<code>setTimeout</code>方法设定的延时在一定程度上可以看成是代码执行顺序的优先级，它打乱了先来后到的规则，延时短的比延时长的优先级高，在同一作用域内计时器代码执行的顺序与解析的顺序无关，这就产生了异步问题，可以类比为现实中的插队行为。我们这里要解决的就是这种异步排程问题，我们要确保先来后到的规则，先执行先被解析的代码，后执行后被解析的代码。</p>

<p>我们知道，在银行窗口办理业务时，我们得先取票排队，先取票的先为之服务，后取票的后服务。当然，这里只考虑只有一个窗口的情况。</p>

<p>类似的，要解决异步代码排程问题，我们可以把要执行的代码当成任务约束在队列中，先入队的先执行，后入队的后执行（即<code>FIFO</code>），且保证同一时间最多允许一个任务执行。基于以上分析，我们可以设计如下策略：</p>

<pre><code class="js">var schedule = (function (self) {
  var paused = false, // 标记状态
      queue  = [];     // 队列

  // 入队
  self.join = function (fn, params) {
    params = params || {};
    var args = [].concat(params.args);

    queue.push(function (_) {
      _.pause();
      setTimeout(function () {
        fn.apply(params.context || null, args);
        _.resume();
      }, params.delay || 1);
    });

    return exec();
  };

  self.pause = function () {
    paused = true;  // 忙碌
    return this;
  };

  // ready and call next
  self.resume = function () {
    paused = false; // 空闲
    setTimeout(exec, 1);
    return this;
  };

  function exec() {
    if (!paused &amp;&amp; queue.length) {
      queue.shift()(self);  // 出队
      if (!paused) self.resume();
    }
    return self;
  }

  return self;
}(schedule || {}));
</code></pre>

<p>有了以上设计的排程规则，我们可以将如上多嵌套代码优雅地表达为：</p>

<pre><code class="js">var foo = function () {
  console.log('foo');
};

var muo = {
  x: 'baz',
  bar: function () {
    console.log(this.x);
  }
};

var yell = {x: 'boo'};

var bear = function (x, y) {
  console.log(x + y);
};

schedule
  .join(foo, {
    delay: 1000 // 延时
  })
  .join(muo.bar, {
    delay: 100,
    context: muo // this解析上下文
  })
  .join(muo.bar, {
    delay: 10,
    context: yell // this解析上下文
  })
  .join(bear, {
    delay: 1,
    args: [10, 17] // 为bear函数提供参数
  });
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://goo.gl/1A8ew">Secrets of the JavaScript Ninja</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Photoshop: 将整图一分为九]]></title>
    <link href="http://myunlessor.me/blog/2013/05/20/divide-slice-by-using-photoshop-scripts/"/>
    <updated>2013-05-20T20:31:00+08:00</updated>
    <id>http://myunlessor.me/blog/2013/05/20/divide-slice-by-using-photoshop-scripts</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>前些天一同事在做拼图游戏。设计师提供了很多素材图片给他，这些图片都是整张整张的，他需要将这些图片切图成九宫格(3 x 3)、十六宫格(4 x 4)、二十五宫格(5 x 5)等。如果单张单张地进行计算然后裁切肯定不现实，那样实在效率低下，然后他问我有没快捷方法可以帮助他。</p>

<!-- more -->


<h2>思路一(动作)</h2>

<p>我们切图一般都在<code>photoshop</code>中完成。以往我遇到这种大量的重复性工作时，我绝对不会坐以待毙，我会想方设法，不达目的绝不罢休。通常面对这种问题时，我首先想到的就是生成一个<code>action</code>(动作)，然后利用它批量完成。</p>

<p>该<code>action</code>(动作)的大致思路是将各宫格图片分散到不同的图层中，然后便可以通过菜单命令<code>File | Scripts | Export Layers to Files…</code>将图层一一导出为文件，具体如下：</p>

<ul>
<li>计算一张图片的三等分宽高，生成并保存选区</li>
<li>将选区定位在图片左上角，然后通过菜单命令<code>Layer | New | Layer via Cut(Copy)</code>将该区域隔离到新的图层</li>
<li>重新载入选区，移位选区至新的位置，执行第二步同样命令</li>
<li>重复执行第三步，直到图片九等分分散在不同图层</li>
</ul>


<p>但是，生成这样的动作不仅麻烦，而且也不甚高效，原因如下：</p>

<ul>
<li>需要为九宫格(3 x 3)、十六宫格(4 x 4)、二十五宫格(5 x 5)不同规格生成不同的动作</li>
<li>其他原因忘了~^~…</li>
</ul>


<p>于是这种思路只成为了一种念想，一闪即过。</p>

<h2>思路二(切片工具)</h2>

<p>然后有考虑利用<code>Divide Slice…</code>(划分切图)及<code>Slices from Guides</code>(辅助线自动生成切片)功能——一种传统古老的切图方式。然后通过菜单命令<code>File | Save for Web…</code>将各切片导出为图片。这种方式可行是可行，但事实是提供的图片不是很理想，宫格中有1个像素的透明<code>gutter</code>(间隙)。如果不考虑<code>gutter</code>(间隙)的话，九宫格切图只需四条均分辅助线，否则需要八条，这样就会导出很多垃圾图片——1像素宽或(和)1像素高的图。这样效果不是很理想(自许准理想主义者)，于是这种方法也不了了之了。</p>

<blockquote><p>事实是，这种方法确实可行，考虑四条均分辅助线生成切片，最后可以生成个<code>action</code>(动作)对这些图片做最后的<code>sanitization</code>(“消毒处理”)，傻眼了当时…</p></blockquote>

<h2>思路三(脚本)</h2>

<p>最后，不得不实施<code>Last Resort</code>(破釜沉舟之计)。我想到了脚本语言(事实是，原来我调侃同事用写段<code>Java</code>代码生成图片…^-^)，<code>photoshop</code>自带的脚本功能(支持<code>JavaScript</code>、<code>VBScript</code>、<code>AppleScript</code>三种脚本语言)做这类事可谓游刃有余，一段简短的代码就可以干净利落地解决它，代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>划分切图脚本 (divide_slice.js)</span> <a href='/downloads/code/divide_slice.js'>下载</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">#</span><span class="nx">target</span> <span class="nx">photoshop</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">preferences</span><span class="p">.</span><span class="nx">rulerUnits</span> <span class="o">!==</span> <span class="nx">Units</span><span class="p">.</span><span class="nx">PIXELS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 采用像素单位进行计算</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">preferences</span><span class="p">.</span><span class="nx">rulerUnits</span> <span class="o">=</span> <span class="nx">Units</span><span class="p">.</span><span class="nx">PIXELS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 当前文档引用</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docRef</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">activeDocument</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 文档宽度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docWidth</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 文档高度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">docHeight</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 细分次数(默认 3 x 3，即九宫格切分)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">divides</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 宫格间隙(默认无间隙)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">gutter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 每宫格宽度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">slotWidth</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">docWidth</span> <span class="o">/</span> <span class="nx">divides</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 每宫格高度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">slotHeight</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">docHeight</span> <span class="o">/</span> <span class="nx">divides</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 保存当前图层(即整图)引用</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">layerRef</span> <span class="o">=</span> <span class="nx">docRef</span><span class="p">.</span><span class="nx">activeLayer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 遍历行</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">docWidth</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">-=</span> <span class="nx">slotHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 遍历列</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">docHeight</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">-=</span> <span class="nx">slotWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 重置当前图片为原图层(即整图)</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">activeLayer</span> <span class="o">=</span> <span class="nx">layerRef</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 从右往左、从下往上设置选区</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">select</span><span class="p">([</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">slotWidth</span><span class="p">,</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">slotHeight</span><span class="p">],</span> <span class="c1">// 左</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">slotHeight</span><span class="p">],</span>  <span class="c1">// 上</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">],</span> <span class="c1">// 右</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">slotWidth</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="c1">// 下</span>
</span><span class='line'>    <span class="p">],</span> <span class="nx">SelectionType</span><span class="p">.</span><span class="nx">REPLACE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// layer via copy ^-^</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">copy</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">artLayers</span><span class="p">.</span><span class="nx">add</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">docRef</span><span class="p">.</span><span class="nx">paste</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 水平轴向间隙偏移</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">-=</span> <span class="nx">gutter</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 垂直轴向间隙偏移</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">-=</span> <span class="nx">gutter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 删除原图层(即整图)</span>
</span><span class='line'><span class="nx">layerRef</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>用法很简单，只需下载这段脚本到本地，打开需要切分的图片，然后执行菜单命令<code>File | Scripts | Browse…</code>，在打开的弹出框中找到该脚本，双击执行即可。
r
如果要处理的图片很多的话，配合动作使用即可实现批处理。</p>

<h2>参考书目</h2>

<ol>
<li><a href="http://goo.gl/IFQav">Photoshop CS6 Scripting Guide</a></li>
<li><a href="http://goo.gl/ukIhf">Photoshop CS6 JavaScript Ref</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
